{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Java Learning Roadmap","text":"<p>This repository provides a comprehensive Java learning roadmap designed to guide learners from beginner to advanced levels. The roadmap is structured into six phases, each focusing on specific skills and technologies to help you become a proficient Java developer.</p>"},{"location":"#note","title":"Note","text":"<p>You don\u2019t need to complete the entire roadmap before applying for jobs. From Phase 2 (Object-Oriented Programming) onwards, you will have the necessary foundations to start looking for internships or junior developer positions while continuing your learning journey. Completing all six phases will prepare you for more advanced roles, including those requiring knowledge of modern frameworks, microservices, and DevOps practices. </p>"},{"location":"#roadmap-structure","title":"Roadmap Structure","text":"<p>The Java Learning Roadmap is divided into six progressive phases, each building upon the previous one. Below is a brief overview of each phase:</p> <ul> <li>Phase 1: Fundamentals and Essential Java </li> <li>Phase 2: Object-Oriented Programming  </li> <li>Phase 3: Data Persistence and Streams  </li> <li>Phase 4: Frameworks and Web Applications  </li> <li>Phase 5: System Architecture and Concurrency  </li> <li>Phase 6: Final Projects  </li> </ul>"},{"location":"#available-languages","title":"Available Languages","text":"<ul> <li>Portuguese (Brazil)</li> <li>English</li> <li>Spanish</li> <li>Chinese (Mandarin)</li> <li>French</li> <li>Arabic</li> <li>Bengali</li> <li>German</li> <li>Hindi</li> <li>Japanese</li> <li>Korean</li> <li>Russian</li> <li>Vietnamese</li> <li>Italian</li> <li>Turkish</li> </ul>"},{"location":"#how-to-use-this-roadmap","title":"How to Use This Roadmap","text":"<ol> <li>Choose Your Language: Select your preferred language in the summary.</li> <li>Follow the Phases: Start with Phase 1 and progress through the phases in order, using the recommended resources to deepen your understanding.</li> <li>Practice and Apply: Complete the exercises and projects suggested in each phase to solidify your knowledge.</li> </ol> <p>This roadmap is designed to be flexible, allowing you to learn at your own pace while covering all essential aspects of Java development.</p> <p>Happy learning!</p>"},{"location":"languages/ar/phase1/","title":"\u0627\u0644\u0645\u0631\u062d\u0644\u0629 1 \u2013 \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0627\u062a \u0648\u062c\u0627\u0641\u0627 \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0629 (2-3 \u0623\u0634\u0647\u0631)","text":""},{"location":"languages/ar/phase1/#_1","title":"\u0627\u0644\u0645\u0646\u0637\u0642 \u0627\u0644\u0628\u0631\u0645\u062c\u064a \u0648\u0627\u0644\u062e\u0648\u0627\u0631\u0632\u0645\u064a\u0627\u062a","text":"<ul> <li>\u062a\u0641\u0643\u064a\u0643 \u0627\u0644\u0645\u0634\u0627\u0643\u0644</li> <li>\u062a\u0645\u0627\u0631\u064a\u0646: \u0627\u0644\u0645\u062a\u0648\u0633\u0637\u060c \u0632\u0648\u062c\u064a/\u0641\u0631\u062f\u064a\u060c \u0627\u0644\u0641\u0631\u0632</li> </ul>"},{"location":"languages/ar/phase1/#_2","title":"\u0625\u0639\u062f\u0627\u062f \u0627\u0644\u0628\u064a\u0626\u0629","text":"<ul> <li>\u062a\u062b\u0628\u064a\u062a JDK</li> <li>IDE (IntelliJ \u0623\u0648 Eclipse)</li> <li>Basic debugging</li> </ul>"},{"location":"languages/ar/phase1/#_3","title":"\u0628\u0646\u0627\u0621 \u062c\u0645\u0644\u0629 \u062c\u0627\u0641\u0627 \u0627\u0644\u0623\u0633\u0627\u0633\u064a","text":"<ul> <li>\u0647\u064a\u0643\u0644\u064a\u0629 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c (class, main)</li> <li>\u0627\u0635\u0637\u0644\u0627\u062d\u0627\u062a \u0627\u0644\u062a\u0633\u0645\u064a\u0629</li> <li>\u0627\u0644\u062a\u0639\u0644\u064a\u0642\u0627\u062a</li> </ul>"},{"location":"languages/ar/phase1/#_4","title":"\u0623\u0646\u0648\u0627\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0644\u0645\u062a\u063a\u064a\u0631\u0627\u062a","text":"<ul> <li>\u0627\u0644\u0623\u0646\u0648\u0627\u0639 \u0627\u0644\u0623\u0648\u0644\u064a\u0629 \u0648\u063a\u064a\u0631 \u0627\u0644\u0623\u0648\u0644\u064a\u0629</li> <li>\u0627\u0644\u0625\u0639\u0644\u0627\u0646\u060c \u0627\u0644\u062a\u0647\u064a\u0626\u0629\u060c \u0627\u0644\u062b\u0648\u0627\u0628\u062a</li> <li>Casting \u0648\u0627\u0644\u0645\u0642\u0627\u0631\u0646\u0629 (<code>==</code> vs <code>.equals()</code>)</li> </ul>"},{"location":"languages/ar/phase1/#_5","title":"\u0627\u0644\u0625\u062f\u062e\u0627\u0644 \u0648\u0627\u0644\u0625\u062e\u0631\u0627\u062c","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/ar/phase1/#_6","title":"\u0647\u064a\u0627\u0643\u0644 \u0627\u0644\u062a\u062d\u0643\u0645","text":"<ul> <li>if, else if, else, switch</li> <li>\u0627\u0644\u0645\u0634\u063a\u0644\u0627\u062a \u0627\u0644\u0645\u0646\u0637\u0642\u064a\u0629 \u0648\u0627\u0644\u0639\u0644\u0627\u0626\u0642\u064a\u0629</li> </ul>"},{"location":"languages/ar/phase1/#_7","title":"\u0627\u0644\u062d\u0644\u0642\u0627\u062a","text":"<ul> <li>for, while, do-while</li> <li>break, continue, \u0627\u0644\u062d\u0644\u0642\u0627\u062a \u0627\u0644\u0645\u062a\u062f\u0627\u062e\u0644\u0629</li> </ul>"},{"location":"languages/ar/phase1/#_8","title":"\u0627\u0644\u062f\u0648\u0627\u0644 \u0648\u0627\u0644\u0646\u0637\u0627\u0642","text":"<ul> <li>\u0627\u0644\u0625\u0639\u0644\u0627\u0646\u060c \u0627\u0644\u0645\u0639\u0644\u0645\u0627\u062a\u060c return</li> <li>Overloading</li> <li>\u0627\u0644\u0645\u062a\u063a\u064a\u0631\u0627\u062a \u0627\u0644\u0645\u062d\u0644\u064a\u0629 \u0648\u0633\u0645\u0627\u062a \u0627\u0644\u0641\u0626\u0629</li> </ul>"},{"location":"languages/ar/phase1/#_9","title":"\u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0627\u062a","text":"<ul> <li>\u0627\u0644\u0625\u0639\u0644\u0627\u0646\u060c \u0627\u0644\u062a\u0647\u064a\u0626\u0629\u060c \u0648\u0627\u0644\u062a\u0644\u0627\u0639\u0628</li> <li>\u0627\u0644\u0628\u062d\u062b \u0627\u0644\u062e\u0637\u064a \u0648\u0627\u0644\u0641\u0631\u0632 \u0627\u0644\u064a\u062f\u0648\u064a</li> <li>Arrays.toString() \u0644\u0623\u063a\u0631\u0627\u0636 debugging</li> </ul>"},{"location":"languages/ar/phase1/#strings-stringbuilder","title":"Strings \u0648 StringBuilder","text":"<ul> <li>\u0627\u0644\u062f\u0648\u0627\u0644 \u0627\u0644\u0634\u0627\u0626\u0639\u0629</li> <li>Immutability \u0648\u0627\u0644\u0623\u062f\u0627\u0621</li> </ul>"},{"location":"languages/ar/phase1/#_10","title":"\u0627\u0644\u0627\u0633\u062a\u062b\u0646\u0627\u0621\u0627\u062a","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw \u0648 throws</li> <li>\u0625\u0646\u0634\u0627\u0621 \u0627\u0633\u062a\u062b\u0646\u0627\u0621\u0627\u062a \u0645\u062e\u0635\u0635\u0629 (\u0645\u062b\u0627\u0644: throw new MyException)</li> </ul>"},{"location":"languages/ar/phase1/#_11","title":"\u0627\u0644\u0623\u062f\u0648\u0627\u062a \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0629","text":"<ul> <li>Terminal: cd, ls, mkdir</li> <li>Git: init, add, commit, push, pull, branch, merge</li> <li>GitHub: \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0645\u0633\u062a\u0648\u062f\u0639\u0627\u062a\u060c pull requests\u060c \u0627\u0644\u0627\u0633\u062a\u0646\u0633\u0627\u062e</li> </ul>"},{"location":"languages/ar/phase1/#_12","title":"\u0627\u0644\u0645\u0634\u0627\u0631\u064a\u0639 \u0627\u0644\u0646\u0647\u0627\u0626\u064a\u0629","text":"<ul> <li>\u0622\u0644\u0629 \u062d\u0627\u0633\u0628\u0629 \u0628\u0633\u064a\u0637\u0629 \u0648\u0645\u062f\u064a\u0631 \u0645\u0647\u0627\u0645</li> <li>\u0627\u0644\u0645\u062a\u0637\u0644\u0628\u0627\u062a:</li> <li>\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Git</li> <li>\u0627\u0644\u0646\u0634\u0631 \u0639\u0644\u0649 GitHub</li> <li>README \u062a\u0648\u0636\u064a\u062d\u064a</li> </ul>"},{"location":"languages/ar/phase1/#_13","title":"\u0627\u0644\u0645\u0648\u0627\u0631\u062f","text":"<ul> <li>MOOC \u0645\u0646 \u062c\u0627\u0645\u0639\u0629 \u0647\u0644\u0633\u0646\u0643\u064a</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/ar/phase2/","title":"\u0627\u0644\u0645\u0631\u062d\u0644\u0629 2 \u2013 \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0643\u0627\u0626\u0646\u064a\u0629 \u0627\u0644\u062a\u0648\u062c\u0647 (2-3 \u0623\u0634\u0647\u0631)","text":""},{"location":"languages/ar/phase2/#_1","title":"\u0627\u0644\u0641\u0626\u0627\u062a\u060c \u0627\u0644\u0643\u0627\u0626\u0646\u0627\u062a\u060c \u0627\u0644\u0633\u0645\u0627\u062a\u060c \u0648\u0627\u0644\u062f\u0648\u0627\u0644","text":"<ul> <li>\u0647\u064a\u0643\u0644\u064a\u0629 \u0627\u0644\u0641\u0626\u0629</li> <li>\u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0643\u0627\u0626\u0646\u0627\u062a</li> <li>\u0627\u0633\u062a\u062e\u062f\u0627\u0645 this</li> <li>\u0623\u0641\u0636\u0644 \u0627\u0644\u0645\u0645\u0627\u0631\u0633\u0627\u062a: \u0627\u0644\u062a\u0633\u0645\u064a\u0629\u060c \u062a\u0646\u0638\u064a\u0645 \u0627\u0644\u0643\u0648\u062f</li> </ul>"},{"location":"languages/ar/phase2/#_2","title":"\u0627\u0644\u062a\u063a\u0644\u064a\u0641\u060c \u0627\u0644\u0648\u0631\u0627\u062b\u0629\u060c \u0627\u0644\u062a\u0639\u062f\u062f\u064a\u0629\u060c \u0648\u0627\u0644\u062a\u062c\u0631\u064a\u062f","text":"<ul> <li>Encapsulation: private, getters/setters, \u0627\u0644\u062a\u062d\u0642\u0642</li> <li>Inheritance: extends, overriding (@Override)</li> <li>Polymorphism: \u0646\u0648\u0639 \u0641\u0631\u0639\u064a\u060c method overloading</li> <li>Abstraction: \u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629\u060c \u0627\u0644\u062a\u062d\u0636\u064a\u0631 \u0644\u0644\u0640 interfaces \u0648\u0627\u0644\u0640 abstract classes</li> </ul>"},{"location":"languages/ar/phase2/#_3","title":"\u0627\u0644\u0648\u0627\u062c\u0647\u0627\u062a \u0648\u0627\u0644\u0641\u0626\u0627\u062a \u0627\u0644\u062a\u062c\u0631\u064a\u062f\u064a\u0629","text":"<ul> <li>Interfaces: implements, default methods</li> <li>Abstract classes: \u0627\u0644\u062f\u0648\u0627\u0644 \u0627\u0644\u062a\u062c\u0631\u064a\u062f\u064a\u0629 \u0648\u0627\u0644\u0645\u0644\u0645\u0648\u0633\u0629</li> <li>\u0627\u0644\u0641\u0631\u0648\u0642 \u0628\u064a\u0646 interface \u0648 abstract class</li> </ul>"},{"location":"languages/ar/phase2/#_4","title":"\u0627\u0644\u0645\u064f\u0646\u0634\u0626\u0627\u062a\u060c \u0627\u0644\u0645\u064f\u0647\u064a\u0626\u0627\u062a\u060c \u0648\u0627\u0644\u0643\u062a\u0644 \u0627\u0644\u062b\u0627\u0628\u062a\u0629","text":"<ul> <li>\u0627\u0644\u0645\u064f\u0646\u0634\u0626\u0627\u062a \u0627\u0644\u0627\u0641\u062a\u0631\u0627\u0636\u064a\u0629 \u0648\u0627\u0644\u0645\u064f\u0645\u0646\u0647\u062c\u0629\u060c \u0627\u0644\u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 this()</li> <li>\u0643\u062a\u0644 \u0627\u0644\u062a\u0647\u064a\u0626\u0629 ({}) \u0648\u0627\u0644\u0643\u062a\u0644 \u0627\u0644\u062b\u0627\u0628\u062a\u0629 (static {})</li> </ul>"},{"location":"languages/ar/phase2/#_5","title":"\u0627\u0644\u062a\u0639\u062f\u0627\u062f\u0627\u062a","text":"<ul> <li>\u0625\u0646\u0634\u0627\u0621 \u0648\u0627\u0633\u062a\u062e\u062f\u0627\u0645 enum</li> <li>\u0627\u0644\u062f\u0648\u0627\u0644 \u0648\u0627\u0644\u0633\u0645\u0627\u062a \u0641\u064a enums</li> </ul>"},{"location":"languages/ar/phase2/#_6","title":"\u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0629","text":"<ul> <li>ArrayList: \u0627\u0644\u0625\u0636\u0627\u0641\u0629\u060c \u0627\u0644\u062d\u0630\u0641\u060c \u0627\u0644\u062a\u0643\u0631\u0627\u0631 (for, forEach, Iterator)</li> <li>HashMap: \u0645\u0641\u062a\u0627\u062d-\u0642\u064a\u0645\u0629\u060c \u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0634\u0627\u0626\u0639\u0629</li> <li>HashSet: \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u062a\u0643\u0631\u0627\u0631\u0627\u062a</li> <li>\u0645\u0642\u062f\u0645\u0629 \u0625\u0644\u0649 Queue \u0648 Stack (\u0645\u062b\u0627\u0644: LinkedList \u0643\u0640 queue/stack)</li> <li>\u0645\u0642\u062f\u0645\u0629 \u0625\u0644\u0649 Java Collections Framework</li> </ul>"},{"location":"languages/ar/phase2/#_7","title":"\u0627\u0644\u062e\u0648\u0627\u0631\u0632\u0645\u064a\u0627\u062a \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0629","text":"<ul> <li>\u0627\u0644\u0628\u062d\u062b \u0627\u0644\u062e\u0637\u064a \u0648\u0627\u0644\u0628\u062d\u062b \u0627\u0644\u062b\u0646\u0627\u0626\u064a</li> <li>Sorting: Bubble Sort, Collections.sort()</li> <li>Recursion: \u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645 \u0648\u0623\u0645\u062b\u0644\u0629 \u0628\u0633\u064a\u0637\u0629 (\u0645\u062b\u0627\u0644: \u0627\u0644\u0639\u0627\u0645\u0644\u064a\u0629\u060c \u0641\u064a\u0628\u0648\u0646\u0627\u062a\u0634\u064a)</li> <li>\u0645\u0642\u062f\u0645\u0629 \u0625\u0644\u0649 \u0627\u0644\u062a\u0639\u0642\u064a\u062f (O(n), O(log n))</li> </ul>"},{"location":"languages/ar/phase2/#_8","title":"\u0627\u0644\u062c\u064a\u0646\u064a\u0631\u064a\u0643\u0633","text":"<ul> <li>\u0627\u0644\u0635\u064a\u063a\u0629 ()\u060c \u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0627\u0644\u062c\u064a\u0646\u064a\u0631\u064a\u0643\u060c \u0627\u0644\u062f\u0648\u0627\u0644 \u0627\u0644\u062c\u064a\u0646\u064a\u0631\u064a\u0643 <li>\u0627\u0644\u062d\u062f\u0648\u062f (extends, super)</li>"},{"location":"languages/ar/phase2/#stream-api","title":"Stream API (\u0645\u0642\u062f\u0645\u0629)","text":"<ul> <li>\u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0629: filter, map, collect</li> <li>\u0623\u0645\u062b\u0644\u0629 \u0645\u0639 ArrayList</li> </ul>"},{"location":"languages/ar/phase2/#_9","title":"\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u0648\u062d\u062f\u064a\u0629 (\u0645\u0642\u062f\u0645\u0629)","text":"<ul> <li>\u0627\u0644\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u0623\u0633\u0627\u0633\u064a \u0644\u0640 JUnit</li> <li>\u0643\u062a\u0627\u0628\u0629 \u062d\u0627\u0644\u0627\u062a \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0644\u0644\u0641\u0626\u0627\u062a \u0648\u0627\u0644\u062f\u0648\u0627\u0644</li> <li>\u0645\u0642\u062f\u0645\u0629 \u0625\u0644\u0649 TDD (Test-Driven Development)</li> </ul>"},{"location":"languages/ar/phase2/#_10","title":"\u0627\u0644\u0645\u0634\u0631\u0648\u0639 \u0627\u0644\u0646\u0647\u0627\u0626\u064a","text":"<ul> <li>\u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0643\u062a\u0628\u0629</li> <li>\u0627\u0644\u0641\u0626\u0627\u062a: Book, User, Library</li> <li>\u0627\u0644\u0648\u0631\u0627\u062b\u0629: DigitalBook \u0648 PhysicalBook</li> <li>\u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0627\u062a: ArrayList \u0644\u0644\u0643\u062a\u0628\u060c HashMap \u0644\u0644\u0625\u0639\u0627\u0631\u0627\u062a</li> <li>Encapsulation: \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a</li> <li>Git: commit \u0644\u0643\u0644 \u0645\u064a\u0632\u0629 (\u0645\u062b\u0627\u0644: <code>feature/book-management</code>)</li> <li>\u0627\u0644\u0646\u0634\u0631 \u0639\u0644\u0649 GitHub \u0645\u0639 README \u062a\u0648\u0636\u064a\u062d\u064a</li> </ul>"},{"location":"languages/ar/phase2/#_11","title":"\u0627\u0644\u0645\u0648\u0627\u0631\u062f \u0627\u0644\u0645\u062d\u062f\u062b\u0629","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java (\u0643\u062a\u0627\u0628)</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/ar/phase3/","title":"\u0627\u0644\u0645\u0631\u062d\u0644\u0629 3 \u2013 \u0627\u0633\u062a\u0645\u0631\u0627\u0631\u064a\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648 Streams (2-3 \u0623\u0634\u0647\u0631)","text":""},{"location":"languages/ar/phase3/#sql","title":"SQL \u0627\u0644\u0623\u0633\u0627\u0633\u064a","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Keys: \u0627\u0644\u0645\u0641\u0627\u062a\u064a\u062d \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0629 \u0648\u0627\u0644\u0623\u062c\u0646\u0628\u064a\u0629.  </li> <li>Normalization: 1NF, 2NF, 3NF.  </li> <li>\u0645\u062b\u0627\u0644: \u0625\u0646\u0634\u0627\u0621 \u062c\u062f\u0627\u0648\u0644 \u0644\u0644\u0645\u0646\u062a\u062c\u0627\u062a \u0648\u0627\u0644\u0641\u0626\u0627\u062a.  </li> </ul>"},{"location":"languages/ar/phase3/#jdbc-connection-pool","title":"JDBC \u0648 Connection Pool","text":"<ul> <li>Classes: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Connection Pool (HikariCP).  </li> <li>\u0623\u0641\u0636\u0644 \u0627\u0644\u0645\u0645\u0627\u0631\u0633\u0627\u062a: <code>try-with-resources</code>, \u0627\u0644\u062a\u0639\u0627\u0645\u0644 \u0645\u0639 <code>SQLException</code>.  </li> </ul>"},{"location":"languages/ar/phase3/#hibernate-jpa","title":"Hibernate + JPA \u0641\u064a \u0627\u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0639\u0645\u0644\u064a","text":"<ul> <li>Annotations: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>Configuration: <code>persistence.xml</code> \u0623\u0648 <code>application.properties</code>.  </li> <li>\u0639\u0645\u0644\u064a\u0627\u062a CRUD \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 <code>EntityManager</code>.  </li> <li>\u0645\u0642\u062f\u0645\u0629 \u0625\u0644\u0649 \u0647\u062c\u0631\u0629 \u0642\u0648\u0627\u0639\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Flyway \u0623\u0648 Liquibase.</li> </ul>"},{"location":"languages/ar/phase3/#nosql","title":"\u0645\u0642\u062f\u0645\u0629 \u0625\u0644\u0649 \u0642\u0648\u0627\u0639\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a NoSQL","text":"<ul> <li>\u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645: \u0627\u0644\u0645\u0633\u062a\u0646\u062f\u0627\u062a\u060c \u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0627\u062a\u060c \u0627\u0644\u0642\u0627\u0628\u0644\u064a\u0629 \u0644\u0644\u062a\u0648\u0633\u0639 \u0627\u0644\u0623\u0641\u0642\u064a.  </li> <li>MongoDB: \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u060c \u0639\u0645\u0644\u064a\u0627\u062a CRUD \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 MongoRepository.  </li> <li>Spring Data MongoDB: \u0627\u0644\u062a\u0643\u0627\u0645\u0644 \u0645\u0639 Spring Boot.  </li> <li>\u0645\u062b\u0627\u0644: \u062a\u062e\u0632\u064a\u0646 \u0633\u062c\u0644\u0627\u062a \u0646\u0634\u0627\u0637 \u0627\u0644\u0646\u0638\u0627\u0645 \u0644\u0644\u0645\u0646\u062a\u062c\u0627\u062a \u0641\u064a MongoDB.</li> </ul>"},{"location":"languages/ar/phase3/#streams-lambda-expressions","title":"Streams \u0648 Lambda Expressions","text":"<ul> <li>\u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>\u0645\u062b\u0627\u0644: \u062a\u0635\u0641\u064a\u0629 \u0627\u0644\u0645\u0646\u062a\u062c\u0627\u062a \u062d\u0633\u0628 \u0627\u0644\u0633\u0639\u0631\u060c \u0627\u0644\u0641\u0631\u0632 \u062d\u0633\u0628 \u0627\u0644\u0627\u0633\u0645.  </li> </ul>"},{"location":"languages/ar/phase3/#optional-functional-interfaces","title":"Optional \u0648 Functional Interfaces","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>Functional interfaces: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>\u0645\u062b\u0627\u0644: \u0627\u0633\u062a\u062e\u062f\u0627\u0645 <code>Predicate</code> \u0641\u064a Streams \u0644\u062a\u0635\u0641\u064a\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a.  </li> </ul>"},{"location":"languages/ar/phase3/#_1","title":"\u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0627\u0644\u0645\u062a\u0642\u062f\u0645\u0629","text":"<ul> <li>LinkedList: \u0627\u0644\u0625\u062f\u0631\u0627\u062c/\u0627\u0644\u062d\u0630\u0641 \u0628\u0643\u0641\u0627\u0621\u0629.  </li> <li>TreeMap: \u0623\u0632\u0648\u0627\u062c \u0645\u0641\u062a\u0627\u062d-\u0642\u064a\u0645\u0629 \u0645\u0631\u062a\u0628\u0629.  </li> <li>PriorityQueue: \u0642\u0627\u0626\u0645\u0629 \u0627\u0646\u062a\u0638\u0627\u0631 \u0630\u0627\u062a \u0623\u0648\u0644\u0648\u064a\u0629.  </li> <li>LinkedHashMap \u0648 Deque (\u0645\u0642\u062f\u0645\u0629).  </li> </ul>"},{"location":"languages/ar/phase3/#logging-slf4jlogback","title":"Logging (SLF4J/Logback)","text":"<ul> <li>\u062a\u0647\u064a\u0626\u0629 SLF4J \u0645\u0639 Logback.  </li> <li>\u0627\u0644\u0645\u0633\u062a\u0648\u064a\u0627\u062a: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>\u0645\u062b\u0627\u0644: \u062a\u0633\u062c\u064a\u0644 queries Hibernate.  </li> </ul>"},{"location":"languages/ar/phase3/#acid","title":"\u0645\u0641\u0627\u0647\u064a\u0645 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a (ACID)","text":"<ul> <li>\u0627\u0644\u0630\u0631\u064a\u0629\u060c \u0627\u0644\u0627\u062a\u0633\u0627\u0642\u060c \u0627\u0644\u0639\u0632\u0644\u0629\u060c \u0627\u0644\u0645\u062a\u0627\u0646\u0629.  </li> <li>\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062a \u0645\u0639 JDBC (<code>commit</code>, <code>rollback</code>) \u0648 Hibernate (<code>@Transactional</code>).  </li> </ul>"},{"location":"languages/ar/phase3/#_2","title":"\u0627\u0644\u0641\u0647\u0627\u0631\u0633 \u0648\u062e\u0637\u0637 \u0627\u0644\u062a\u0646\u0641\u064a\u0630","text":"<ul> <li>Indexes: \u0623\u0633\u0627\u0633\u064a\u060c \u0641\u0631\u064a\u062f\u060c \u0645\u0631\u0643\u0628.  </li> <li>\u0627\u0633\u062a\u062e\u062f\u0627\u0645 EXPLAIN \u0644\u062a\u062d\u0633\u064a\u0646 queries.  </li> <li>\u0645\u062b\u0627\u0644: \u0625\u0646\u0634\u0627\u0621 \u0641\u0647\u0631\u0633 \u0639\u0644\u0649 \u0639\u0645\u0648\u062f \u064a\u062a\u0645 \u0627\u0644\u0628\u062d\u062b \u0641\u064a\u0647 \u0628\u0634\u0643\u0644 \u0645\u062a\u0643\u0631\u0631.  </li> </ul>"},{"location":"languages/ar/phase3/#_3","title":"\u0627\u0644\u062a\u0639\u0627\u0645\u0644 \u0645\u0639 \u0627\u0644\u0645\u0644\u0641\u0627\u062a (\u0627\u062e\u062a\u064a\u0627\u0631\u064a)","text":"<ul> <li>\u0627\u0644\u0642\u0631\u0627\u0621\u0629 \u0648\u0627\u0644\u0643\u062a\u0627\u0628\u0629 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 <code>Files</code>, <code>BufferedReader</code>.  </li> <li>\u0645\u062b\u0627\u0644: \u062a\u0635\u062f\u064a\u0631 \u062a\u0642\u0631\u064a\u0631 \u0627\u0644\u0645\u0646\u062a\u062c\u0627\u062a \u0625\u0644\u0649 CSV \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Streams.  </li> </ul>"},{"location":"languages/ar/phase3/#_4","title":"\u0627\u062e\u062a\u0628\u0627\u0631 \u0642\u0648\u0627\u0639\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a (\u0645\u0642\u062f\u0645\u0629)","text":"<ul> <li>\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u062a\u0643\u0627\u0645\u0644 \u0645\u0639 H2 \u0648 JUnit.  </li> <li>\u0645\u062b\u0627\u0644: \u0627\u062e\u062a\u0628\u0627\u0631 \u0639\u0645\u0644\u064a\u0627\u062a CRUD \u0645\u0639 Hibernate.  </li> </ul>"},{"location":"languages/ar/phase3/#_5","title":"\u0627\u0644\u0645\u0634\u0631\u0648\u0639 \u0627\u0644\u0646\u0647\u0627\u0626\u064a","text":"<p>\u0646\u0638\u0627\u0645 \u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u0645\u0646\u062a\u062c\u0627\u062a - \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a: \u062c\u062f\u0627\u0648\u0644 Product \u0648 Category (\u0639\u0644\u0627\u0642\u0629 1:N). - Java: \u0641\u0626\u0627\u062a \u0645\u0639 JPA (<code>Product</code>, <code>Category</code>), CRUD \u0645\u0639 Hibernate. - \u0627\u062e\u062a\u064a\u0627\u0631\u064a: \u062a\u062e\u0632\u064a\u0646 \u0633\u062c\u0644\u0627\u062a \u062a\u063a\u064a\u064a\u0631\u0627\u062a \u0627\u0644\u0645\u0646\u062a\u062c\u0627\u062a \u0641\u064a MongoDB. - \u0627\u062e\u062a\u064a\u0627\u0631\u064a: \u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0633\u0645\u0627\u062a \u0627\u0644\u062f\u064a\u0646\u0627\u0645\u064a\u0643\u064a\u0629 \u0644\u0644\u0645\u0646\u062a\u062c\u0627\u062a (\u0645\u062b\u0644 \u0627\u0644\u0645\u0648\u0627\u0635\u0641\u0627\u062a \u0627\u0644\u0641\u0646\u064a\u0629) \u0641\u064a MongoDB. - Streams: \u062a\u0635\u0641\u064a\u0629/\u0641\u0631\u0632 \u0627\u0644\u0645\u0646\u062a\u062c\u0627\u062a (\u0645\u062b\u0644 \u062d\u0633\u0628 \u0627\u0644\u0633\u0639\u0631 \u0623\u0648 \u0627\u0644\u0641\u0626\u0629). - Logging: \u0645\u0631\u0627\u0642\u0628\u0629 \u0639\u0645\u0644\u064a\u0627\u062a \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a. - Git: commit \u0644\u0643\u0644 \u0645\u064a\u0632\u0629 (\u0645\u062b\u0627\u0644: <code>feature/crud</code>, <code>feature/streams</code>). - \u0627\u0644\u0646\u0634\u0631 \u0639\u0644\u0649 GitHub \u0645\u0639 README \u062a\u0648\u0636\u064a\u062d\u064a.  </p>"},{"location":"languages/ar/phase3/#_6","title":"\u0627\u0644\u0645\u0648\u0627\u0631\u062f","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/ar/phase4/","title":"\u0627\u0644\u0645\u0631\u062d\u0644\u0629 4 \u2013 \u0627\u0644\u0625\u0637\u0627\u0631\u0627\u062a \u0648\u062a\u0637\u0628\u064a\u0642\u0627\u062a \u0627\u0644\u0648\u064a\u0628 (3-4 \u0623\u0634\u0647\u0631)","text":""},{"location":"languages/ar/phase4/#spring-boot-spring-core-spring-data-jpa","title":"Spring Boot\u060c Spring Core\u060c \u0648 Spring Data JPA","text":"<ul> <li>Spring Core: \u062d\u0642\u0646 \u0627\u0644\u062a\u0628\u0639\u064a\u0627\u062a (<code>@Bean</code>, <code>@Autowired</code>)\u060c \u062d\u0627\u0648\u064a\u0629 IoC.  </li> <li>Spring Boot: \u0627\u0644\u0625\u0639\u062f\u0627\u062f \u0627\u0644\u062a\u0644\u0642\u0627\u0626\u064a\u060c starters (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>)\u060c <code>application.yml</code>.  </li> <li>Spring Data JPA: \u0627\u0644\u0645\u0633\u062a\u0648\u062f\u0639\u0627\u062a (<code>CrudRepository</code>, <code>JpaRepository</code>)\u060c \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 <code>@Query</code>\u060c \u0627\u0644\u062a\u0635\u0641\u062d.  </li> <li>\u0645\u062b\u0627\u0644: \u0625\u0646\u0634\u0627\u0621 endpoints REST \u0644\u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u0645\u0647\u0627\u0645 (CRUD) \u0641\u064a \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0645\u0647\u0627\u0645.  </li> </ul>"},{"location":"languages/ar/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>\u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645: \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629\u060c \u0627\u0644\u062a\u0641\u0648\u064a\u0636\u060c \u0645\u0631\u0634\u062d\u0627\u062a \u0627\u0644\u0623\u0645\u0627\u0646.  </li> <li>JWT: \u0625\u0646\u0634\u0627\u0621 \u0648\u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 tokens\u060c \u0627\u0633\u062a\u062e\u062f\u0627\u0645 <code>JwtAuthenticationFilter</code>.  </li> <li>OAuth2: \u062a\u0647\u064a\u0626\u0629 Resource Server\u060c \u0627\u0644\u062a\u0643\u0627\u0645\u0644 \u0645\u0639 \u0645\u0632\u0648\u062f (\u0645\u062b\u0644 Google).  </li> <li>\u0645\u062b\u0627\u0644: \u062d\u0645\u0627\u064a\u0629 endpoints \u0627\u0644\u0645\u0647\u0627\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 JWT \u0648 roles (<code>ADMIN</code>, <code>USER</code>).  </li> </ul>"},{"location":"languages/ar/phase4/#_1","title":"\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u0648\u062d\u062f\u064a\u0629 \u0648\u0627\u0644\u062a\u0643\u0627\u0645\u0644\u064a\u0629","text":"<ul> <li>Unit tests: JUnit 5\u060c Mockito (<code>@Mock</code>, <code>@InjectMocks</code>)\u060c \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u0645\u0646\u0637\u0642 \u0627\u0644\u062a\u062c\u0627\u0631\u064a.  </li> <li>Integration tests: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, \u0642\u0627\u0639\u062f\u0629 \u0628\u064a\u0627\u0646\u0627\u062a H2 \u0644\u0644\u0627\u062e\u062a\u0628\u0627\u0631.  </li> <li>Testcontainers: \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 PostgreSQL \u0641\u064a \u062d\u0627\u0648\u064a\u0627\u062a Docker.  </li> <li>\u0645\u062b\u0627\u0644: \u0627\u062e\u062a\u0628\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0648 endpoints \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0645\u0647\u0627\u0645.  </li> </ul>"},{"location":"languages/ar/phase4/#restful-apis-swagger","title":"RESTful APIs \u0648\u062a\u0648\u062b\u064a\u0642 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Swagger","text":"<ul> <li>REST: \u0637\u0631\u0642 HTTP\u060c \u0623\u0643\u0648\u0627\u062f \u0627\u0644\u062d\u0627\u0644\u0629\u060c \u0645\u0628\u0627\u062f\u0626 RESTful.  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>.  </li> <li>Swagger: \u062a\u0647\u064a\u0626\u0629 springdoc-openapi\u060c \u0627\u0644\u062a\u0639\u0644\u064a\u0642 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 <code>@Operation</code>.  </li> <li>\u0645\u062b\u0627\u0644: \u062a\u0648\u062b\u064a\u0642 endpoints \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0645\u0647\u0627\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Swagger UI.  </li> </ul>"},{"location":"languages/ar/phase4/#graphql","title":"\u0645\u0642\u062f\u0645\u0629 \u0625\u0644\u0649 GraphQL","text":"<ul> <li>\u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645: Queries\u060c mutations\u060c schema.  </li> <li>Spring Boot \u0645\u0639 GraphQL: \u0627\u0644\u0625\u0639\u062f\u0627\u062f \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 spring-boot-starter-graphql.  </li> <li>\u0645\u062b\u0627\u0644: \u0625\u0646\u0634\u0627\u0621 query GraphQL \u0644\u0633\u0631\u062f \u0627\u0644\u0645\u0647\u0627\u0645 \u062d\u0633\u0628 \u0627\u0644\u062d\u0627\u0644\u0629.  </li> </ul>"},{"location":"languages/ar/phase4/#_2","title":"\u0627\u0644\u062a\u0643\u0627\u0645\u0644 \u0627\u0644\u0623\u0645\u0627\u0645\u064a \u0627\u0644\u0623\u0633\u0627\u0633\u064a","text":"<ul> <li>Thymeleaf: \u0642\u0648\u0627\u0644\u0628 \u0644\u0639\u0631\u0636 \u0635\u0641\u062d\u0627\u062a HTML \u0645\u0639 Spring Boot.  </li> <li>\u0645\u062b\u0627\u0644: \u0625\u0646\u0634\u0627\u0621 \u0648\u0627\u062c\u0647\u0629 \u0648\u064a\u0628 \u0628\u0633\u064a\u0637\u0629 \u0644\u0639\u0631\u0636 \u0648\u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0645\u0647\u0627\u0645.  </li> </ul>"},{"location":"languages/ar/phase4/#maven-gradle","title":"\u0623\u062f\u0648\u0627\u062a \u0627\u0644\u0628\u0646\u0627\u0621: Maven \u0648 Gradle","text":"<ul> <li>Maven: \u0647\u064a\u0643\u0644\u064a\u0629 <code>pom.xml</code>\u060c \u0627\u0644\u062a\u0628\u0639\u064a\u0627\u062a\u060c \u0627\u0644\u0625\u0636\u0627\u0641\u0627\u062a.  </li> <li>Gradle: \u0645\u0644\u0641 <code>build.gradle</code>\u060c \u0627\u0644\u0645\u0647\u0627\u0645\u060c \u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u062a\u0628\u0639\u064a\u0627\u062a.  </li> <li>\u0645\u062b\u0627\u0644: \u062a\u0647\u064a\u0626\u0629 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0645\u0647\u0627\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Maven \u0648 Gradle.  </li> </ul>"},{"location":"languages/ar/phase4/#_3","title":"\u0646\u0634\u0631 \u0627\u0644\u0645\u0634\u0631\u0648\u0639","text":"<ul> <li>\u0627\u0644\u0645\u0646\u0635\u0627\u062a: Railway\u060c Heroku\u060c AWS (Elastic Beanstalk).  </li> <li>\u0627\u0644\u062e\u0637\u0648\u0627\u062a: \u0627\u0644\u062a\u0639\u0628\u0626\u0629 \u0643\u0640 JAR\u060c \u062a\u0647\u064a\u0626\u0629 CI/CD \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 GitHub Actions.  </li> <li>\u0645\u062b\u0627\u0644: \u0646\u0634\u0631 \u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0645\u0647\u0627\u0645 \u0639\u0644\u0649 Railway \u0645\u0639 PostgreSQL.  </li> </ul>"},{"location":"languages/ar/phase4/#_4","title":"\u0627\u0644\u0645\u0634\u0631\u0648\u0639 \u0627\u0644\u0646\u0647\u0627\u0626\u064a","text":"<p>\u0646\u0638\u0627\u0645 \u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u0645\u0647\u0627\u0645 - \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a: \u062c\u062f\u0627\u0648\u0644 <code>Task</code> (\u0627\u0644\u0639\u0646\u0648\u0627\u0646\u060c \u0627\u0644\u0648\u0635\u0641\u060c \u0627\u0644\u062d\u0627\u0644\u0629) \u0648 <code>User</code> (\u0639\u0644\u0627\u0642\u0629 1:N). - Java: API REST \u0645\u0639 Spring Boot\u060c Spring Data JPA \u0644\u0640 CRUD. - \u0627\u0644\u0623\u0645\u0627\u0646: \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 JWT\u060c roles (<code>ADMIN</code>, <code>USER</code>). - \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a: \u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0648\u062d\u062f\u064a\u0629 (\u0627\u0644\u062e\u062f\u0645\u0627\u062a) \u0648\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u062a\u0643\u0627\u0645\u0644\u064a\u0629 (endpoints \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Testcontainers). - \u0627\u0644\u062a\u0648\u062b\u064a\u0642: Swagger UI \u0645\u0639 \u0648\u0635\u0641 endpoints. - \u0627\u062e\u062a\u064a\u0627\u0631\u064a: \u0625\u0636\u0627\u0641\u0629 query GraphQL \u0644\u0633\u0631\u062f \u0627\u0644\u0645\u0647\u0627\u0645 \u0648\u0648\u0627\u062c\u0647\u0629 Thymeleaf \u0644\u0644\u062a\u0641\u0627\u0639\u0644. - Git: commit \u0644\u0643\u0644 \u0645\u064a\u0632\u0629 (\u0645\u062b\u0627\u0644: <code>feature/rest-api</code>, <code>feature/security</code>). - \u0627\u0644\u0646\u0634\u0631: \u0639\u0644\u0649 GitHub \u0645\u0639 README (\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u060c endpoints\u060c \u0627\u0644\u0646\u0634\u0631).  </p>"},{"location":"languages/ar/phase4/#_5","title":"\u0627\u0644\u0645\u0648\u0627\u0631\u062f","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/ar/phase5/","title":"\u0627\u0644\u0645\u0631\u062d\u0644\u0629 5 \u2013 \u0627\u0644\u0647\u0646\u062f\u0633\u0629 \u0627\u0644\u0645\u0639\u0645\u0627\u0631\u064a\u0629 \u0648\u0627\u0644\u062a\u0632\u0627\u0645\u0646 (2-3 \u0623\u0634\u0647\u0631)","text":""},{"location":"languages/ar/phase5/#clean-code-solid","title":"Clean Code \u0648\u0645\u0628\u0627\u062f\u0626 SOLID","text":"<ul> <li>Clean Code: \u062a\u0633\u0645\u064a\u0629 \u0648\u0627\u0636\u062d\u0629\u060c \u062f\u0648\u0627\u0644 \u0642\u0635\u064a\u0631\u0629\u060c \u062a\u0639\u0644\u064a\u0642\u0627\u062a \u0645\u0641\u064a\u062f\u0629\u060c \u062a\u0646\u0633\u064a\u0642 \u0645\u062a\u0633\u0642.  </li> <li>SOLID:  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>\u0645\u062b\u0627\u0644: \u0625\u0639\u0627\u062f\u0629 \u0647\u064a\u0643\u0644\u0629 \u062e\u062f\u0645\u0629 \u0641\u064a \u0645\u062f\u064a\u0631 \u0627\u0644\u0645\u0647\u0627\u0645 \u0644\u062a\u062a\u0628\u0639 \u0645\u0628\u0627\u062f\u0626 SOLID.  </p>"},{"location":"languages/ar/phase5/#_1","title":"\u0623\u0646\u0645\u0627\u0637 \u0627\u0644\u062a\u0635\u0645\u064a\u0645","text":"<ul> <li>\u0627\u0644\u0623\u0646\u0645\u0627\u0637: Factory (\u0625\u0646\u0634\u0627\u0621)\u060c Singleton (\u0645\u062b\u064a\u0644 \u0648\u0627\u062d\u062f)\u060c Builder (\u0628\u0646\u0627\u0621 \u0627\u0644\u0643\u0627\u0626\u0646\u0627\u062a)\u060c Strategy (\u0627\u0644\u0633\u0644\u0648\u0643)\u060c Observer (\u0627\u0644\u0623\u062d\u062f\u0627\u062b).  </li> <li>\u0627\u0644\u062a\u0637\u0628\u064a\u0642: \u0627\u062e\u062a\u064a\u0627\u0631 \u0623\u0646\u0645\u0627\u0637 \u0645\u0646\u0627\u0633\u0628\u0629 \u0644\u0633\u064a\u0627\u0642 \u0627\u0644\u0645\u0634\u0631\u0648\u0639.  </li> </ul> <p>\u0645\u062b\u0627\u0644: \u0627\u0633\u062a\u062e\u062f\u0627\u0645 Strategy \u0644\u062e\u0648\u0627\u0631\u0632\u0645\u064a\u0627\u062a \u0645\u062e\u062a\u0644\u0641\u0629 \u0644\u062a\u062d\u062f\u064a\u062f \u0623\u0648\u0644\u0648\u064a\u0627\u062a \u0627\u0644\u0645\u0647\u0627\u0645.  </p>"},{"location":"languages/ar/phase5/#_2","title":"\u0627\u0644\u062e\u064a\u0648\u0637 \u0648\u0627\u0644\u062a\u0632\u0627\u0645\u0646","text":"<ul> <li>\u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645: Thread, Runnable, ExecutorService, ForkJoinPool.  </li> <li>\u0627\u0644\u062a\u0642\u0646\u064a\u0627\u062a: \u0625\u0646\u0634\u0627\u0621 \u0648\u0625\u062f\u0627\u0631\u0629 \u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0627\u0644\u062e\u064a\u0648\u0637\u060c \u0627\u0644\u0645\u0647\u0627\u0645 \u063a\u064a\u0631 \u0627\u0644\u0645\u062a\u0632\u0627\u0645\u0646\u0629.  </li> </ul> <p>\u0645\u062b\u0627\u0644: \u0645\u0639\u0627\u0644\u062c\u0629 \u062a\u0642\u0627\u0631\u064a\u0631 \u0627\u0644\u0645\u0647\u0627\u0645 \u0628\u0627\u0644\u062a\u0648\u0627\u0632\u064a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 ExecutorService.  </p>"},{"location":"languages/ar/phase5/#_3","title":"\u0627\u0644\u062a\u0632\u0627\u0645\u0646 \u0648\u0645\u0634\u0627\u0643\u0644 \u0627\u0644\u062a\u0632\u0627\u0645\u0646","text":"<ul> <li>\u0627\u0644\u0622\u0644\u064a\u0627\u062a: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>.  </li> <li>\u0627\u0644\u0645\u0634\u0627\u0643\u0644: Deadlock, race condition, starvation.  </li> </ul> <p>\u0645\u062b\u0627\u0644: \u062a\u0646\u0641\u064a\u0630 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u0622\u0645\u0646 \u0625\u0644\u0649 \u0642\u0627\u0626\u0645\u0629 \u0645\u0647\u0627\u0645 \u0645\u0634\u062a\u0631\u0643\u0629.  </p>"},{"location":"languages/ar/phase5/#_4","title":"\u0645\u0642\u062f\u0645\u0629 \u0625\u0644\u0649 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0642\u064a\u0642\u0629","text":"<ul> <li>\u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645: \u0647\u0646\u062f\u0633\u0629 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0642\u064a\u0642\u0629\u060c \u0627\u0644\u062a\u0648\u0627\u0635\u0644 \u0639\u0628\u0631 REST\u060c \u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062e\u062f\u0645\u0627\u062a.  </li> <li>\u0627\u0644\u0623\u062f\u0648\u0627\u062a: Spring Cloud (\u0645\u062b\u0644 Eureka \u0644\u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062e\u062f\u0645\u0627\u062a).  </li> </ul> <p>\u0645\u062b\u0627\u0644: \u062a\u0642\u0633\u064a\u0645 \u0645\u062f\u064a\u0631 \u0627\u0644\u0645\u0647\u0627\u0645 \u0625\u0644\u0649 \u062e\u062f\u0645\u0627\u062a \u062f\u0642\u064a\u0642\u0629 (\u0627\u0644\u0645\u0647\u0627\u0645 \u0648\u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646).  </p>"},{"location":"languages/ar/phase5/#_5","title":"\u0623\u0633\u0627\u0633\u064a\u0627\u062a \u0642\u0648\u0627\u0626\u0645 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 (\u0627\u062e\u062a\u064a\u0627\u0631\u064a)","text":"<ul> <li>\u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645: Publisher/subscriber\u060c \u0627\u0644\u0642\u0648\u0627\u0626\u0645\u060c \u0627\u0644\u0645\u0648\u0627\u0636\u064a\u0639.  </li> <li>RabbitMQ: \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u060c \u0625\u0631\u0633\u0627\u0644 \u0648\u0627\u0633\u062a\u0647\u0644\u0627\u0643 \u0627\u0644\u0631\u0633\u0627\u0626\u0644.  </li> </ul> <p>\u0645\u062b\u0627\u0644: \u0625\u062e\u0637\u0627\u0631 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0628\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0627\u0644\u0645\u0647\u0627\u0645 \u0639\u0628\u0631 RabbitMQ.  </p>"},{"location":"languages/ar/phase5/#_6","title":"\u062a\u062d\u0633\u064a\u0646 \u0627\u0644\u0623\u062f\u0627\u0621","text":"<ul> <li>Caching: Spring Cache \u0645\u0639 Redis \u0644\u062a\u0642\u0644\u064a\u0644 \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a.  </li> <li>JVM Tuning: \u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645 \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0629 (heap, garbage collection).  </li> </ul> <p>\u0645\u062b\u0627\u0644: \u062a\u0646\u0641\u064a\u0630 \u0627\u0644\u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0645\u0624\u0642\u062a \u0644\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u0645\u062a\u0643\u0631\u0631\u0629 \u0641\u064a \u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0647\u0627\u0645.  </p>"},{"location":"languages/ar/phase5/#devopscloud-docker-cicd","title":"\u0645\u0642\u062f\u0645\u0629 \u0625\u0644\u0649 DevOps/Cloud: Docker \u0648 CI/CD","text":"<ul> <li>Docker: \u0627\u0644\u062d\u0627\u0648\u064a\u0627\u062a\u060c \u0627\u0644\u0635\u0648\u0631\u060c Dockerfile\u060c Docker Compose.  </li> <li>CI/CD: \u062a\u0647\u064a\u0626\u0629 \u0627\u0644\u0623\u0646\u0627\u0628\u064a\u0628 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 GitHub Actions \u0644\u0644\u0628\u0646\u0627\u0621 \u0648\u0627\u0644\u0646\u0634\u0631.  </li> </ul> <p>\u0645\u062b\u0627\u0644: \u0625\u0646\u0634\u0627\u0621 Dockerfile \u0644\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0645\u0647\u0627\u0645 \u0648\u0627\u0644\u0646\u0634\u0631 \u0639\u0628\u0631 GitHub Actions.  </p>"},{"location":"languages/ar/phase5/#_7","title":"\u0627\u0644\u0642\u0627\u0628\u0644\u064a\u0629 \u0644\u0644\u0645\u0631\u0627\u0642\u0628\u0629","text":"<ul> <li>\u0627\u0644\u0623\u062f\u0648\u0627\u062a: Prometheus (\u0627\u0644\u0645\u0642\u0627\u064a\u064a\u0633)\u060c Grafana (\u0627\u0644\u062a\u0635\u0648\u0631)\u060c ELK Stack (\u0627\u0644\u0633\u062c\u0644\u0627\u062a).  </li> <li>\u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645: \u0645\u0631\u0627\u0642\u0628\u0629 \u0627\u0644\u0623\u062f\u0627\u0621\u060c \u0627\u0644\u0633\u062c\u0644\u0627\u062a \u0627\u0644\u0645\u0631\u0643\u0632\u064a\u0629\u060c \u0627\u0644\u062a\u0646\u0628\u064a\u0647\u0627\u062a.  </li> </ul> <p>\u0645\u062b\u0627\u0644: \u0645\u0631\u0627\u0642\u0628\u0629 \u0648\u0642\u062a \u0627\u0633\u062a\u062c\u0627\u0628\u0629 API \u0644\u0644\u0645\u0647\u0627\u0645 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Prometheus \u0648 Grafana.  </p>"},{"location":"languages/ar/phase5/#owasp-top-ten","title":"\u0627\u0644\u0623\u0645\u0627\u0646: OWASP Top Ten","text":"<ul> <li>\u0627\u0644\u0645\u0641\u0627\u0647\u064a\u0645: \u0627\u0644\u062d\u0642\u0646\u060c \u0641\u0634\u0644 \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629\u060c \u062a\u0639\u0631\u064a\u0636 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0633\u0629.  </li> <li>\u0627\u0644\u0645\u0645\u0627\u0631\u0633\u0627\u062a: \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0645\u062f\u062e\u0644\u0627\u062a\u060c \u0627\u0644\u062a\u0646\u0638\u064a\u0641\u060c \u0627\u0644\u062a\u0647\u064a\u0626\u0629 \u0627\u0644\u0622\u0645\u0646\u0629.  </li> </ul> <p>\u0645\u062b\u0627\u0644: \u062d\u0645\u0627\u064a\u0629 API \u0627\u0644\u0645\u0647\u0627\u0645 \u0645\u0646 \u0627\u0644\u062d\u0642\u0646 SQL \u0648 XSS.  </p>"},{"location":"languages/ar/phase5/#_8","title":"\u0627\u0644\u0645\u0634\u0631\u0648\u0639 \u0627\u0644\u0646\u0647\u0627\u0626\u064a","text":"<p>\u0646\u0638\u0627\u0645 \u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u0645\u0647\u0627\u0645 \u0627\u0644\u0645\u062a\u0642\u062f\u0645 - \u0627\u0644\u0648\u0627\u062c\u0647\u0629 \u0627\u0644\u062e\u0644\u0641\u064a\u0629: \u062a\u062d\u0633\u064a\u0646 API \u0627\u0644\u0645\u0647\u0627\u0645 (\u0627\u0644\u0645\u0631\u062d\u0644\u0629 4) \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0642\u064a\u0642\u0629 (\u0627\u0644\u0645\u0647\u0627\u0645 \u0648\u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646). - \u0627\u0644\u0647\u0646\u062f\u0633\u0629 \u0627\u0644\u0645\u0639\u0645\u0627\u0631\u064a\u0629: \u0625\u0639\u0627\u062f\u0629 \u0647\u064a\u0643\u0644\u0629 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Clean Code\u060c SOLID\u060c \u0648 design patterns (\u0645\u062b\u0644 Strategy). - \u0627\u0644\u062a\u0632\u0627\u0645\u0646: \u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u062a\u0642\u0627\u0631\u064a\u0631 \u0628\u0627\u0644\u062a\u0648\u0627\u0632\u064a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 ExecutorService. - \u0627\u062e\u062a\u064a\u0627\u0631\u064a: \u0625\u0636\u0627\u0641\u0629 \u062a\u0648\u0627\u0635\u0644 \u0628\u064a\u0646 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0642\u064a\u0642\u0629 \u0639\u0628\u0631 RabbitMQ \u0648\u0627\u0644\u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0645\u0624\u0642\u062a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Redis \u0644\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u0645\u062a\u0643\u0631\u0631\u0629. - DevOps: \u0627\u0644\u062a\u0639\u0628\u0626\u0629 \u0641\u064a Docker\u060c \u062a\u0647\u064a\u0626\u0629 CI/CD \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 GitHub Actions. - \u0627\u0644\u0642\u0627\u0628\u0644\u064a\u0629 \u0644\u0644\u0645\u0631\u0627\u0642\u0628\u0629: \u0625\u0636\u0627\u0641\u0629 Prometheus \u0648 Grafana \u0644\u0644\u0645\u0642\u0627\u064a\u064a\u0633. - \u0627\u0644\u0623\u0645\u0627\u0646: \u062a\u0646\u0641\u064a\u0630 \u0627\u0644\u062d\u0645\u0627\u064a\u0629 \u0636\u062f OWASP Top Ten. - Git: commit \u0644\u0643\u0644 \u0645\u064a\u0632\u0629 (\u0645\u062b\u0627\u0644: <code>feature/microservices</code>, <code>feature/concurrency</code>). - \u0627\u0644\u0646\u0634\u0631: \u0639\u0644\u0649 GitHub \u0645\u0639 README \u0645\u0641\u0635\u0644 (\u0627\u0644\u0625\u0639\u062f\u0627\u062f\u060c \u0627\u0644\u0647\u0646\u062f\u0633\u0629 \u0627\u0644\u0645\u0639\u0645\u0627\u0631\u064a\u0629\u060c \u0627\u0644\u0646\u0634\u0631).  </p>"},{"location":"languages/ar/phase5/#_9","title":"\u0627\u0644\u0645\u0648\u0627\u0631\u062f","text":"<ul> <li>The Pragmatic Programmer (\u0643\u062a\u0627\u0628)  </li> <li>Effective Java (\u0643\u062a\u0627\u0628)  </li> <li>Java Concurrency in Practice (\u0643\u062a\u0627\u0628)  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/ar/phase6/","title":"\u0627\u0644\u0645\u0631\u062d\u0644\u0629 6 \u2013 \u0627\u0644\u0645\u0634\u0627\u0631\u064a\u0639 \u0627\u0644\u0646\u0647\u0627\u0626\u064a\u0629 (\u0645\u0633\u062a\u0645\u0631\u0629)","text":""},{"location":"languages/ar/phase6/#1-crud","title":"\u0627\u0644\u0645\u0634\u0631\u0648\u0639 1: CRUD \u0643\u0627\u0645\u0644 \u0645\u0639 \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629","text":"<ul> <li>\u0627\u0644\u0647\u062f\u0641: \u0628\u0646\u0627\u0621 API RESTful \u0642\u0648\u064a\u0629 \u0645\u0639 \u0645\u0635\u0627\u062f\u0642\u0629 \u0622\u0645\u0646\u0629 \u0648\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a.  </li> <li>\u0627\u0644\u062a\u0642\u0646\u064a\u0627\u062a: Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers.  </li> <li>\u0627\u0644\u0645\u064a\u0632\u0627\u062a: CRUD \u0644\u0644\u0643\u064a\u0627\u0646\u0627\u062a (\u0645\u062b\u0644 \u0627\u0644\u0645\u0647\u0627\u0645\u060c \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646)\u060c \u0627\u0644\u0645\u0635\u0627\u062f\u0642\u0629 \u0645\u0639 roles (ADMIN, USER)\u060c \u0627\u0644\u062a\u0648\u062b\u064a\u0642 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Swagger.  </li> <li>\u0627\u062e\u062a\u064a\u0627\u0631\u064a: \u0625\u0636\u0627\u0641\u0629 \u0648\u0627\u062c\u0647\u0629 Thymeleaf \u0644\u0639\u0631\u0636/\u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u0645\u0647\u0627\u0645.  </li> <li>\u0645\u062b\u0627\u0644: API \u0644\u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u0645\u0634\u0627\u0631\u064a\u0639 (\u0627\u0644\u0643\u064a\u0627\u0646\u0627\u062a: <code>Project</code>, <code>Task</code>, <code>User</code>) \u0645\u0639 endpoints \u0645\u062d\u0645\u064a\u0629.  </li> </ul>"},{"location":"languages/ar/phase6/#2","title":"\u0627\u0644\u0645\u0634\u0631\u0648\u0639 2: \u0631\u0641\u0639 \u0627\u0644\u0645\u0644\u0641\u0627\u062a","text":"<ul> <li>\u0627\u0644\u0647\u062f\u0641: \u0625\u0636\u0627\u0641\u0629 \u0648\u0638\u064a\u0641\u0629 \u0631\u0641\u0639 \u0627\u0644\u0645\u0644\u0641\u0627\u062a \u0625\u0644\u0649 API \u0627\u0644\u0645\u0634\u0631\u0648\u0639 1.  </li> <li>\u0627\u0644\u062a\u0642\u0646\u064a\u0627\u062a: Spring Boot (<code>MultipartFile</code>), Amazon S3 \u0623\u0648 \u0627\u0644\u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0645\u062d\u0644\u064a\u060c \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0645\u0644\u0641\u0627\u062a.  </li> <li>\u0627\u0644\u0645\u064a\u0632\u0627\u062a: \u0631\u0641\u0639 \u0627\u0644\u0635\u0648\u0631/\u0627\u0644\u0645\u0633\u062a\u0646\u062f\u0627\u062a \u0627\u0644\u0645\u0631\u062a\u0628\u0637\u0629 \u0628\u0627\u0644\u0645\u0647\u0627\u0645\u060c \u0627\u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0627\u0644\u0646\u0648\u0639/\u0627\u0644\u062d\u062c\u0645.  </li> <li>\u0645\u062b\u0627\u0644: \u0627\u0644\u0633\u0645\u0627\u062d \u0628\u0631\u0641\u0639 \u0627\u0644\u0645\u0631\u0641\u0642\u0627\u062a (\u0645\u062b\u0644 PDF, PNG) \u0644\u0644\u0645\u0647\u0627\u0645 \u0641\u064a API.  </li> </ul>"},{"location":"languages/ar/phase6/#3","title":"\u0627\u0644\u0645\u0634\u0631\u0648\u0639 3: \u0627\u0644\u0646\u0634\u0631 \u0627\u0644\u0633\u062d\u0627\u0628\u064a","text":"<ul> <li>\u0627\u0644\u0647\u062f\u0641: \u0646\u0634\u0631 API \u0639\u0644\u0649 \u0645\u0646\u0635\u0629 \u0633\u062d\u0627\u0628\u064a\u0629 \u0645\u0639 CI/CD.  </li> <li>\u0627\u0644\u062a\u0642\u0646\u064a\u0627\u062a: Railway, Heroku, \u0623\u0648 AWS (Elastic Beanstalk), GitHub Actions, Docker.  </li> <li>\u0627\u0644\u0645\u064a\u0632\u0627\u062a: \u0627\u0644\u062a\u0639\u0628\u0626\u0629 \u0643\u0640 JAR/Docker\u060c \u062a\u0647\u064a\u0626\u0629 \u0645\u062a\u063a\u064a\u0631\u0627\u062a \u0627\u0644\u0628\u064a\u0626\u0629\u060c \u0623\u062a\u0645\u062a\u0629 \u0627\u0644\u0646\u0634\u0631.  </li> <li>\u0627\u062e\u062a\u064a\u0627\u0631\u064a: \u062a\u0646\u0641\u064a\u0630 \u0627\u0644\u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0645\u0624\u0642\u062a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Redis \u0644\u062a\u062d\u0633\u064a\u0646 \u0627\u0644\u0627\u0633\u062a\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u0645\u062a\u0643\u0631\u0631\u0629.  </li> <li>\u0645\u062b\u0627\u0644: \u0646\u0634\u0631 API \u0627\u0644\u0645\u0634\u0631\u0648\u0639 \u0639\u0644\u0649 Railway \u0645\u0639 PostgreSQL \u0648 CI/CD.  </li> </ul>"},{"location":"languages/ar/phase6/#4","title":"\u0627\u0644\u0645\u0634\u0631\u0648\u0639 4: \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0642\u064a\u0642\u0629","text":"<ul> <li>\u0627\u0644\u0647\u062f\u0641: \u062a\u0642\u0633\u064a\u0645 API \u0627\u0644\u0645\u0634\u0631\u0648\u0639 1 \u0625\u0644\u0649 \u062e\u062f\u0645\u0627\u062a \u062f\u0642\u064a\u0642\u0629 \u0645\u0646\u0633\u0642\u0629.  </li> <li>\u0627\u0644\u062a\u0642\u0646\u064a\u0627\u062a: Spring Cloud (Eureka, Gateway), Docker Compose, REST \u0644\u0644\u062a\u0648\u0627\u0635\u0644.  </li> <li>\u0627\u0644\u0645\u064a\u0632\u0627\u062a: \u062e\u062f\u0645\u0627\u062a \u062f\u0642\u064a\u0642\u0629 \u0644\u0640 <code>Tasks</code> \u0648 <code>Users</code>\u060c \u0645\u0639 \u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u062e\u062f\u0645\u0627\u062a.  </li> <li>\u0627\u062e\u062a\u064a\u0627\u0631\u064a: \u0627\u0633\u062a\u062e\u062f\u0627\u0645 RabbitMQ \u0644\u0644\u062a\u0648\u0627\u0635\u0644 \u063a\u064a\u0631 \u0627\u0644\u0645\u062a\u0632\u0627\u0645\u0646 \u0628\u064a\u0646 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062f\u0642\u064a\u0642\u0629.  </li> <li>\u0645\u062b\u0627\u0644: \u0641\u0635\u0644 \u0645\u0646\u0637\u0642 \u0627\u0644\u0645\u0647\u0627\u0645 \u0648\u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0625\u0644\u0649 \u062e\u062f\u0645\u062a\u064a\u0646\u060c \u0645\u0646\u0633\u0642\u062a\u064a\u0646 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Docker.  </li> </ul>"},{"location":"languages/ar/phase6/#5-api","title":"\u0627\u0644\u0645\u0634\u0631\u0648\u0639 5: \u0627\u0644\u062a\u0643\u0627\u0645\u0644 \u0645\u0639 API \u062e\u0627\u0631\u062c\u064a\u0629","text":"<ul> <li>\u0627\u0644\u0647\u062f\u0641: \u0627\u0633\u062a\u0647\u0644\u0627\u0643 API \u062e\u0627\u0631\u062c\u064a\u0629 \u0644\u062a\u0639\u0632\u064a\u0632 \u0627\u0644\u0648\u0638\u0627\u0626\u0641.  </li> <li>\u0627\u0644\u062a\u0642\u0646\u064a\u0627\u062a: Spring RestTemplate \u0623\u0648 WebClient\u060c \u0645\u0635\u0627\u062f\u0642\u0629 API (\u0645\u062b\u0644 OAuth2).  </li> <li>\u0627\u0644\u0645\u064a\u0632\u0627\u062a: \u0627\u0644\u062a\u0643\u0627\u0645\u0644 \u0645\u0639 API \u0639\u0627\u0645\u0629 (\u0645\u062b\u0644 \u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631\u0627\u062a \u0639\u0628\u0631 \u0627\u0644\u0628\u0631\u064a\u062f \u0627\u0644\u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 SendGrid).  </li> <li>\u0627\u062e\u062a\u064a\u0627\u0631\u064a: \u0625\u0636\u0627\u0641\u0629 query GraphQL \u0644\u0627\u0633\u062a\u0631\u062f\u0627\u062f \u0627\u0644\u0645\u0647\u0627\u0645/\u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0648\u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0648\u0635\u0641\u064a\u0629 \u0641\u064a MongoDB.  </li> <li>\u0645\u062b\u0627\u0644: \u0625\u0636\u0627\u0641\u0629 \u0625\u0634\u0639\u0627\u0631\u0627\u062a \u0628\u0631\u064a\u062f \u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a \u0639\u0646\u062f \u0627\u0643\u062a\u0645\u0627\u0644 \u0627\u0644\u0645\u0647\u0627\u0645.  </li> </ul>"},{"location":"languages/ar/phase6/#_1","title":"\u0623\u0641\u0636\u0644 \u0645\u0645\u0627\u0631\u0633\u0627\u062a \u0627\u0644\u0645\u062d\u0641\u0638\u0629","text":"<ul> <li>Git: commit \u0644\u0643\u0644 \u0645\u064a\u0632\u0629 (\u0645\u062b\u0627\u0644: <code>feature/crud</code>, <code>feature/upload</code>)\u060c \u0641\u0631\u0648\u0639 \u0648\u0627\u0636\u062d\u0629.  </li> <li>\u0627\u0644\u062a\u0648\u062b\u064a\u0642: README \u064a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0627\u0644\u0648\u0635\u0641\u060c \u0627\u0644\u0625\u0639\u062f\u0627\u062f\u060c endpoints\u060c \u0627\u0644\u0646\u0634\u0631\u060c \u0648\u0644\u0642\u0637\u0627\u062a \u0627\u0644\u0634\u0627\u0634\u0629.  </li> <li>\u0627\u0644\u0646\u0634\u0631: \u0627\u0633\u062a\u0636\u0627\u0641\u0629 \u0639\u0644\u0649 GitHub \u0645\u0639 \u0631\u062e\u0635\u0629 \u0645\u0641\u062a\u0648\u062d\u0629 \u0627\u0644\u0645\u0635\u062f\u0631 (\u0645\u062b\u0644 MIT).  </li> </ul>"},{"location":"languages/ar/phase6/#_2","title":"\u0627\u0644\u0645\u0648\u0627\u0631\u062f","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/bn/phase1/","title":"\u09ab\u09c7\u099c \u09e7 \u2013 \u09ae\u09cc\u09b2\u09bf\u0995 \u09ac\u09bf\u09b7\u09af\u09bc \u098f\u09ac\u0982 \u0985\u09aa\u09b0\u09bf\u09b9\u09be\u09b0\u09cd\u09af \u099c\u09be\u09ad\u09be (\u09e8-\u09e9 \u09ae\u09be\u09b8)","text":""},{"location":"languages/bn/phase1/#_1","title":"\u09aa\u09cd\u09b0\u09cb\u0997\u09cd\u09b0\u09be\u09ae\u09bf\u0982 \u09b2\u099c\u09bf\u0995 \u098f\u09ac\u0982 \u0985\u09cd\u09af\u09be\u09b2\u0997\u09b0\u09bf\u09a6\u09ae","text":"<ul> <li>\u09b8\u09ae\u09b8\u09cd\u09af\u09be \u09ac\u09bf\u09ad\u09be\u099c\u09a8</li> <li>\u0985\u09a8\u09c1\u09b6\u09c0\u09b2\u09a8: \u0997\u09a1\u09bc, \u099c\u09cb\u09a1\u09bc/\u09ac\u09bf\u099c\u09cb\u09a1\u09bc, \u09b8\u09be\u099c\u09be\u09a8\u09cb</li> </ul>"},{"location":"languages/bn/phase1/#_2","title":"\u09aa\u09b0\u09bf\u09ac\u09c7\u09b6 \u09b8\u09c7\u099f\u0986\u09aa","text":"<ul> <li>JDK \u0987\u09a8\u09b8\u09cd\u099f\u09b2\u09c7\u09b6\u09a8</li> <li>IDE (IntelliJ \u09ac\u09be Eclipse)</li> <li>Basic debugging</li> </ul>"},{"location":"languages/bn/phase1/#_3","title":"\u099c\u09be\u09ad\u09be\u09b0 \u09ae\u09cc\u09b2\u09bf\u0995 \u09b8\u09bf\u09a8\u099f\u09cd\u09af\u09be\u0995\u09cd\u09b8","text":"<ul> <li>\u09aa\u09cd\u09b0\u09cb\u0997\u09cd\u09b0\u09be\u09ae\u09c7\u09b0 \u0997\u09a0\u09a8 (class, main)</li> <li>\u09a8\u09be\u09ae\u0995\u09b0\u09a3\u09c7\u09b0 \u09a8\u09bf\u09af\u09bc\u09ae</li> <li>\u09ae\u09a8\u09cd\u09a4\u09ac\u09cd\u09af</li> </ul>"},{"location":"languages/bn/phase1/#_4","title":"\u09a1\u09c7\u099f\u09be \u099f\u09be\u0987\u09aa \u098f\u09ac\u0982 \u09ad\u09c7\u09b0\u09bf\u09af\u09bc\u09c7\u09ac\u09b2","text":"<ul> <li>\u09aa\u09cd\u09b0\u09bf\u09ae\u09bf\u099f\u09bf\u09ad \u098f\u09ac\u0982 \u09a8\u09a8-\u09aa\u09cd\u09b0\u09bf\u09ae\u09bf\u099f\u09bf\u09ad \u099f\u09be\u0987\u09aa</li> <li>\u0998\u09cb\u09b7\u09a3\u09be, \u0987\u09a8\u09bf\u09b6\u09bf\u09af\u09bc\u09be\u09b2\u09be\u0987\u099c\u09c7\u09b6\u09a8, \u0995\u09a8\u09b8\u09cd\u099f\u09cd\u09af\u09be\u09a8\u09cd\u099f</li> <li>Casting \u098f\u09ac\u0982 \u09a4\u09c1\u09b2\u09a8\u09be (<code>==</code> vs <code>.equals()</code>)</li> </ul>"},{"location":"languages/bn/phase1/#_5","title":"\u0987\u09a8\u09aa\u09c1\u099f \u098f\u09ac\u0982 \u0986\u0989\u099f\u09aa\u09c1\u099f","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/bn/phase1/#_6","title":"\u0995\u09a8\u09cd\u099f\u09cd\u09b0\u09cb\u09b2 \u09b8\u09cd\u099f\u09cd\u09b0\u09be\u0995\u099a\u09be\u09b0","text":"<ul> <li>if, else if, else, switch</li> <li>\u09b2\u099c\u09bf\u0995\u09cd\u09af\u09be\u09b2 \u098f\u09ac\u0982 \u09b0\u09bf\u09b2\u09c7\u09b6\u09a8\u09be\u09b2 \u0985\u09aa\u09be\u09b0\u09c7\u099f\u09b0</li> </ul>"},{"location":"languages/bn/phase1/#_7","title":"\u09b2\u09c1\u09aa","text":"<ul> <li>for, while, do-while</li> <li>break, continue, \u09a8\u09c7\u09b8\u09cd\u099f\u09c7\u09a1 \u09b2\u09c1\u09aa</li> </ul>"},{"location":"languages/bn/phase1/#_8","title":"\u09ae\u09c7\u09a5\u09a1 \u098f\u09ac\u0982 \u09b8\u09cd\u0995\u09cb\u09aa","text":"<ul> <li>\u0998\u09cb\u09b7\u09a3\u09be, \u09aa\u09cd\u09af\u09be\u09b0\u09be\u09ae\u09bf\u099f\u09be\u09b0, return</li> <li>Overloading</li> <li>\u09b2\u09cb\u0995\u09be\u09b2 \u09ad\u09c7\u09b0\u09bf\u09af\u09bc\u09c7\u09ac\u09b2 \u098f\u09ac\u0982 \u0995\u09cd\u09b2\u09be\u09b8 \u0985\u09cd\u09af\u09be\u099f\u09cd\u09b0\u09bf\u09ac\u09bf\u0989\u099f</li> </ul>"},{"location":"languages/bn/phase1/#_9","title":"\u0985\u09cd\u09af\u09be\u09b0\u09c7","text":"<ul> <li>\u0998\u09cb\u09b7\u09a3\u09be, \u0987\u09a8\u09bf\u09b6\u09bf\u09af\u09bc\u09be\u09b2\u09be\u0987\u099c\u09c7\u09b6\u09a8, \u098f\u09ac\u0982 \u09ae\u09cd\u09af\u09be\u09a8\u09bf\u09aa\u09c1\u09b2\u09c7\u09b6\u09a8</li> <li>\u09b2\u09bf\u09a8\u09bf\u09af\u09bc\u09be\u09b0 \u09b8\u09be\u09b0\u09cd\u099a \u098f\u09ac\u0982 \u09ae\u09cd\u09af\u09be\u09a8\u09c1\u09af\u09bc\u09be\u09b2 \u09b8\u09b0\u09cd\u099f\u09bf\u0982</li> <li>Arrays.toString() \u09ab\u09b0 debugging</li> </ul>"},{"location":"languages/bn/phase1/#strings-stringbuilder","title":"Strings \u098f\u09ac\u0982 StringBuilder","text":"<ul> <li>\u09b8\u09be\u09a7\u09be\u09b0\u09a3 \u09ae\u09c7\u09a5\u09a1</li> <li>Immutability \u098f\u09ac\u0982 \u09aa\u09be\u09b0\u09ab\u09b0\u09ae\u09cd\u09af\u09be\u09a8\u09cd\u09b8</li> </ul>"},{"location":"languages/bn/phase1/#_10","title":"\u098f\u0995\u09cd\u09b8\u09c7\u09aa\u09b6\u09a8","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw \u098f\u09ac\u0982 throws</li> <li>\u0995\u09be\u09b8\u09cd\u099f\u09ae \u098f\u0995\u09cd\u09b8\u09c7\u09aa\u09b6\u09a8 \u09a4\u09c8\u09b0\u09bf (\u09af\u09c7\u09ae\u09a8, throw new MyException)</li> </ul>"},{"location":"languages/bn/phase1/#_11","title":"\u0985\u09aa\u09b0\u09bf\u09b9\u09be\u09b0\u09cd\u09af \u099f\u09c1\u09b2","text":"<ul> <li>Terminal: cd, ls, mkdir</li> <li>Git: init, add, commit, push, pull, branch, merge</li> <li>GitHub: \u09b0\u09bf\u09aa\u09cb\u099c\u09bf\u099f\u09b0\u09bf \u09a4\u09c8\u09b0\u09bf, pull requests, \u0995\u09cd\u09b2\u09cb\u09a8\u09bf\u0982</li> </ul>"},{"location":"languages/bn/phase1/#_12","title":"\u099a\u09c2\u09a1\u09bc\u09be\u09a8\u09cd\u09a4 \u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa","text":"<ul> <li>\u09b8\u09bf\u09ae\u09cd\u09aa\u09b2 \u0995\u09cd\u09af\u09be\u09b2\u0995\u09c1\u09b2\u09c7\u099f\u09b0 \u098f\u09ac\u0982 \u099f\u09be\u09b8\u09cd\u0995 \u09ae\u09cd\u09af\u09be\u09a8\u09c7\u099c\u09be\u09b0</li> <li>\u09aa\u09cd\u09b0\u09af\u09bc\u09cb\u099c\u09a8\u09c0\u09af\u09bc\u09a4\u09be:</li> <li>Git \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0</li> <li>GitHub-\u098f \u09aa\u09cd\u09b0\u0995\u09be\u09b6</li> <li>\u09ac\u09cd\u09af\u09be\u0996\u09cd\u09af\u09be\u09ae\u09c2\u09b2\u0995 README</li> </ul>"},{"location":"languages/bn/phase1/#_13","title":"\u09b0\u09bf\u09b8\u09cb\u09b0\u09cd\u09b8","text":"<ul> <li>MOOC from the University of Helsinki</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/bn/phase2/","title":"\u09ab\u09c7\u099c \u09e8 \u2013 \u0985\u09ac\u099c\u09c7\u0995\u09cd\u099f-\u0993\u09b0\u09bf\u09af\u09bc\u09c7\u09a8\u09cd\u099f\u09c7\u09a1 \u09aa\u09cd\u09b0\u09cb\u0997\u09cd\u09b0\u09be\u09ae\u09bf\u0982 (\u09e8-\u09e9 \u09ae\u09be\u09b8)","text":""},{"location":"languages/bn/phase2/#_1","title":"\u0995\u09cd\u09b2\u09be\u09b8, \u0985\u09ac\u099c\u09c7\u0995\u09cd\u099f, \u0985\u09cd\u09af\u09be\u099f\u09cd\u09b0\u09bf\u09ac\u09bf\u0989\u099f \u098f\u09ac\u0982 \u09ae\u09c7\u09a5\u09a1","text":"<ul> <li>\u0995\u09cd\u09b2\u09be\u09b8\u09c7\u09b0 \u0997\u09a0\u09a8</li> <li>\u0985\u09ac\u099c\u09c7\u0995\u09cd\u099f \u0987\u09a8\u09b8\u09cd\u099f\u09cd\u09af\u09be\u09a8\u09b6\u09bf\u09af\u09bc\u09c7\u09b6\u09a8</li> <li>this \u098f\u09b0 \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0</li> <li>\u09b8\u09b0\u09cd\u09ac\u09cb\u09a4\u09cd\u09a4\u09ae \u0985\u09a8\u09c1\u09b6\u09c0\u09b2\u09a8: \u09a8\u09be\u09ae\u0995\u09b0\u09a3, \u0995\u09cb\u09a1 \u09b8\u0982\u0997\u09a0\u09a8</li> </ul>"},{"location":"languages/bn/phase2/#_2","title":"\u098f\u09a8\u0995\u09cd\u09af\u09be\u09aa\u09b8\u09c1\u09b2\u09c7\u09b6\u09a8, \u0987\u09a8\u09b9\u09c7\u09b0\u09bf\u099f\u09c7\u09a8\u09cd\u09b8, \u09aa\u09b2\u09bf\u09ae\u09b0\u09ab\u09bf\u099c\u09ae \u098f\u09ac\u0982 \u0985\u09cd\u09af\u09be\u09ac\u09b8\u09cd\u099f\u09cd\u09b0\u09be\u0995\u09b6\u09a8","text":"<ul> <li>Encapsulation: private, getters/setters, \u09ad\u09cd\u09af\u09be\u09b2\u09bf\u09a1\u09c7\u09b6\u09a8</li> <li>Inheritance: extends, overriding (@Override)</li> <li>Polymorphism: \u09b8\u09be\u09ac\u099f\u09be\u0987\u09aa, method overloading</li> <li>Abstraction: \u09b8\u0982\u0995\u09cd\u09b7\u09bf\u09aa\u09cd\u09a4 \u09ac\u09bf\u09ac\u09b0\u09a3, \u0987\u09a8\u09cd\u099f\u09be\u09b0\u09ab\u09c7\u09b8 \u098f\u09ac\u0982 \u0985\u09cd\u09af\u09be\u09ac\u09b8\u09cd\u099f\u09cd\u09b0\u09be\u0995\u09cd\u099f \u0995\u09cd\u09b2\u09be\u09b8\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u09aa\u09cd\u09b0\u09b8\u09cd\u09a4\u09c1\u09a4\u09bf</li> </ul>"},{"location":"languages/bn/phase2/#_3","title":"\u0987\u09a8\u09cd\u099f\u09be\u09b0\u09ab\u09c7\u09b8 \u098f\u09ac\u0982 \u0985\u09cd\u09af\u09be\u09ac\u09b8\u09cd\u099f\u09cd\u09b0\u09be\u0995\u09cd\u099f \u0995\u09cd\u09b2\u09be\u09b8","text":"<ul> <li>Interfaces: implements, default methods</li> <li>Abstract classes: \u0985\u09cd\u09af\u09be\u09ac\u09b8\u09cd\u099f\u09cd\u09b0\u09be\u0995\u09cd\u099f \u098f\u09ac\u0982 \u0995\u0982\u0995\u09cd\u09b0\u09bf\u099f \u09ae\u09c7\u09a5\u09a1</li> <li>\u0987\u09a8\u09cd\u099f\u09be\u09b0\u09ab\u09c7\u09b8 \u098f\u09ac\u0982 \u0985\u09cd\u09af\u09be\u09ac\u09b8\u09cd\u099f\u09cd\u09b0\u09be\u0995\u09cd\u099f \u0995\u09cd\u09b2\u09be\u09b8\u09c7\u09b0 \u09ae\u09a7\u09cd\u09af\u09c7 \u09aa\u09be\u09b0\u09cd\u09a5\u0995\u09cd\u09af</li> </ul>"},{"location":"languages/bn/phase2/#_4","title":"\u0995\u09a8\u09b8\u09cd\u099f\u09cd\u09b0\u09be\u0995\u09cd\u099f\u09b0, \u0987\u09a8\u09bf\u09b6\u09bf\u09af\u09bc\u09be\u09b2\u09be\u0987\u099c\u09be\u09b0 \u098f\u09ac\u0982 \u09b8\u09cd\u099f\u09cd\u09af\u09be\u099f\u09bf\u0995 \u09ac\u09cd\u09b2\u0995","text":"<ul> <li>\u09a1\u09bf\u09ab\u09b2\u09cd\u099f \u098f\u09ac\u0982 \u09aa\u09cd\u09af\u09be\u09b0\u09be\u09ae\u09bf\u099f\u09be\u09b0\u09be\u0987\u099c\u09a1 \u0995\u09a8\u09b8\u09cd\u099f\u09cd\u09b0\u09be\u0995\u09cd\u099f\u09b0, this() \u09a6\u09bf\u09af\u09bc\u09c7 \u0995\u09b2</li> <li>\u0987\u09a8\u09bf\u09b6\u09bf\u09af\u09bc\u09be\u09b2\u09be\u0987\u099c\u09c7\u09b6\u09a8 \u09ac\u09cd\u09b2\u0995 ({}) \u098f\u09ac\u0982 \u09b8\u09cd\u099f\u09cd\u09af\u09be\u099f\u09bf\u0995 \u09ac\u09cd\u09b2\u0995 (static {})</li> </ul>"},{"location":"languages/bn/phase2/#_5","title":"\u0987\u09a8\u09bf\u0989\u09ae\u09be\u09b0\u09c7\u09b6\u09a8","text":"<ul> <li>enum \u09a4\u09c8\u09b0\u09bf \u098f\u09ac\u0982 \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0</li> <li>enum-\u098f \u09ae\u09c7\u09a5\u09a1 \u098f\u09ac\u0982 \u0985\u09cd\u09af\u09be\u099f\u09cd\u09b0\u09bf\u09ac\u09bf\u0989\u099f</li> </ul>"},{"location":"languages/bn/phase2/#_6","title":"\u09ae\u09cc\u09b2\u09bf\u0995 \u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8","text":"<ul> <li>ArrayList: \u09af\u09cb\u0997 \u0995\u09b0\u09be, \u0985\u09aa\u09b8\u09be\u09b0\u09a3, \u0987\u099f\u09be\u09b0\u09c7\u09b6\u09a8 (for, forEach, Iterator)</li> <li>HashMap: key-value, \u09b8\u09be\u09a7\u09be\u09b0\u09a3 \u0985\u09aa\u09be\u09b0\u09c7\u09b6\u09a8</li> <li>HashSet: \u09a1\u09c1\u09aa\u09cd\u09b2\u09bf\u0995\u09c7\u099f \u09a6\u09c2\u09b0\u09c0\u0995\u09b0\u09a3</li> <li>Queue \u098f\u09ac\u0982 Stack-\u098f\u09b0 \u09aa\u09b0\u09bf\u099a\u09bf\u09a4\u09bf (\u09af\u09c7\u09ae\u09a8, LinkedList \u0995\u09c7 queue/stack \u09b9\u09bf\u09b8\u09c7\u09ac\u09c7 \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0)</li> <li>Java Collections Framework-\u098f\u09b0 \u09aa\u09b0\u09bf\u099a\u09bf\u09a4\u09bf</li> </ul>"},{"location":"languages/bn/phase2/#_7","title":"\u09ae\u09cc\u09b2\u09bf\u0995 \u0985\u09cd\u09af\u09be\u09b2\u0997\u09b0\u09bf\u09a6\u09ae","text":"<ul> <li>\u09b2\u09bf\u09a8\u09bf\u09af\u09bc\u09be\u09b0 \u098f\u09ac\u0982 \u09ac\u09be\u0987\u09a8\u09be\u09b0\u09bf \u09b8\u09be\u09b0\u09cd\u099a</li> <li>Sorting: Bubble Sort, Collections.sort()</li> <li>Recursion: \u09a7\u09be\u09b0\u09a3\u09be \u098f\u09ac\u0982 \u09b8\u09b9\u099c \u0989\u09a6\u09be\u09b9\u09b0\u09a3 (\u09af\u09c7\u09ae\u09a8, \u09ab\u09cd\u09af\u09be\u0995\u09cd\u099f\u09b0\u09bf\u09af\u09bc\u09be\u09b2, \u09ab\u09bf\u09ac\u09cb\u09a8\u09be\u099a\u09bf)</li> <li>\u099c\u099f\u09bf\u09b2\u09a4\u09be\u09b0 \u09aa\u09b0\u09bf\u099a\u09bf\u09a4\u09bf (O(n), O(log n))</li> </ul>"},{"location":"languages/bn/phase2/#_8","title":"\u099c\u09c7\u09a8\u09c7\u09b0\u09bf\u0995\u09cd\u09b8","text":"<ul> <li>\u09b8\u09bf\u09a8\u099f\u09cd\u09af\u09be\u0995\u09cd\u09b8 (), \u099c\u09c7\u09a8\u09c7\u09b0\u09bf\u0995 \u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8, \u099c\u09c7\u09a8\u09c7\u09b0\u09bf\u0995 \u09ae\u09c7\u09a5\u09a1 <li>\u09ac\u09be\u0989\u09a8\u09cd\u09a1\u09b8 (extends, super)</li>"},{"location":"languages/bn/phase2/#stream-api","title":"Stream API (\u09aa\u09b0\u09bf\u099a\u09bf\u09a4\u09bf)","text":"<ul> <li>\u09ae\u09cc\u09b2\u09bf\u0995 \u0985\u09aa\u09be\u09b0\u09c7\u09b6\u09a8: filter, map, collect</li> <li>ArrayList \u09b8\u09b9 \u0989\u09a6\u09be\u09b9\u09b0\u09a3</li> </ul>"},{"location":"languages/bn/phase2/#_9","title":"\u0987\u0989\u09a8\u09bf\u099f \u099f\u09c7\u09b8\u09cd\u099f\u09bf\u0982 (\u09aa\u09b0\u09bf\u099a\u09bf\u09a4\u09bf)","text":"<ul> <li>JUnit-\u098f\u09b0 \u09ae\u09cc\u09b2\u09bf\u0995 \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0</li> <li>\u0995\u09cd\u09b2\u09be\u09b8 \u098f\u09ac\u0982 \u09ae\u09c7\u09a5\u09a1\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u099f\u09c7\u09b8\u09cd\u099f \u0995\u09c7\u09b8 \u09b2\u09c7\u0996\u09be</li> <li>TDD (Test-Driven Development)-\u098f\u09b0 \u09aa\u09b0\u09bf\u099a\u09bf\u09a4\u09bf</li> </ul>"},{"location":"languages/bn/phase2/#_10","title":"\u099a\u09c2\u09a1\u09bc\u09be\u09a8\u09cd\u09a4 \u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa","text":"<ul> <li>\u09b2\u09be\u0987\u09ac\u09cd\u09b0\u09c7\u09b0\u09bf \u09b8\u09bf\u09b8\u09cd\u099f\u09c7\u09ae</li> <li>\u0995\u09cd\u09b2\u09be\u09b8: Book, User, Library</li> <li>\u0987\u09a8\u09b9\u09c7\u09b0\u09bf\u099f\u09c7\u09a8\u09cd\u09b8: DigitalBook \u098f\u09ac\u0982 PhysicalBook</li> <li>\u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8: \u09ac\u0987\u09af\u09bc\u09c7\u09b0 \u099c\u09a8\u09cd\u09af ArrayList, \u098b\u09a3\u09c7\u09b0 \u099c\u09a8\u09cd\u09af HashMap</li> <li>Encapsulation: \u09a1\u09c7\u099f\u09be \u09ad\u09cd\u09af\u09be\u09b2\u09bf\u09a1\u09c7\u09b6\u09a8</li> <li>Git: \u09aa\u09cd\u09b0\u09a4\u09bf\u099f\u09bf \u09ab\u09bf\u099a\u09be\u09b0\u09c7\u09b0 \u099c\u09a8\u09cd\u09af commit (\u09af\u09c7\u09ae\u09a8, <code>feature/book-management</code>)</li> <li>GitHub-\u098f \u09aa\u09cd\u09b0\u0995\u09be\u09b6 \u09b8\u09b9 \u09ac\u09cd\u09af\u09be\u0996\u09cd\u09af\u09be\u09ae\u09c2\u09b2\u0995 README</li> </ul>"},{"location":"languages/bn/phase2/#_11","title":"\u0986\u09aa\u09a1\u09c7\u099f\u09c7\u09a1 \u09b0\u09bf\u09b8\u09cb\u09b0\u09cd\u09b8","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java (\u09ac\u0987)</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/bn/phase3/","title":"\u09ab\u09c7\u099c \u09e9 \u2013 \u09a1\u09c7\u099f\u09be \u09aa\u09be\u09b0\u09b8\u09bf\u09b8\u09cd\u099f\u09c7\u09a8\u09cd\u09b8 \u098f\u09ac\u0982 \u09b8\u09cd\u099f\u09cd\u09b0\u09bf\u09ae (\u09e8-\u09e9 \u09ae\u09be\u09b8)","text":""},{"location":"languages/bn/phase3/#sql","title":"\u09ae\u09cc\u09b2\u09bf\u0995 SQL","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Keys: \u09aa\u09cd\u09b0\u09be\u0987\u09ae\u09be\u09b0\u09bf \u098f\u09ac\u0982 \u09ab\u09b0\u09c7\u09a8 \u0995\u09c0.  </li> <li>Normalization: 1NF, 2NF, 3NF.  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u09aa\u09cd\u09b0\u09cb\u09a1\u09be\u0995\u09cd\u099f \u098f\u09ac\u0982 \u0995\u09cd\u09af\u09be\u099f\u09be\u0997\u09b0\u09bf\u09b0 \u099c\u09a8\u09cd\u09af \u099f\u09c7\u09ac\u09bf\u09b2 \u09a4\u09c8\u09b0\u09bf \u0995\u09b0\u09be\u0964  </li> </ul>"},{"location":"languages/bn/phase3/#jdbc-connection-pool","title":"JDBC \u098f\u09ac\u0982 Connection Pool","text":"<ul> <li>Classes: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>Connection Pool (HikariCP) \u098f\u09b0 \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0\u0964  </li> <li>\u09b8\u09b0\u09cd\u09ac\u09cb\u09a4\u09cd\u09a4\u09ae \u0985\u09a8\u09c1\u09b6\u09c0\u09b2\u09a8: <code>try-with-resources</code>, <code>SQLException</code> \u09b9\u09cd\u09af\u09be\u09a8\u09cd\u09a1\u09b2\u09bf\u0982\u0964  </li> </ul>"},{"location":"languages/bn/phase3/#hibernate-jpa","title":"Hibernate + JPA \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0\u09bf\u0995 \u09aa\u09cd\u09b0\u09af\u09bc\u09cb\u0997","text":"<ul> <li>Annotations: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>Configuration: <code>persistence.xml</code> \u09ac\u09be <code>application.properties</code>.  </li> <li>CRUD \u0985\u09aa\u09be\u09b0\u09c7\u09b6\u09a8 <code>EntityManager</code> \u09a6\u09bf\u09af\u09bc\u09c7\u0964  </li> <li>Flyway \u09ac\u09be Liquibase \u09a6\u09bf\u09af\u09bc\u09c7 \u09a1\u09be\u099f\u09be\u09ac\u09c7\u09b8 \u09ae\u09be\u0987\u0997\u09cd\u09b0\u09c7\u09b6\u09a8\u09c7\u09b0 \u09aa\u09b0\u09bf\u099a\u09bf\u09a4\u09bf\u0964</li> </ul>"},{"location":"languages/bn/phase3/#nosql","title":"NoSQL \u09a1\u09be\u099f\u09be\u09ac\u09c7\u09b8\u09c7\u09b0 \u09aa\u09b0\u09bf\u099a\u09bf\u09a4\u09bf","text":"<ul> <li>\u09a7\u09be\u09b0\u09a3\u09be: \u09a1\u0995\u09c1\u09ae\u09c7\u09a8\u09cd\u099f, \u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8, \u09b9\u09b0\u09bf\u099c\u09a8\u09cd\u099f\u09be\u09b2 \u09b8\u09cd\u0995\u09c7\u09b2\u09be\u09ac\u09bf\u09b2\u09bf\u099f\u09bf\u0964  </li> <li>MongoDB: \u09b8\u09c7\u099f\u0986\u09aa, MongoRepository \u09a6\u09bf\u09af\u09bc\u09c7 CRUD \u0985\u09aa\u09be\u09b0\u09c7\u09b6\u09a8\u0964  </li> <li>Spring Data MongoDB: Spring Boot \u098f\u09b0 \u09b8\u09be\u09a5\u09c7 \u0987\u09a8\u09cd\u099f\u09bf\u0997\u09cd\u09b0\u09c7\u09b6\u09a8\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: MongoDB-\u09a4\u09c7 \u09aa\u09cd\u09b0\u09cb\u09a1\u09be\u0995\u09cd\u099f\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u09b8\u09bf\u09b8\u09cd\u099f\u09c7\u09ae \u0985\u09cd\u09af\u09be\u0995\u09cd\u099f\u09bf\u09ad\u09bf\u099f\u09bf \u09b2\u0997 \u09b8\u0982\u09b0\u0995\u09cd\u09b7\u09a3\u0964</li> </ul>"},{"location":"languages/bn/phase3/#streams-lambda-expressions","title":"Streams \u098f\u09ac\u0982 Lambda Expressions","text":"<ul> <li>\u0985\u09aa\u09be\u09b0\u09c7\u09b6\u09a8: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u09a6\u09be\u09ae \u0985\u09a8\u09c1\u09af\u09be\u09af\u09bc\u09c0 \u09aa\u09cd\u09b0\u09cb\u09a1\u09be\u0995\u09cd\u099f \u09ab\u09bf\u09b2\u09cd\u099f\u09be\u09b0 \u0995\u09b0\u09be, \u09a8\u09be\u09ae \u0985\u09a8\u09c1\u09af\u09be\u09af\u09bc\u09c0 \u09b8\u09be\u099c\u09be\u09a8\u09cb\u0964  </li> </ul>"},{"location":"languages/bn/phase3/#optional-functional-interfaces","title":"Optional \u098f\u09ac\u0982 Functional Interfaces","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>Functional interfaces: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: Streams-\u098f \u09a1\u09c7\u099f\u09be \u09ab\u09bf\u09b2\u09cd\u099f\u09be\u09b0 \u0995\u09b0\u09a4\u09c7 <code>Predicate</code> \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0\u0964  </li> </ul>"},{"location":"languages/bn/phase3/#_1","title":"\u0989\u09a8\u09cd\u09a8\u09a4 \u0995\u09be\u09b2\u09c7\u0995\u09b6\u09a8","text":"<ul> <li>LinkedList: \u09a6\u0995\u09cd\u09b7 \u0987\u09a8\u09b8\u09be\u09b0\u09cd\u09b6\u09a8/\u09b0\u09bf\u09ae\u09c1\u09ad\u09be\u09b2\u0964  </li> <li>TreeMap: \u09b8\u09be\u099c\u09be\u09a8\u09cb key-value \u09aa\u09c7\u09af\u09bc\u09be\u09b0\u0964  </li> <li>PriorityQueue: \u09aa\u09cd\u09b0\u09be\u09af\u09bc\u09cb\u09b0\u09bf\u099f\u09bf \u0995\u09bf\u0989\u0964  </li> <li>LinkedHashMap \u098f\u09ac\u0982 Deque (\u09aa\u09b0\u09bf\u099a\u09bf\u09a4\u09bf)\u0964  </li> </ul>"},{"location":"languages/bn/phase3/#logging-slf4jlogback","title":"Logging (SLF4J/Logback)","text":"<ul> <li>SLF4J \u098f\u09b0 \u09b8\u09be\u09a5\u09c7 Logback \u0995\u09a8\u09ab\u09bf\u0997\u09be\u09b0\u09c7\u09b6\u09a8\u0964  </li> <li>\u09b2\u09c7\u09ad\u09c7\u09b2: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: Hibernate queries \u09b2\u0997 \u0995\u09b0\u09be\u0964  </li> </ul>"},{"location":"languages/bn/phase3/#acid","title":"\u099f\u09cd\u09b0\u09be\u09a8\u099c\u09be\u0995\u09b6\u09a8 \u09a7\u09be\u09b0\u09a3\u09be (ACID)","text":"<ul> <li>\u0985\u09cd\u09af\u09be\u099f\u09ae\u09bf\u09b8\u09bf\u099f\u09bf, \u0995\u09a8\u09b8\u09bf\u09b8\u09cd\u099f\u09c7\u09a8\u09cd\u09b8\u09bf, \u0986\u0987\u09b8\u09cb\u09b2\u09c7\u09b6\u09a8, \u09a1\u09bf\u0989\u09b0\u09be\u09ac\u09bf\u09b2\u09bf\u099f\u09bf\u0964  </li> <li>JDBC (<code>commit</code>, <code>rollback</code>) \u098f\u09ac\u0982 Hibernate (<code>@Transactional</code>) \u09a6\u09bf\u09af\u09bc\u09c7 \u099f\u09cd\u09b0\u09be\u09a8\u099c\u09be\u0995\u09b6\u09a8\u0964  </li> </ul>"},{"location":"languages/bn/phase3/#_2","title":"\u0987\u09a8\u09a1\u09c7\u0995\u09cd\u09b8 \u098f\u09ac\u0982 \u098f\u0995\u09cd\u09b8\u09bf\u0995\u09bf\u0989\u09b6\u09a8 \u09aa\u09cd\u09b2\u09cd\u09af\u09be\u09a8","text":"<ul> <li>Indexes: \u09aa\u09cd\u09b0\u09be\u0987\u09ae\u09be\u09b0\u09bf, \u0987\u0989\u09a8\u09bf\u0995, \u0995\u09ae\u09cd\u09aa\u09cb\u099c\u09bf\u099f\u0964  </li> <li>Queries \u0985\u09aa\u099f\u09bf\u09ae\u09be\u0987\u099c \u0995\u09b0\u09a4\u09c7 EXPLAIN \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u0998\u09a8 \u0998\u09a8 \u09b8\u09be\u09b0\u09cd\u099a \u0995\u09b0\u09be \u0995\u09b2\u09be\u09ae\u09c7 \u0987\u09a8\u09a1\u09c7\u0995\u09cd\u09b8 \u09a4\u09c8\u09b0\u09bf \u0995\u09b0\u09be\u0964  </li> </ul>"},{"location":"languages/bn/phase3/#_3","title":"\u09ab\u09be\u0987\u09b2 \u09ae\u09cd\u09af\u09be\u09a8\u09bf\u09aa\u09c1\u09b2\u09c7\u09b6\u09a8 (\u0990\u099a\u09cd\u099b\u09bf\u0995)","text":"<ul> <li><code>Files</code>, <code>BufferedReader</code> \u09a6\u09bf\u09af\u09bc\u09c7 \u09aa\u09a1\u09bc\u09be \u098f\u09ac\u0982 \u09b2\u09c7\u0996\u09be\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: Streams \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09c7 CSV \u09ab\u09b0\u09ae\u09cd\u09af\u09be\u099f\u09c7 \u09aa\u09cd\u09b0\u09cb\u09a1\u09be\u0995\u09cd\u099f \u09b0\u09bf\u09aa\u09cb\u09b0\u09cd\u099f \u098f\u0995\u09cd\u09b8\u09aa\u09cb\u09b0\u09cd\u099f \u0995\u09b0\u09be\u0964  </li> </ul>"},{"location":"languages/bn/phase3/#_4","title":"\u09a1\u09be\u099f\u09be\u09ac\u09c7\u09b8 \u099f\u09c7\u09b8\u09cd\u099f\u09bf\u0982 (\u09aa\u09b0\u09bf\u099a\u09bf\u09a4\u09bf)","text":"<ul> <li>H2 \u098f\u09ac\u0982 JUnit \u09a6\u09bf\u09af\u09bc\u09c7 \u0987\u09a8\u09cd\u099f\u09bf\u0997\u09cd\u09b0\u09c7\u09b6\u09a8 \u099f\u09c7\u09b8\u09cd\u099f\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: Hibernate \u09a6\u09bf\u09af\u09bc\u09c7 CRUD \u0985\u09aa\u09be\u09b0\u09c7\u09b6\u09a8 \u099f\u09c7\u09b8\u09cd\u099f \u0995\u09b0\u09be\u0964  </li> </ul>"},{"location":"languages/bn/phase3/#_5","title":"\u099a\u09c2\u09a1\u09bc\u09be\u09a8\u09cd\u09a4 \u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa","text":"<p>\u09aa\u09cd\u09b0\u09cb\u09a1\u09be\u0995\u09cd\u099f \u09ae\u09cd\u09af\u09be\u09a8\u09c7\u099c\u09ae\u09c7\u09a8\u09cd\u099f \u09b8\u09bf\u09b8\u09cd\u099f\u09c7\u09ae - \u09a1\u09be\u099f\u09be\u09ac\u09c7\u09b8: Product \u098f\u09ac\u0982 Category \u099f\u09c7\u09ac\u09bf\u09b2 (1:N \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995)\u0964 - Java: JPA (<code>Product</code>, <code>Category</code>) \u09a6\u09bf\u09af\u09bc\u09c7 \u0995\u09cd\u09b2\u09be\u09b8, Hibernate \u09a6\u09bf\u09af\u09bc\u09c7 CRUD\u0964 - \u0990\u099a\u09cd\u099b\u09bf\u0995: MongoDB-\u09a4\u09c7 \u09aa\u09cd\u09b0\u09cb\u09a1\u09be\u0995\u09cd\u099f \u09aa\u09b0\u09bf\u09ac\u09b0\u09cd\u09a4\u09a8\u09c7\u09b0 \u09b2\u0997 \u09b8\u0982\u09b0\u0995\u09cd\u09b7\u09a3\u0964 - \u0990\u099a\u09cd\u099b\u09bf\u0995: MongoDB-\u09a4\u09c7 \u09aa\u09cd\u09b0\u09cb\u09a1\u09be\u0995\u09cd\u099f\u09c7\u09b0 \u09a1\u09be\u09af\u09bc\u09a8\u09be\u09ae\u09bf\u0995 \u0985\u09cd\u09af\u09be\u099f\u09cd\u09b0\u09bf\u09ac\u09bf\u0989\u099f \u09b8\u0982\u09b0\u0995\u09cd\u09b7\u09a3 (\u09af\u09c7\u09ae\u09a8, \u099f\u09c7\u0995\u09a8\u09bf\u0995\u09cd\u09af\u09be\u09b2 \u09b8\u09cd\u09aa\u09c7\u09b8\u09bf\u09ab\u09bf\u0995\u09c7\u09b6\u09a8)\u0964 - Streams: \u09aa\u09cd\u09b0\u09cb\u09a1\u09be\u0995\u09cd\u099f \u09ab\u09bf\u09b2\u09cd\u099f\u09be\u09b0/\u09b8\u09b0\u09cd\u099f \u0995\u09b0\u09be (\u09af\u09c7\u09ae\u09a8, \u09a6\u09be\u09ae \u09ac\u09be \u0995\u09cd\u09af\u09be\u099f\u09be\u0997\u09b0\u09bf \u0985\u09a8\u09c1\u09af\u09be\u09af\u09bc\u09c0)\u0964 - Logging: \u09a1\u09be\u099f\u09be\u09ac\u09c7\u09b8 \u0985\u09aa\u09be\u09b0\u09c7\u09b6\u09a8 \u09aa\u09b0\u09cd\u09af\u09ac\u09c7\u0995\u09cd\u09b7\u09a3\u0964 - Git: \u09aa\u09cd\u09b0\u09a4\u09bf\u099f\u09bf \u09ab\u09bf\u099a\u09be\u09b0\u09c7\u09b0 \u099c\u09a8\u09cd\u09af commit (\u09af\u09c7\u09ae\u09a8, <code>feature/crud</code>, <code>feature/streams</code>)\u0964 - GitHub-\u098f \u09aa\u09cd\u09b0\u0995\u09be\u09b6 \u09b8\u09b9 \u09ac\u09cd\u09af\u09be\u0996\u09cd\u09af\u09be\u09ae\u09c2\u09b2\u0995 README\u0964  </p>"},{"location":"languages/bn/phase3/#_6","title":"\u09b0\u09bf\u09b8\u09cb\u09b0\u09cd\u09b8","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/bn/phase4/","title":"\u09ab\u09c7\u099c \u09ea \u2013 \u09ab\u09cd\u09b0\u09c7\u09ae\u0993\u09af\u09bc\u09be\u09b0\u09cd\u0995 \u098f\u09ac\u0982 \u0993\u09af\u09bc\u09c7\u09ac \u0985\u09cd\u09af\u09be\u09aa\u09cd\u09b2\u09bf\u0995\u09c7\u09b6\u09a8 (\u09e9-\u09ea \u09ae\u09be\u09b8)","text":""},{"location":"languages/bn/phase4/#spring-boot-spring-core-spring-data-jpa","title":"Spring Boot, Spring Core, \u098f\u09ac\u0982 Spring Data JPA","text":"<ul> <li>Spring Core: Dependency injection (<code>@Bean</code>, <code>@Autowired</code>), IoC container.  </li> <li>Spring Boot: Auto-configuration, starters (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>), <code>application.yml</code>.  </li> <li>Spring Data JPA: Repositories (<code>CrudRepository</code>, <code>JpaRepository</code>), <code>@Query</code> \u09a6\u09bf\u09af\u09bc\u09c7 \u0995\u09cb\u09af\u09bc\u09c7\u09b0\u09bf, \u09aa\u09c7\u099c\u09bf\u09a8\u09c7\u09b6\u09a8\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u099f\u09be\u09b8\u09cd\u0995 \u0985\u09cd\u09af\u09be\u09aa\u09c7 \u099f\u09be\u09b8\u09cd\u0995 \u09aa\u09b0\u09bf\u099a\u09be\u09b2\u09a8\u09be\u09b0 \u099c\u09a8\u09cd\u09af REST endpoints \u09a4\u09c8\u09b0\u09bf (CRUD).  </li> </ul>"},{"location":"languages/bn/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>\u09a7\u09be\u09b0\u09a3\u09be: Authentication, authorization, security filters.  </li> <li>JWT: \u099f\u09cb\u0995\u09c7\u09a8 \u09a4\u09c8\u09b0\u09bf \u098f\u09ac\u0982 \u09af\u09be\u099a\u09be\u0987, <code>JwtAuthenticationFilter</code> \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0\u0964  </li> <li>OAuth2: Resource Server \u0995\u09a8\u09ab\u09bf\u0997\u09be\u09b0, \u0995\u09cb\u09a8\u09cb \u09aa\u09cd\u09b0\u09cb\u09ad\u09be\u0987\u09a1\u09be\u09b0\u09c7\u09b0 \u09b8\u09be\u09a5\u09c7 \u0987\u09a8\u09cd\u099f\u09bf\u0997\u09cd\u09b0\u09c7\u09b6\u09a8 (\u09af\u09c7\u09ae\u09a8, Google).  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: JWT \u098f\u09ac\u0982 roles (<code>ADMIN</code>, <code>USER</code>) \u09a6\u09bf\u09af\u09bc\u09c7 \u099f\u09be\u09b8\u09cd\u0995 endpoints \u09b8\u09c1\u09b0\u0995\u09cd\u09b7\u09bf\u09a4 \u0995\u09b0\u09be\u0964  </li> </ul>"},{"location":"languages/bn/phase4/#_1","title":"\u0987\u0989\u09a8\u09bf\u099f \u098f\u09ac\u0982 \u0987\u09a8\u09cd\u099f\u09bf\u0997\u09cd\u09b0\u09c7\u09b6\u09a8 \u099f\u09c7\u09b8\u09cd\u099f\u09bf\u0982","text":"<ul> <li>Unit tests: JUnit 5, Mockito (<code>@Mock</code>, <code>@InjectMocks</code>), \u09ac\u09bf\u099c\u09a8\u09c7\u09b8 \u09b2\u099c\u09bf\u0995 \u099f\u09c7\u09b8\u09cd\u099f\u0964  </li> <li>Integration tests: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, \u099f\u09c7\u09b8\u09cd\u099f\u09bf\u0982\u09af\u09bc\u09c7\u09b0 \u099c\u09a8\u09cd\u09af H2 \u09a1\u09be\u099f\u09be\u09ac\u09c7\u09b8\u0964  </li> <li>Testcontainers: Docker \u0995\u09a8\u099f\u09c7\u0987\u09a8\u09be\u09b0\u09c7 PostgreSQL \u09a6\u09bf\u09af\u09bc\u09c7 \u099f\u09c7\u09b8\u09cd\u099f\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u099f\u09be\u09b8\u09cd\u0995 \u0985\u09cd\u09af\u09be\u09aa\u09c7\u09b0 \u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8 \u098f\u09ac\u0982 endpoints \u099f\u09c7\u09b8\u09cd\u099f \u0995\u09b0\u09be\u0964  </li> </ul>"},{"location":"languages/bn/phase4/#restful-apis-swagger","title":"RESTful APIs \u098f\u09ac\u0982 Swagger \u09a6\u09bf\u09af\u09bc\u09c7 \u09a1\u0995\u09c1\u09ae\u09c7\u09a8\u09cd\u099f\u09c7\u09b6\u09a8","text":"<ul> <li>REST: HTTP \u09ae\u09c7\u09a5\u09a1, \u09b8\u09cd\u099f\u09cd\u09af\u09be\u099f\u09be\u09b8 \u0995\u09cb\u09a1, RESTful \u09a8\u09c0\u09a4\u09bf\u0964  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>.  </li> <li>Swagger: springdoc-openapi \u0995\u09a8\u09ab\u09bf\u0997\u09be\u09b0, <code>@Operation</code> \u09a6\u09bf\u09af\u09bc\u09c7 \u099f\u09c0\u0995\u09be\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: Swagger UI \u09a6\u09bf\u09af\u09bc\u09c7 \u099f\u09be\u09b8\u09cd\u0995 \u0985\u09cd\u09af\u09be\u09aa\u09c7\u09b0 endpoints \u09a1\u0995\u09c1\u09ae\u09c7\u09a8\u09cd\u099f \u0995\u09b0\u09be\u0964  </li> </ul>"},{"location":"languages/bn/phase4/#graphql-","title":"GraphQL-\u098f\u09b0 \u09aa\u09b0\u09bf\u099a\u09bf\u09a4\u09bf","text":"<ul> <li>\u09a7\u09be\u09b0\u09a3\u09be: Queries, mutations, schema.  </li> <li>Spring Boot with GraphQL: spring-boot-starter-graphql \u09a6\u09bf\u09af\u09bc\u09c7 \u09b8\u09c7\u099f\u0986\u09aa\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u09b8\u09cd\u099f\u09cd\u09af\u09be\u099f\u09be\u09b8 \u0985\u09a8\u09c1\u09af\u09be\u09af\u09bc\u09c0 \u099f\u09be\u09b8\u09cd\u0995 \u09a4\u09be\u09b2\u09bf\u0995\u09be\u09ad\u09c1\u0995\u09cd\u09a4 \u0995\u09b0\u09a4\u09c7 GraphQL query \u09a4\u09c8\u09b0\u09bf\u0964  </li> </ul>"},{"location":"languages/bn/phase4/#_2","title":"\u09ae\u09cc\u09b2\u09bf\u0995 \u09ab\u09cd\u09b0\u09a8\u09cd\u099f\u098f\u09a8\u09cd\u09a1 \u0987\u09a8\u09cd\u099f\u09bf\u0997\u09cd\u09b0\u09c7\u09b6\u09a8","text":"<ul> <li>Thymeleaf: Spring Boot-\u098f\u09b0 \u09b8\u09be\u09a5\u09c7 HTML \u09aa\u09c7\u099c \u09b0\u09c7\u09a8\u09cd\u09a1\u09be\u09b0\u09bf\u0982\u09af\u09bc\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u099f\u09c7\u09ae\u09aa\u09cd\u09b2\u09c7\u099f\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u099f\u09be\u09b8\u09cd\u0995 \u09a6\u09c7\u0996\u09a4\u09c7 \u098f\u09ac\u0982 \u09a4\u09c8\u09b0\u09bf \u0995\u09b0\u09a4\u09c7 \u098f\u0995\u099f\u09bf \u09b8\u09be\u09a7\u09be\u09b0\u09a3 \u0993\u09af\u09bc\u09c7\u09ac \u0987\u09a8\u09cd\u099f\u09be\u09b0\u09ab\u09c7\u09b8 \u09a4\u09c8\u09b0\u09bf\u0964  </li> </ul>"},{"location":"languages/bn/phase4/#maven-gradle","title":"\u09ac\u09bf\u09b2\u09cd\u09a1 \u099f\u09c1\u09b2: Maven \u098f\u09ac\u0982 Gradle","text":"<ul> <li>Maven: <code>pom.xml</code> \u098f\u09b0 \u0997\u09a0\u09a8, \u09a1\u09bf\u09aa\u09c7\u09a8\u09cd\u09a1\u09c7\u09a8\u09cd\u09b8\u09bf, \u09aa\u09cd\u09b2\u09be\u0997\u09bf\u09a8\u0964  </li> <li>Gradle: <code>build.gradle</code> \u09ab\u09be\u0987\u09b2, \u099f\u09be\u09b8\u09cd\u0995, \u09a1\u09bf\u09aa\u09c7\u09a8\u09cd\u09a1\u09c7\u09a8\u09cd\u09b8\u09bf \u09ae\u09cd\u09af\u09be\u09a8\u09c7\u099c\u09ae\u09c7\u09a8\u09cd\u099f\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: Maven \u098f\u09ac\u0982 Gradle \u09a6\u09bf\u09af\u09bc\u09c7 \u099f\u09be\u09b8\u09cd\u0995 \u0985\u09cd\u09af\u09be\u09aa \u0995\u09a8\u09ab\u09bf\u0997\u09be\u09b0 \u0995\u09b0\u09be\u0964  </li> </ul>"},{"location":"languages/bn/phase4/#_3","title":"\u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa \u09a1\u09bf\u09aa\u09cd\u09b2\u09af\u09bc\u09ae\u09c7\u09a8\u09cd\u099f","text":"<ul> <li>\u09aa\u09cd\u09b2\u09cd\u09af\u09be\u099f\u09ab\u09b0\u09cd\u09ae: Railway, Heroku, AWS (Elastic Beanstalk).  </li> <li>\u09a7\u09be\u09aa: JAR \u09b9\u09bf\u09b8\u09c7\u09ac\u09c7 \u09aa\u09cd\u09af\u09be\u0995\u09c7\u099c\u09bf\u0982, GitHub Actions \u09a6\u09bf\u09af\u09bc\u09c7 CI/CD \u0995\u09a8\u09ab\u09bf\u0997\u09be\u09b0\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: PostgreSQL \u09b8\u09b9 Railway-\u09a4\u09c7 \u099f\u09be\u09b8\u09cd\u0995 \u0985\u09cd\u09af\u09be\u09aa \u09a1\u09bf\u09aa\u09cd\u09b2\u09af\u09bc \u0995\u09b0\u09be\u0964  </li> </ul>"},{"location":"languages/bn/phase4/#_4","title":"\u099a\u09c2\u09a1\u09bc\u09be\u09a8\u09cd\u09a4 \u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa","text":"<p>\u099f\u09be\u09b8\u09cd\u0995 \u09ae\u09cd\u09af\u09be\u09a8\u09c7\u099c\u09ae\u09c7\u09a8\u09cd\u099f \u09b8\u09bf\u09b8\u09cd\u099f\u09c7\u09ae - \u09a1\u09be\u099f\u09be\u09ac\u09c7\u09b8: <code>Task</code> (\u09b6\u09bf\u09b0\u09cb\u09a8\u09be\u09ae, \u09ac\u09bf\u09ac\u09b0\u09a3, \u09b8\u09cd\u099f\u09cd\u09af\u09be\u099f\u09be\u09b8) \u098f\u09ac\u0982 <code>User</code> \u099f\u09c7\u09ac\u09bf\u09b2 (1:N \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995)\u0964 - Java: Spring Boot, Spring Data JPA \u09a6\u09bf\u09af\u09bc\u09c7 REST API \u09a4\u09c8\u09b0\u09bf \u098f\u09ac\u0982 CRUD\u0964 - \u09b8\u09bf\u0995\u09bf\u0989\u09b0\u09bf\u099f\u09bf: JWT authentication, roles (<code>ADMIN</code>, <code>USER</code>). - \u099f\u09c7\u09b8\u09cd\u099f: \u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u0987\u0989\u09a8\u09bf\u099f \u099f\u09c7\u09b8\u09cd\u099f \u098f\u09ac\u0982 Testcontainers \u09a6\u09bf\u09af\u09bc\u09c7 endpoints-\u098f\u09b0 \u0987\u09a8\u09cd\u099f\u09bf\u0997\u09cd\u09b0\u09c7\u09b6\u09a8 \u099f\u09c7\u09b8\u09cd\u099f\u0964 - \u09a1\u0995\u09c1\u09ae\u09c7\u09a8\u09cd\u099f\u09c7\u09b6\u09a8: endpoints-\u098f\u09b0 \u09ac\u09bf\u09ac\u09b0\u09a3 \u09b8\u09b9 Swagger UI\u0964 - \u0990\u099a\u09cd\u099b\u09bf\u0995: \u099f\u09be\u09b8\u09cd\u0995 \u09a4\u09be\u09b2\u09bf\u0995\u09be\u09ad\u09c1\u0995\u09cd\u09a4 \u0995\u09b0\u09a4\u09c7 GraphQL query \u098f\u09ac\u0982 \u0987\u09a8\u09cd\u099f\u09be\u09b0\u0985\u09cd\u09af\u09be\u0995\u09b6\u09a8\u09c7\u09b0 \u099c\u09a8\u09cd\u09af Thymeleaf \u0987\u09a8\u09cd\u099f\u09be\u09b0\u09ab\u09c7\u09b8 \u09af\u09cb\u0997 \u0995\u09b0\u09be\u0964 - Git: \u09aa\u09cd\u09b0\u09a4\u09bf\u099f\u09bf \u09ab\u09bf\u099a\u09be\u09b0\u09c7\u09b0 \u099c\u09a8\u09cd\u09af commit (\u09af\u09c7\u09ae\u09a8, <code>feature/rest-api</code>, <code>feature/security</code>). - \u09aa\u09cd\u09b0\u0995\u09be\u09b6: GitHub-\u098f README \u09b8\u09b9 (\u09b8\u09c7\u099f\u0986\u09aa, endpoints, \u09a1\u09bf\u09aa\u09cd\u09b2\u09af\u09bc\u09ae\u09c7\u09a8\u09cd\u099f)\u0964  </p>"},{"location":"languages/bn/phase4/#_5","title":"\u09b0\u09bf\u09b8\u09cb\u09b0\u09cd\u09b8","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/bn/phase5/","title":"\u09ab\u09c7\u099c \u09eb \u2013 \u0986\u09b0\u09cd\u0995\u09bf\u099f\u09c7\u0995\u099a\u09be\u09b0 \u098f\u09ac\u0982 \u0995\u09a8\u0995\u09be\u09b0\u09c7\u09a8\u09cd\u09b8\u09bf (\u09e8-\u09e9 \u09ae\u09be\u09b8)","text":""},{"location":"languages/bn/phase5/#clean-code-solid","title":"Clean Code \u098f\u09ac\u0982 SOLID \u09a8\u09c0\u09a4\u09bf","text":"<ul> <li>Clean Code: \u09b8\u09cd\u09aa\u09b7\u09cd\u099f \u09a8\u09be\u09ae\u0995\u09b0\u09a3, \u09b8\u0982\u0995\u09cd\u09b7\u09bf\u09aa\u09cd\u09a4 \u09ab\u09be\u0982\u09b6\u09a8, \u09b8\u09b9\u09be\u09af\u09bc\u0995 \u09ae\u09a8\u09cd\u09a4\u09ac\u09cd\u09af, \u09b8\u09be\u09ae\u099e\u09cd\u099c\u09b8\u09cd\u09af\u09aa\u09c2\u09b0\u09cd\u09a3 \u09ab\u09b0\u09ae\u09cd\u09af\u09be\u099f\u09bf\u0982\u0964  </li> <li>SOLID:  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: SOLID \u09a8\u09c0\u09a4\u09bf \u0985\u09a8\u09c1\u09b8\u09b0\u09a3 \u0995\u09b0\u09a4\u09c7 \u099f\u09be\u09b8\u09cd\u0995 \u09ae\u09cd\u09af\u09be\u09a8\u09c7\u099c\u09be\u09b0\u09c7\u09b0 \u098f\u0995\u099f\u09bf \u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8 \u09b0\u09bf\u09ab\u09cd\u09af\u09be\u0995\u09cd\u099f\u09b0 \u0995\u09b0\u09be\u0964  </p>"},{"location":"languages/bn/phase5/#_1","title":"\u09a1\u09bf\u099c\u09be\u0987\u09a8 \u09aa\u09cd\u09af\u09be\u099f\u09be\u09b0\u09cd\u09a8","text":"<ul> <li>\u09aa\u09cd\u09af\u09be\u099f\u09be\u09b0\u09cd\u09a8: Factory (\u09b8\u09c3\u09b7\u09cd\u099f\u09bf), Singleton (\u098f\u0995\u0995 \u0987\u09a8\u09b8\u09cd\u099f\u09cd\u09af\u09be\u09a8\u09cd\u09b8), Builder (\u0985\u09ac\u099c\u09c7\u0995\u09cd\u099f \u09a8\u09bf\u09b0\u09cd\u09ae\u09be\u09a3), Strategy (\u0986\u099a\u09b0\u09a3), Observer (\u0987\u09ad\u09c7\u09a8\u09cd\u099f)\u0964  </li> <li>\u09aa\u09cd\u09b0\u09af\u09bc\u09cb\u0997: \u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa\u09c7\u09b0 \u09aa\u09cd\u09b0\u09c7\u0995\u09cd\u09b7\u09be\u09aa\u099f\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u0989\u09aa\u09af\u09c1\u0995\u09cd\u09a4 \u09aa\u09cd\u09af\u09be\u099f\u09be\u09b0\u09cd\u09a8 \u09a8\u09bf\u09b0\u09cd\u09ac\u09be\u099a\u09a8\u0964  </li> </ul> <p>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u099f\u09be\u09b8\u09cd\u0995 \u09aa\u09cd\u09b0\u09be\u09af\u09bc\u09cb\u09b0\u09bf\u099f\u09be\u0987\u099c\u09c7\u09b6\u09a8 \u0985\u09cd\u09af\u09be\u09b2\u0997\u09b0\u09bf\u09a6\u09ae\u09c7\u09b0 \u099c\u09a8\u09cd\u09af Strategy \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0\u0964  </p>"},{"location":"languages/bn/phase5/#_2","title":"\u09a5\u09cd\u09b0\u09c7\u09a1 \u098f\u09ac\u0982 \u0995\u09a8\u0995\u09be\u09b0\u09c7\u09a8\u09cd\u09b8\u09bf","text":"<ul> <li>\u09a7\u09be\u09b0\u09a3\u09be: Thread, Runnable, ExecutorService, ForkJoinPool.  </li> <li>\u099f\u09c7\u0995\u09a8\u09bf\u0995: \u09a5\u09cd\u09b0\u09c7\u09a1 \u09aa\u09c1\u09b2 \u09a4\u09c8\u09b0\u09bf \u098f\u09ac\u0982 \u09aa\u09b0\u09bf\u099a\u09be\u09b2\u09a8\u09be, \u0985\u09cd\u09af\u09be\u09b8\u09bf\u09a8\u0995\u09cd\u09b0\u09cb\u09a8\u09be\u09b8 \u099f\u09be\u09b8\u09cd\u0995\u0964  </li> </ul> <p>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: ExecutorService \u09a6\u09bf\u09af\u09bc\u09c7 \u099f\u09be\u09b8\u09cd\u0995 \u09b0\u09bf\u09aa\u09cb\u09b0\u09cd\u099f \u09b8\u09ae\u09be\u09a8\u09cd\u09a4\u09b0\u09be\u09b2\u09ad\u09be\u09ac\u09c7 \u09aa\u09cd\u09b0\u0995\u09cd\u09b0\u09bf\u09af\u09bc\u09be\u0995\u09b0\u09a3\u0964  </p>"},{"location":"languages/bn/phase5/#_3","title":"\u09b8\u09bf\u09a8\u0995\u09cd\u09b0\u09cb\u09a8\u09be\u0987\u099c\u09c7\u09b6\u09a8 \u098f\u09ac\u0982 \u0995\u09a8\u0995\u09be\u09b0\u09c7\u09a8\u09cd\u09b8\u09bf \u09b8\u09ae\u09b8\u09cd\u09af\u09be","text":"<ul> <li>\u09ae\u09c7\u0995\u09be\u09a8\u09bf\u099c\u09ae: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>.  </li> <li>\u09b8\u09ae\u09b8\u09cd\u09af\u09be: Deadlock, race condition, starvation.  </li> </ul> <p>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u09b6\u09c7\u09af\u09bc\u09be\u09b0\u09a1 \u099f\u09be\u09b8\u09cd\u0995 \u09b2\u09bf\u09b8\u09cd\u099f\u09c7 \u09a8\u09bf\u09b0\u09be\u09aa\u09a6 \u0985\u09cd\u09af\u09be\u0995\u09cd\u09b8\u09c7\u09b8 \u09ac\u09be\u09b8\u09cd\u09a4\u09ac\u09be\u09af\u09bc\u09a8\u0964  </p>"},{"location":"languages/bn/phase5/#_4","title":"\u09ae\u09be\u0987\u0995\u09cd\u09b0\u09cb\u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8\u09c7\u09b0 \u09aa\u09b0\u09bf\u099a\u09bf\u09a4\u09bf","text":"<ul> <li>\u09a7\u09be\u09b0\u09a3\u09be: \u09ae\u09be\u0987\u0995\u09cd\u09b0\u09cb\u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8 \u0986\u09b0\u09cd\u0995\u09bf\u099f\u09c7\u0995\u099a\u09be\u09b0, REST \u0995\u09ae\u09bf\u0989\u09a8\u09bf\u0995\u09c7\u09b6\u09a8, \u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8 \u09a1\u09bf\u09b8\u0995\u09ad\u09be\u09b0\u09bf\u0964  </li> <li>\u099f\u09c1\u09b2: Spring Cloud (\u09af\u09c7\u09ae\u09a8, Eureka \u09ab\u09b0 service discovery).  </li> </ul> <p>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u099f\u09be\u09b8\u09cd\u0995 \u09ae\u09cd\u09af\u09be\u09a8\u09c7\u099c\u09be\u09b0\u0995\u09c7 \u09ae\u09be\u0987\u0995\u09cd\u09b0\u09cb\u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8\u09c7 \u09ac\u09bf\u09ad\u0995\u09cd\u09a4 \u0995\u09b0\u09be (\u099f\u09be\u09b8\u09cd\u0995 \u098f\u09ac\u0982 \u0987\u0989\u099c\u09be\u09b0)\u0964  </p>"},{"location":"languages/bn/phase5/#_5","title":"\u09ae\u09c7\u09b8\u09c7\u099c \u0995\u09bf\u0989 \u09ab\u09be\u09a8\u09cd\u09a1\u09be\u09ae\u09c7\u09a8\u09cd\u099f\u09be\u09b2 (\u0990\u099a\u09cd\u099b\u09bf\u0995)","text":"<ul> <li>\u09a7\u09be\u09b0\u09a3\u09be: Publisher/subscriber, queues, topics.  </li> <li>RabbitMQ: \u09b8\u09c7\u099f\u0986\u09aa, \u09ae\u09c7\u09b8\u09c7\u099c \u09aa\u09be\u09a0\u09be\u09a8\u09cb \u098f\u09ac\u0982 \u0997\u09cd\u09b0\u09b9\u09a3\u0964  </li> </ul> <p>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: RabbitMQ \u09a6\u09bf\u09af\u09bc\u09c7 \u099f\u09be\u09b8\u09cd\u0995 \u0986\u09aa\u09a1\u09c7\u099f \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09c7 \u0987\u0989\u099c\u09be\u09b0\u09a6\u09c7\u09b0 \u09a8\u09cb\u099f\u09bf\u09ab\u09be\u0987 \u0995\u09b0\u09be\u0964  </p>"},{"location":"languages/bn/phase5/#_6","title":"\u09aa\u09be\u09b0\u09ab\u09b0\u09ae\u09cd\u09af\u09be\u09a8\u09cd\u09b8 \u0985\u09aa\u099f\u09bf\u09ae\u09be\u0987\u099c\u09c7\u09b6\u09a8","text":"<ul> <li>Caching: Spring Cache \u09b8\u09b9 Redis \u09a6\u09bf\u09af\u09bc\u09c7 \u09a1\u09be\u099f\u09be\u09ac\u09c7\u09b8 \u0985\u09cd\u09af\u09be\u0995\u09cd\u09b8\u09c7\u09b8 \u0995\u09ae\u09be\u09a8\u09cb\u0964  </li> <li>JVM Tuning: \u09ae\u09cc\u09b2\u09bf\u0995 \u09a7\u09be\u09b0\u09a3\u09be (heap, garbage collection).  </li> </ul> <p>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u099f\u09be\u09b8\u09cd\u0995 \u09b8\u09bf\u09b8\u09cd\u099f\u09c7\u09ae\u09c7 \u0998\u09a8 \u0998\u09a8 \u0995\u09cb\u09af\u09bc\u09c7\u09b0\u09bf\u09b0 \u099c\u09a8\u09cd\u09af \u0995\u09cd\u09af\u09be\u09b6 \u09ac\u09be\u09b8\u09cd\u09a4\u09ac\u09be\u09af\u09bc\u09a8\u0964  </p>"},{"location":"languages/bn/phase5/#devopscloud-docker-cicd","title":"DevOps/Cloud \u09aa\u09b0\u09bf\u099a\u09bf\u09a4\u09bf: Docker \u098f\u09ac\u0982 CI/CD","text":"<ul> <li>Docker: \u0995\u09a8\u099f\u09c7\u0987\u09a8\u09be\u09b0, \u0987\u09ae\u09c7\u099c, Dockerfile, Docker Compose.  </li> <li>CI/CD: GitHub Actions \u09a6\u09bf\u09af\u09bc\u09c7 \u09ac\u09bf\u09b2\u09cd\u09a1 \u098f\u09ac\u0982 \u09a1\u09bf\u09aa\u09cd\u09b2\u09af\u09bc\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u09aa\u09be\u0987\u09aa\u09b2\u09be\u0987\u09a8 \u0995\u09a8\u09ab\u09bf\u0997\u09be\u09b0\u0964  </li> </ul> <p>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u099f\u09be\u09b8\u09cd\u0995 \u0985\u09cd\u09af\u09be\u09aa\u09c7\u09b0 \u099c\u09a8\u09cd\u09af Dockerfile \u09a4\u09c8\u09b0\u09bf \u098f\u09ac\u0982 GitHub Actions \u09a6\u09bf\u09af\u09bc\u09c7 \u09a1\u09bf\u09aa\u09cd\u09b2\u09af\u09bc\u0964  </p>"},{"location":"languages/bn/phase5/#_7","title":"\u0985\u09ac\u099c\u09be\u09b0\u09ad\u09c7\u09ac\u09bf\u09b2\u09bf\u099f\u09bf","text":"<ul> <li>\u099f\u09c1\u09b2: Prometheus (\u09ae\u09c7\u099f\u09cd\u09b0\u09bf\u0995\u09cd\u09b8), Grafana (\u09ad\u09bf\u099c\u09cd\u09af\u09c1\u09af\u09bc\u09be\u09b2\u09be\u0987\u099c\u09c7\u09b6\u09a8), ELK Stack (\u09b2\u0997)\u0964  </li> <li>\u09a7\u09be\u09b0\u09a3\u09be: \u09aa\u09be\u09b0\u09ab\u09b0\u09ae\u09cd\u09af\u09be\u09a8\u09cd\u09b8 \u09ae\u09a8\u09bf\u099f\u09b0\u09bf\u0982, \u09b8\u09c7\u09a8\u09cd\u099f\u09cd\u09b0\u09be\u09b2\u09be\u0987\u099c\u09a1 \u09b2\u0997, \u0985\u09cd\u09af\u09be\u09b2\u09be\u09b0\u09cd\u099f\u0964  </li> </ul> <p>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: Prometheus \u098f\u09ac\u0982 Grafana \u09a6\u09bf\u09af\u09bc\u09c7 \u099f\u09be\u09b8\u09cd\u0995 API-\u098f\u09b0 \u09b0\u09c7\u09b8\u09aa\u09a8\u09cd\u09b8 \u099f\u09be\u0987\u09ae \u09ae\u09a8\u09bf\u099f\u09b0\u09bf\u0982\u0964  </p>"},{"location":"languages/bn/phase5/#owasp-top-ten","title":"\u09b8\u09bf\u0995\u09bf\u0989\u09b0\u09bf\u099f\u09bf: OWASP Top Ten","text":"<ul> <li>\u09a7\u09be\u09b0\u09a3\u09be: \u0987\u09a8\u099c\u09c7\u0995\u09b6\u09a8, \u0985\u09a5\u09c7\u09a8\u099f\u09bf\u0995\u09c7\u09b6\u09a8 \u09ab\u09c7\u0987\u09b2\u09bf\u0993\u09b0, \u09b8\u0982\u09ac\u09c7\u09a6\u09a8\u09b6\u09c0\u09b2 \u09a1\u09c7\u099f\u09be \u098f\u0995\u09cd\u09b8\u09aa\u09cb\u099c\u09be\u09b0\u0964  </li> <li>\u0985\u09a8\u09c1\u09b6\u09c0\u09b2\u09a8: \u0987\u09a8\u09aa\u09c1\u099f \u09ad\u09cd\u09af\u09be\u09b2\u09bf\u09a1\u09c7\u09b6\u09a8, \u09b8\u09cd\u09af\u09be\u09a8\u09bf\u099f\u09be\u0987\u099c\u09c7\u09b6\u09a8, \u09b8\u09bf\u0995\u09bf\u0989\u09b0 \u0995\u09a8\u09ab\u09bf\u0997\u09be\u09b0\u09c7\u09b6\u09a8\u0964  </li> </ul> <p>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: SQL injection \u098f\u09ac\u0982 XSS \u09a5\u09c7\u0995\u09c7 \u099f\u09be\u09b8\u09cd\u0995 API \u09b8\u09c1\u09b0\u0995\u09cd\u09b7\u09bf\u09a4 \u0995\u09b0\u09be\u0964  </p>"},{"location":"languages/bn/phase5/#_8","title":"\u099a\u09c2\u09a1\u09bc\u09be\u09a8\u09cd\u09a4 \u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa","text":"<p>\u0985\u09cd\u09af\u09be\u09a1\u09ad\u09be\u09a8\u09cd\u09b8\u09a1 \u099f\u09be\u09b8\u09cd\u0995 \u09ae\u09cd\u09af\u09be\u09a8\u09c7\u099c\u09ae\u09c7\u09a8\u09cd\u099f \u09b8\u09bf\u09b8\u09cd\u099f\u09c7\u09ae - \u09ac\u09cd\u09af\u09be\u0995\u098f\u09a8\u09cd\u09a1: \u09ab\u09c7\u099c \u09ea-\u098f\u09b0 \u099f\u09be\u09b8\u09cd\u0995 API \u0989\u09a8\u09cd\u09a8\u09a4 \u0995\u09b0\u09be \u09ae\u09be\u0987\u0995\u09cd\u09b0\u09cb\u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8 \u09a6\u09bf\u09af\u09bc\u09c7 (\u099f\u09be\u09b8\u09cd\u0995 \u098f\u09ac\u0982 \u0987\u0989\u099c\u09be\u09b0)\u0964 - \u0986\u09b0\u09cd\u0995\u09bf\u099f\u09c7\u0995\u099a\u09be\u09b0: Clean Code, SOLID, \u098f\u09ac\u0982 design patterns (\u09af\u09c7\u09ae\u09a8, Strategy) \u09a6\u09bf\u09af\u09bc\u09c7 \u09b0\u09bf\u09ab\u09cd\u09af\u09be\u0995\u09cd\u099f\u09b0\u0964 - \u0995\u09a8\u0995\u09be\u09b0\u09c7\u09a8\u09cd\u09b8\u09bf: ExecutorService \u09a6\u09bf\u09af\u09bc\u09c7 \u09b0\u09bf\u09aa\u09cb\u09b0\u09cd\u099f \u09b8\u09ae\u09be\u09a8\u09cd\u09a4\u09b0\u09be\u09b2\u09ad\u09be\u09ac\u09c7 \u09aa\u09cd\u09b0\u0995\u09cd\u09b0\u09bf\u09af\u09bc\u09be\u0995\u09b0\u09a3\u0964 - \u0990\u099a\u09cd\u099b\u09bf\u0995: RabbitMQ \u09a6\u09bf\u09af\u09bc\u09c7 \u09ae\u09be\u0987\u0995\u09cd\u09b0\u09cb\u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8\u0997\u09c1\u09b2\u09cb\u09b0 \u09ae\u09a7\u09cd\u09af\u09c7 \u09af\u09cb\u0997\u09be\u09af\u09cb\u0997 \u098f\u09ac\u0982 \u0998\u09a8 \u0998\u09a8 \u0995\u09cb\u09af\u09bc\u09c7\u09b0\u09bf\u09b0 \u099c\u09a8\u09cd\u09af Redis \u09a6\u09bf\u09af\u09bc\u09c7 \u0995\u09cd\u09af\u09be\u09b6\u09bf\u0982\u0964 - DevOps: Docker-\u098f \u09aa\u09cd\u09af\u09be\u0995\u09c7\u099c\u09bf\u0982, GitHub Actions \u09a6\u09bf\u09af\u09bc\u09c7 CI/CD \u0995\u09a8\u09ab\u09bf\u0997\u09be\u09b0\u0964 - \u0985\u09ac\u099c\u09be\u09b0\u09ad\u09c7\u09ac\u09bf\u09b2\u09bf\u099f\u09bf: \u09ae\u09c7\u099f\u09cd\u09b0\u09bf\u0995\u09cd\u09b8\u09c7\u09b0 \u099c\u09a8\u09cd\u09af Prometheus \u098f\u09ac\u0982 Grafana \u09af\u09cb\u0997 \u0995\u09b0\u09be\u0964 - \u09b8\u09bf\u0995\u09bf\u0989\u09b0\u09bf\u099f\u09bf: OWASP Top Ten-\u098f\u09b0 \u09ac\u09bf\u09b0\u09c1\u09a6\u09cd\u09a7\u09c7 \u09b8\u09c1\u09b0\u0995\u09cd\u09b7\u09be \u09ac\u09be\u09b8\u09cd\u09a4\u09ac\u09be\u09af\u09bc\u09a8\u0964 - Git: \u09aa\u09cd\u09b0\u09a4\u09bf\u099f\u09bf \u09ab\u09bf\u099a\u09be\u09b0\u09c7\u09b0 \u099c\u09a8\u09cd\u09af commit (\u09af\u09c7\u09ae\u09a8, <code>feature/microservices</code>, <code>feature/concurrency</code>). - \u09aa\u09cd\u09b0\u0995\u09be\u09b6: GitHub-\u098f \u09ac\u09bf\u09b8\u09cd\u09a4\u09be\u09b0\u09bf\u09a4 README \u09b8\u09b9 (\u09b8\u09c7\u099f\u0986\u09aa, \u0986\u09b0\u09cd\u0995\u09bf\u099f\u09c7\u0995\u099a\u09be\u09b0, \u09a1\u09bf\u09aa\u09cd\u09b2\u09af\u09bc\u09ae\u09c7\u09a8\u09cd\u099f)\u0964  </p>"},{"location":"languages/bn/phase5/#_9","title":"\u09b0\u09bf\u09b8\u09cb\u09b0\u09cd\u09b8","text":"<ul> <li>The Pragmatic Programmer (\u09ac\u0987)  </li> <li>Effective Java (\u09ac\u0987)  </li> <li>Java Concurrency in Practice (\u09ac\u0987)  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/bn/phase6/","title":"\u09ab\u09c7\u099c \u09ec \u2013 \u099a\u09c2\u09a1\u09bc\u09be\u09a8\u09cd\u09a4 \u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa (\u099a\u09b2\u09ae\u09be\u09a8)","text":""},{"location":"languages/bn/phase6/#crud","title":"\u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa \u09e7: \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 CRUD \u09b8\u09b9 \u0985\u09a5\u09c7\u09a8\u099f\u09bf\u0995\u09c7\u09b6\u09a8","text":"<ul> <li>\u0989\u09a6\u09cd\u09a6\u09c7\u09b6\u09cd\u09af: \u09a8\u09bf\u09b0\u09be\u09aa\u09a6 \u0985\u09a5\u09c7\u09a8\u099f\u09bf\u0995\u09c7\u09b6\u09a8 \u098f\u09ac\u0982 \u099f\u09c7\u09b8\u09cd\u099f\u09bf\u0982 \u09b8\u09b9 \u098f\u0995\u099f\u09bf \u09b6\u0995\u09cd\u09a4\u09bf\u09b6\u09be\u09b2\u09c0 RESTful API \u09a4\u09c8\u09b0\u09bf\u0964  </li> <li>\u099f\u09c7\u0995\u09a8\u09cb\u09b2\u099c\u09bf: Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers.  </li> <li>\u09ab\u09bf\u099a\u09be\u09b0: \u098f\u09a8\u099f\u09bf\u099f\u09bf (\u09af\u09c7\u09ae\u09a8, \u099f\u09be\u09b8\u09cd\u0995, \u0987\u0989\u099c\u09be\u09b0) \u098f\u09b0 \u099c\u09a8\u09cd\u09af CRUD, roles (ADMIN, USER) \u09b8\u09b9 \u0985\u09a5\u09c7\u09a8\u099f\u09bf\u0995\u09c7\u09b6\u09a8, Swagger \u09a6\u09bf\u09af\u09bc\u09c7 \u09a1\u0995\u09c1\u09ae\u09c7\u09a8\u09cd\u099f\u09c7\u09b6\u09a8\u0964  </li> <li>\u0990\u099a\u09cd\u099b\u09bf\u0995: \u099f\u09be\u09b8\u09cd\u0995 \u09a6\u09c7\u0996\u09a4\u09c7/\u09aa\u09b0\u09bf\u099a\u09be\u09b2\u09a8\u09be\u09b0 \u099c\u09a8\u09cd\u09af Thymeleaf \u0987\u09a8\u09cd\u099f\u09be\u09b0\u09ab\u09c7\u09b8 \u09af\u09cb\u0997 \u0995\u09b0\u09be\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u09aa\u09cd\u09b0\u09cb\u099c\u09c7\u0995\u09cd\u099f \u09aa\u09b0\u09bf\u099a\u09be\u09b2\u09a8\u09be\u09b0 \u099c\u09a8\u09cd\u09af API (\u098f\u09a8\u099f\u09bf\u099f\u09bf: <code>Project</code>, <code>Task</code>, <code>User</code>) \u09b8\u09c1\u09b0\u0995\u09cd\u09b7\u09bf\u09a4 endpoints \u09b8\u09b9\u0964  </li> </ul>"},{"location":"languages/bn/phase6/#_2","title":"\u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa \u09e8: \u09ab\u09be\u0987\u09b2 \u0986\u09aa\u09b2\u09cb\u09a1","text":"<ul> <li>\u0989\u09a6\u09cd\u09a6\u09c7\u09b6\u09cd\u09af: \u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa \u09e7-\u098f\u09b0 API-\u09a4\u09c7 \u09ab\u09be\u0987\u09b2 \u0986\u09aa\u09b2\u09cb\u09a1 \u09ab\u09be\u0982\u09b6\u09a8\u09be\u09b2\u09bf\u099f\u09bf \u09af\u09cb\u0997 \u0995\u09b0\u09be\u0964  </li> <li>\u099f\u09c7\u0995\u09a8\u09cb\u09b2\u099c\u09bf: Spring Boot (<code>MultipartFile</code>), Amazon S3 \u09ac\u09be \u09b2\u09cb\u0995\u09be\u09b2 \u09b8\u09cd\u099f\u09cb\u09b0\u09c7\u099c, \u09ab\u09be\u0987\u09b2 \u09ad\u09cd\u09af\u09be\u09b2\u09bf\u09a1\u09c7\u09b6\u09a8\u0964  </li> <li>\u09ab\u09bf\u099a\u09be\u09b0: \u099f\u09be\u09b8\u09cd\u0995\u09c7\u09b0 \u09b8\u09be\u09a5\u09c7 \u09b8\u09ae\u09cd\u09aa\u09b0\u09cd\u0995\u09bf\u09a4 \u0987\u09ae\u09c7\u099c/\u09a1\u0995\u09c1\u09ae\u09c7\u09a8\u09cd\u099f \u0986\u09aa\u09b2\u09cb\u09a1, \u099f\u09be\u0987\u09aa/\u09b8\u09be\u0987\u099c \u09ad\u09cd\u09af\u09be\u09b2\u09bf\u09a1\u09c7\u09b6\u09a8\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: API-\u09a4\u09c7 \u099f\u09be\u09b8\u09cd\u0995\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u0985\u09cd\u09af\u09be\u099f\u09be\u099a\u09ae\u09c7\u09a8\u09cd\u099f (\u09af\u09c7\u09ae\u09a8, PDF, PNG) \u0986\u09aa\u09b2\u09cb\u09a1\u09c7\u09b0 \u0985\u09a8\u09c1\u09ae\u09a4\u09bf \u09a6\u09c7\u0993\u09af\u09bc\u09be\u0964  </li> </ul>"},{"location":"languages/bn/phase6/#_3","title":"\u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa \u09e9: \u0995\u09cd\u09b2\u09be\u0989\u09a1 \u09a1\u09bf\u09aa\u09cd\u09b2\u09af\u09bc\u09ae\u09c7\u09a8\u09cd\u099f","text":"<ul> <li>\u0989\u09a6\u09cd\u09a6\u09c7\u09b6\u09cd\u09af: CI/CD \u09b8\u09b9 \u0995\u09cd\u09b2\u09be\u0989\u09a1 \u09aa\u09cd\u09b2\u09cd\u09af\u09be\u099f\u09ab\u09b0\u09cd\u09ae\u09c7 API \u09a1\u09bf\u09aa\u09cd\u09b2\u09af\u09bc \u0995\u09b0\u09be\u0964  </li> <li>\u099f\u09c7\u0995\u09a8\u09cb\u09b2\u099c\u09bf: Railway, Heroku, \u09ac\u09be AWS (Elastic Beanstalk), GitHub Actions, Docker.  </li> <li>\u09ab\u09bf\u099a\u09be\u09b0: JAR/Docker \u09b9\u09bf\u09b8\u09c7\u09ac\u09c7 \u09aa\u09cd\u09af\u09be\u0995\u09c7\u099c\u09bf\u0982, \u098f\u09a8\u09ad\u09be\u09af\u09bc\u09b0\u09a8\u09ae\u09c7\u09a8\u09cd\u099f \u09ad\u09c7\u09b0\u09bf\u09af\u09bc\u09c7\u09ac\u09b2 \u0995\u09a8\u09ab\u09bf\u0997\u09be\u09b0, \u0985\u099f\u09cb\u09ae\u09c7\u099f\u09c7\u09a1 \u09a1\u09bf\u09aa\u09cd\u09b2\u09af\u09bc\u09ae\u09c7\u09a8\u09cd\u099f\u0964  </li> <li>\u0990\u099a\u09cd\u099b\u09bf\u0995: \u0998\u09a8 \u0998\u09a8 \u0995\u09cb\u09af\u09bc\u09c7\u09b0\u09bf \u0985\u09aa\u099f\u09bf\u09ae\u09be\u0987\u099c \u0995\u09b0\u09a4\u09c7 Redis \u09a6\u09bf\u09af\u09bc\u09c7 \u0995\u09cd\u09af\u09be\u09b6\u09bf\u0982 \u09ac\u09be\u09b8\u09cd\u09a4\u09ac\u09be\u09af\u09bc\u09a8\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: PostgreSQL \u098f\u09ac\u0982 CI/CD \u09b8\u09b9 Railway-\u09a4\u09c7 \u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa API \u09a1\u09bf\u09aa\u09cd\u09b2\u09af\u09bc\u0964  </li> </ul>"},{"location":"languages/bn/phase6/#_4","title":"\u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa \u09ea: \u09ae\u09be\u0987\u0995\u09cd\u09b0\u09cb\u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8","text":"<ul> <li>\u0989\u09a6\u09cd\u09a6\u09c7\u09b6\u09cd\u09af: \u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa \u09e7-\u098f\u09b0 API-\u0995\u09c7 \u0985\u09b0\u09cd\u0995\u09c7\u09b8\u09cd\u099f\u09cd\u09b0\u09c7\u099f\u09c7\u09a1 \u09ae\u09be\u0987\u0995\u09cd\u09b0\u09cb\u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8\u09c7 \u09ac\u09bf\u09ad\u0995\u09cd\u09a4 \u0995\u09b0\u09be\u0964  </li> <li>\u099f\u09c7\u0995\u09a8\u09cb\u09b2\u099c\u09bf: Spring Cloud (Eureka, Gateway), Docker Compose, REST \u0995\u09ae\u09bf\u0989\u09a8\u09bf\u0995\u09c7\u09b6\u09a8\u0964  </li> <li>\u09ab\u09bf\u099a\u09be\u09b0: <code>Tasks</code> \u098f\u09ac\u0982 <code>Users</code>-\u098f\u09b0 \u099c\u09a8\u09cd\u09af \u09ae\u09be\u0987\u0995\u09cd\u09b0\u09cb\u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8, \u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8 \u09a1\u09bf\u09b8\u0995\u09ad\u09be\u09b0\u09bf \u09b8\u09b9\u0964  </li> <li>\u0990\u099a\u09cd\u099b\u09bf\u0995: \u09ae\u09be\u0987\u0995\u09cd\u09b0\u09cb\u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8\u0997\u09c1\u09b2\u09cb\u09b0 \u09ae\u09a7\u09cd\u09af\u09c7 \u0985\u09cd\u09af\u09be\u09b8\u09bf\u09a8\u0995\u09cd\u09b0\u09cb\u09a8\u09be\u09b8 \u0995\u09ae\u09bf\u0989\u09a8\u09bf\u0995\u09c7\u09b6\u09a8\u09c7\u09b0 \u099c\u09a8\u09cd\u09af RabbitMQ \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u099f\u09be\u09b8\u09cd\u0995 \u098f\u09ac\u0982 \u0987\u0989\u099c\u09be\u09b0 \u09b2\u099c\u09bf\u0995 \u09a6\u09c1\u099f\u09bf \u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8\u09c7 \u09ac\u09bf\u09ad\u0995\u09cd\u09a4 \u0995\u09b0\u09be, Docker \u09a6\u09bf\u09af\u09bc\u09c7 \u0985\u09b0\u09cd\u0995\u09c7\u09b8\u09cd\u099f\u09cd\u09b0\u09c7\u099f\u09c7\u09a1\u0964  </li> </ul>"},{"location":"languages/bn/phase6/#api","title":"\u09aa\u09cd\u09b0\u0995\u09b2\u09cd\u09aa \u09eb: \u098f\u0995\u09cd\u09b8\u099f\u09be\u09b0\u09cd\u09a8\u09be\u09b2 API \u0987\u09a8\u09cd\u099f\u09bf\u0997\u09cd\u09b0\u09c7\u09b6\u09a8","text":"<ul> <li>\u0989\u09a6\u09cd\u09a6\u09c7\u09b6\u09cd\u09af: \u09ab\u09be\u0982\u09b6\u09a8\u09be\u09b2\u09bf\u099f\u09bf \u0989\u09a8\u09cd\u09a8\u09a4 \u0995\u09b0\u09a4\u09c7 \u098f\u0995\u09cd\u09b8\u099f\u09be\u09b0\u09cd\u09a8\u09be\u09b2 API \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0\u0964  </li> <li>\u099f\u09c7\u0995\u09a8\u09cb\u09b2\u099c\u09bf: Spring RestTemplate \u09ac\u09be WebClient, API \u0985\u09a5\u09c7\u09a8\u099f\u09bf\u0995\u09c7\u09b6\u09a8 (\u09af\u09c7\u09ae\u09a8, OAuth2).  </li> <li>\u09ab\u09bf\u099a\u09be\u09b0: \u09aa\u09be\u09ac\u09b2\u09bf\u0995 API-\u098f\u09b0 \u09b8\u09be\u09a5\u09c7 \u0987\u09a8\u09cd\u099f\u09bf\u0997\u09cd\u09b0\u09c7\u09b6\u09a8 (\u09af\u09c7\u09ae\u09a8, SendGrid \u09a6\u09bf\u09af\u09bc\u09c7 \u0987\u09ae\u09c7\u09b2 \u09a8\u09cb\u099f\u09bf\u09ab\u09bf\u0995\u09c7\u09b6\u09a8 \u09aa\u09be\u09a0\u09be\u09a8\u09cb)\u0964  </li> <li>\u0990\u099a\u09cd\u099b\u09bf\u0995: \u099f\u09be\u09b8\u09cd\u0995/\u0987\u0989\u099c\u09be\u09b0 \u09aa\u09c1\u09a8\u09b0\u09c1\u09a6\u09cd\u09a7\u09be\u09b0\u09c7\u09b0 \u099c\u09a8\u09cd\u09af GraphQL query \u09af\u09cb\u0997 \u0995\u09b0\u09be \u098f\u09ac\u0982 MongoDB-\u09a4\u09c7 \u09ae\u09c7\u099f\u09be\u09a1\u09c7\u099f\u09be \u09b8\u0982\u09b0\u0995\u09cd\u09b7\u09a3\u0964  </li> <li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3: \u099f\u09be\u09b8\u09cd\u0995 \u09b8\u09ae\u09cd\u09aa\u09a8\u09cd\u09a8 \u09b9\u0993\u09af\u09bc\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u0987\u09ae\u09c7\u09b2 \u09a8\u09cb\u099f\u09bf\u09ab\u09bf\u0995\u09c7\u09b6\u09a8 \u09af\u09cb\u0997 \u0995\u09b0\u09be\u0964  </li> </ul>"},{"location":"languages/bn/phase6/#_5","title":"\u09aa\u09cb\u09b0\u09cd\u099f\u09ab\u09cb\u09b2\u09bf\u0993\u09b0 \u09b8\u09b0\u09cd\u09ac\u09cb\u09a4\u09cd\u09a4\u09ae \u0985\u09a8\u09c1\u09b6\u09c0\u09b2\u09a8","text":"<ul> <li>Git: \u09aa\u09cd\u09b0\u09a4\u09bf\u099f\u09bf \u09ab\u09bf\u099a\u09be\u09b0\u09c7\u09b0 \u099c\u09a8\u09cd\u09af commit (\u09af\u09c7\u09ae\u09a8, <code>feature/crud</code>, <code>feature/upload</code>), \u09b8\u09cd\u09aa\u09b7\u09cd\u099f \u09ac\u09cd\u09b0\u09be\u099e\u09cd\u099a\u0964  </li> <li>\u09a1\u0995\u09c1\u09ae\u09c7\u09a8\u09cd\u099f\u09c7\u09b6\u09a8: \u09ac\u09b0\u09cd\u09a3\u09a8\u09be, \u09b8\u09c7\u099f\u0986\u09aa, endpoints, \u09a1\u09bf\u09aa\u09cd\u09b2\u09af\u09bc\u09ae\u09c7\u09a8\u09cd\u099f, \u098f\u09ac\u0982 \u09b8\u09cd\u0995\u09cd\u09b0\u09bf\u09a8\u09b6\u099f \u09b8\u09b9 README\u0964  </li> <li>\u09aa\u09cd\u09b0\u0995\u09be\u09b6: \u0993\u09aa\u09c7\u09a8-\u09b8\u09cb\u09b0\u09cd\u09b8 \u09b2\u09be\u0987\u09b8\u09c7\u09a8\u09cd\u09b8 (\u09af\u09c7\u09ae\u09a8, MIT) \u09b8\u09b9 GitHub-\u098f \u09b9\u09cb\u09b8\u09cd\u099f\u09bf\u0982\u0964  </li> </ul>"},{"location":"languages/bn/phase6/#_6","title":"\u09b0\u09bf\u09b8\u09cb\u09b0\u09cd\u09b8","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/de/phase1/","title":"Phase 1 \u2013 Grundlagen und essenzielles Java (2\u20133 Monate)","text":""},{"location":"languages/de/phase1/#programmierlogik-und-algorithmen","title":"Programmierlogik und Algorithmen","text":"<ul> <li>Problemaufl\u00f6sung</li> <li>\u00dcbungen: Durchschnitt, gerade/ungerade, Sortierung</li> </ul>"},{"location":"languages/de/phase1/#umgebungseinrichtung","title":"Umgebungseinrichtung","text":"<ul> <li>Installation des JDK</li> <li>IDE (IntelliJ oder Eclipse)</li> <li>Basic debugging</li> </ul>"},{"location":"languages/de/phase1/#grundlegende-java-syntax","title":"Grundlegende Java-Syntax","text":"<ul> <li>Programmstruktur (class, main)</li> <li>Namenskonventionen</li> <li>Kommentare</li> </ul>"},{"location":"languages/de/phase1/#datentypen-und-variablen","title":"Datentypen und Variablen","text":"<ul> <li>Primitive und nicht-primitive Typen</li> <li>Deklaration, Initialisierung, Konstanten</li> <li>Casting und Vergleich (<code>==</code> vs <code>.equals()</code>)</li> </ul>"},{"location":"languages/de/phase1/#eingabe-und-ausgabe","title":"Eingabe und Ausgabe","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/de/phase1/#kontrollstrukturen","title":"Kontrollstrukturen","text":"<ul> <li>if, else if, else, switch</li> <li>Logische und relationale Operatoren</li> </ul>"},{"location":"languages/de/phase1/#schleifen","title":"Schleifen","text":"<ul> <li>for, while, do-while</li> <li>break, continue, verschachtelte Schleifen</li> </ul>"},{"location":"languages/de/phase1/#methoden-und-gultigkeitsbereich","title":"Methoden und G\u00fcltigkeitsbereich","text":"<ul> <li>Deklaration, Parameter, return</li> <li>Overloading</li> <li>Lokale Variablen und Klassenattribute</li> </ul>"},{"location":"languages/de/phase1/#arrays","title":"Arrays","text":"<ul> <li>Deklaration, Initialisierung und Manipulation</li> <li>Lineare Suche und manuelles Sortieren</li> <li>Arrays.toString() f\u00fcr debugging</li> </ul>"},{"location":"languages/de/phase1/#strings-und-stringbuilder","title":"Strings und StringBuilder","text":"<ul> <li>G\u00e4ngige Methoden</li> <li>Immutability und Performance</li> </ul>"},{"location":"languages/de/phase1/#exceptions","title":"Exceptions","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw und throws</li> <li>Erstellen von benutzerdefinierten Exceptions (z. B. throw new MyException)</li> </ul>"},{"location":"languages/de/phase1/#essenzielle-werkzeuge","title":"Essenzielle Werkzeuge","text":"<ul> <li>Terminal: cd, ls, mkdir</li> <li>Git: init, add, commit, push, pull, branch, merge</li> <li>GitHub: Erstellen von Repositories, Pull Requests, Klonen</li> </ul>"},{"location":"languages/de/phase1/#abschlussprojekte","title":"Abschlussprojekte","text":"<ul> <li>Einfacher Taschenrechner und ein Task Manager</li> <li>Anforderungen:</li> <li>Git verwenden</li> <li>Auf GitHub ver\u00f6ffentlichen</li> <li>Erkl\u00e4rendes README</li> </ul>"},{"location":"languages/de/phase1/#ressourcen","title":"Ressourcen","text":"<ul> <li>MOOC von der Universit\u00e4t Helsinki</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/de/phase2/","title":"Phase 2 \u2013 Objektorientierte Programmierung (2\u20133 Monate)","text":""},{"location":"languages/de/phase2/#klassen-objekte-attribute-und-methoden","title":"Klassen, Objekte, Attribute und Methoden","text":"<ul> <li>Klassenstruktur</li> <li>Objektinstanziierung</li> <li>Verwendung von this</li> <li>Best Practices: Namensgebung, Code-Organisation</li> </ul>"},{"location":"languages/de/phase2/#encapsulation-vererbung-polymorphismus-und-abstraktion","title":"Encapsulation, Vererbung, Polymorphismus und Abstraktion","text":"<ul> <li>Encapsulation: private, getters/setters, Validierung</li> <li>Inheritance: extends, overriding (@Override)</li> <li>Polymorphism: Subtyp, method overloading</li> <li>Abstraction: \u00dcberblick, Vorbereitung auf Interfaces und abstrakte Klassen</li> </ul>"},{"location":"languages/de/phase2/#interfaces-und-abstrakte-klassen","title":"Interfaces und abstrakte Klassen","text":"<ul> <li>Interfaces: implements, default methods</li> <li>Abstract classes: abstrakte und konkrete Methoden</li> <li>Unterschiede zwischen Interface und abstrakter Klasse</li> </ul>"},{"location":"languages/de/phase2/#konstruktoren-initialisierer-und-statische-blocke","title":"Konstruktoren, Initialisierer und statische Bl\u00f6cke","text":"<ul> <li>Standard- und parametrisierte Konstruktoren, Aufrufe mit this()</li> <li>Initialisierungsbl\u00f6cke ({}) und statische Bl\u00f6cke (static {})</li> </ul>"},{"location":"languages/de/phase2/#enumerationen","title":"Enumerationen","text":"<ul> <li>Erstellen und Verwenden von enum</li> <li>Methoden und Attribute in enums</li> </ul>"},{"location":"languages/de/phase2/#grundlegende-collections","title":"Grundlegende Collections","text":"<ul> <li>ArrayList: Hinzuf\u00fcgen, Entfernen, Iteration (for, forEach, Iterator)</li> <li>HashMap: key-value, g\u00e4ngige Operationen</li> <li>HashSet: Entfernung von Duplikaten</li> <li>Einf\u00fchrung in Queue und Stack (z. B. LinkedList als queue/stack)</li> <li>Einf\u00fchrung in das Java Collections Framework</li> </ul>"},{"location":"languages/de/phase2/#grundlegende-algorithmen","title":"Grundlegende Algorithmen","text":"<ul> <li>Lineare und bin\u00e4re Suche</li> <li>Sorting: Bubble Sort, Collections.sort()</li> <li>Recursion: Konzepte und einfache Beispiele (z. B. Faktorielle, Fibonacci)</li> <li>Einf\u00fchrung in Komplexit\u00e4t (O(n), O(log n))</li> </ul>"},{"location":"languages/de/phase2/#generics","title":"Generics","text":"<ul> <li>Syntax (), generische Collections, generische Methoden <li>Bounds (extends, super)</li>"},{"location":"languages/de/phase2/#stream-api-einfuhrung","title":"Stream API (Einf\u00fchrung)","text":"<ul> <li>Grundlegende Operationen: filter, map, collect</li> <li>Beispiele mit ArrayList</li> </ul>"},{"location":"languages/de/phase2/#unit-testing-einfuhrung","title":"Unit Testing (Einf\u00fchrung)","text":"<ul> <li>Grundlegende Verwendung von JUnit</li> <li>Schreiben von Testf\u00e4llen f\u00fcr Klassen und Methoden</li> <li>Einf\u00fchrung in TDD (Test-Driven Development)</li> </ul>"},{"location":"languages/de/phase2/#abschlussprojekt","title":"Abschlussprojekt","text":"<ul> <li>Bibliothekssystem</li> <li>Klassen: Book, User, Library</li> <li>Vererbung: DigitalBook und PhysicalBook</li> <li>Collections: ArrayList f\u00fcr B\u00fccher, HashMap f\u00fcr Ausleihen</li> <li>Encapsulation: Datenvalidierung</li> <li>Git: Commit pro Feature (z. B. <code>feature/book-management</code>)</li> <li>Ver\u00f6ffentlichung auf GitHub mit erkl\u00e4rendem README</li> </ul>"},{"location":"languages/de/phase2/#aktualisierte-ressourcen","title":"Aktualisierte Ressourcen","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java (Buch)</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/de/phase3/","title":"Phase 3 \u2013 Datenpersistenz und Streams (2\u20133 Monate)","text":""},{"location":"languages/de/phase3/#grundlegendes-sql","title":"Grundlegendes SQL","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Keys: Prim\u00e4r- und Fremdschl\u00fcssel.  </li> <li>Normalisierung: 1NF, 2NF, 3NF.  </li> <li>Beispiel: Erstellen von Tabellen f\u00fcr Produkte und Kategorien.  </li> </ul>"},{"location":"languages/de/phase3/#jdbc-und-connection-pool","title":"JDBC und Connection Pool","text":"<ul> <li>Classes: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>Verwendung von Connection Pool (HikariCP).  </li> <li>Best Practices: <code>try-with-resources</code>, Umgang mit <code>SQLException</code>.  </li> </ul>"},{"location":"languages/de/phase3/#hibernate-jpa-in-der-praxis","title":"Hibernate + JPA in der Praxis","text":"<ul> <li>Annotations: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>Konfiguration: <code>persistence.xml</code> oder <code>application.properties</code>.  </li> <li>CRUD-Operationen mit <code>EntityManager</code>.  </li> <li>Einf\u00fchrung in Datenbankmigrationen mit Flyway oder Liquibase.</li> </ul>"},{"location":"languages/de/phase3/#einfuhrung-in-nosql-datenbanken","title":"Einf\u00fchrung in NoSQL-Datenbanken","text":"<ul> <li>Konzepte: Dokumente, Sammlungen, horizontale Skalierbarkeit.  </li> <li>MongoDB: Einrichtung, CRUD-Operationen mit MongoRepository.  </li> <li>Spring Data MongoDB: Integration mit Spring Boot.  </li> <li>Beispiel: Speichern von Systemaktivit\u00e4tslogs f\u00fcr Produkte in MongoDB.</li> </ul>"},{"location":"languages/de/phase3/#streams-und-lambda-ausdrucke","title":"Streams und Lambda-Ausdr\u00fccke","text":"<ul> <li>Operationen: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>Beispiel: Produkte nach Preis filtern, nach Name sortieren.  </li> </ul>"},{"location":"languages/de/phase3/#optional-und-functional-interfaces","title":"Optional und Functional Interfaces","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>Functional Interfaces: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>Beispiel: Verwendung von <code>Predicate</code> in Streams zum Filtern von Daten.  </li> </ul>"},{"location":"languages/de/phase3/#fortgeschrittene-collections","title":"Fortgeschrittene Collections","text":"<ul> <li>LinkedList: Effizientes Einf\u00fcgen/Entfernen.  </li> <li>TreeMap: Geordnete Key-Value-Paare.  </li> <li>PriorityQueue: Priorit\u00e4tswarteschlange.  </li> <li>LinkedHashMap und Deque (Einf\u00fchrung).  </li> </ul>"},{"location":"languages/de/phase3/#logging-slf4jlogback","title":"Logging (SLF4J/Logback)","text":"<ul> <li>Konfiguration von SLF4J mit Logback.  </li> <li>Level: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>Beispiel: Protokollieren von Hibernate-Queries.  </li> </ul>"},{"location":"languages/de/phase3/#transaktionskonzepte-acid","title":"Transaktionskonzepte (ACID)","text":"<ul> <li>Atomicity, Consistency, Isolation, Durability.  </li> <li>Transaktionen mit JDBC (<code>commit</code>, <code>rollback</code>) und Hibernate (<code>@Transactional</code>).  </li> </ul>"},{"location":"languages/de/phase3/#indizes-und-ausfuhrungsplane","title":"Indizes und Ausf\u00fchrungspl\u00e4ne","text":"<ul> <li>Indexes: Prim\u00e4r, eindeutig, zusammengesetzt.  </li> <li>Verwendung von EXPLAIN zur Optimierung von Queries.  </li> <li>Beispiel: Erstellen eines Index f\u00fcr eine h\u00e4ufig durchsuchte Spalte.  </li> </ul>"},{"location":"languages/de/phase3/#dateimanipulation-optional","title":"Dateimanipulation (optional)","text":"<ul> <li>Lesen und Schreiben mit <code>Files</code>, <code>BufferedReader</code>.  </li> <li>Beispiel: Exportieren eines Produktberichts nach CSV mit Streams.  </li> </ul>"},{"location":"languages/de/phase3/#datenbanktests-einfuhrung","title":"Datenbanktests (Einf\u00fchrung)","text":"<ul> <li>Integrationstests mit H2 und JUnit.  </li> <li>Beispiel: Testen von CRUD-Operationen mit Hibernate.  </li> </ul>"},{"location":"languages/de/phase3/#abschlussprojekt","title":"Abschlussprojekt","text":"<p>Produktmanagementsystem - Datenbank: Product- und Category-Tabellen (1:N-Beziehung). - Java: Klassen mit JPA (<code>Product</code>, <code>Category</code>), CRUD mit Hibernate. - Optional: Speichern von \u00c4nderungslogs f\u00fcr Produkte in MongoDB. - Optional: Speichern dynamischer Produktattribute (z. B. technische Spezifikationen) in MongoDB. - Streams: Filtern/Sortieren von Produkten (z. B. nach Preis oder Kategorie). - Logging: \u00dcberwachung von Datenbankoperationen. - Git: Commit pro Feature (z. B. <code>feature/crud</code>, <code>feature/streams</code>). - Ver\u00f6ffentlichung auf GitHub mit erkl\u00e4rendem README.  </p>"},{"location":"languages/de/phase3/#ressourcen","title":"Ressourcen","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/de/phase4/","title":"Phase 4 \u2013 Frameworks und Webanwendungen (3\u20134 Monate)","text":""},{"location":"languages/de/phase4/#spring-boot-spring-core-und-spring-data-jpa","title":"Spring Boot, Spring Core und Spring Data JPA","text":"<ul> <li>Spring Core: Dependency Injection (<code>@Bean</code>, <code>@Autowired</code>), IoC Container.  </li> <li>Spring Boot: Auto-Configuration, Starters (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>), <code>application.yml</code>.  </li> <li>Spring Data JPA: Repositories (<code>CrudRepository</code>, <code>JpaRepository</code>), Queries mit <code>@Query</code>, Paginierung.  </li> <li>Beispiel: Erstellen von REST Endpoints f\u00fcr die Verwaltung von Aufgaben (CRUD) in einer Task-App.  </li> </ul>"},{"location":"languages/de/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>Konzepte: Authentication, Authorization, Security Filters.  </li> <li>JWT: Erstellen und Validieren von Tokens, Verwendung von <code>JwtAuthenticationFilter</code>.  </li> <li>OAuth2: Konfiguration eines Resource Servers, Integration mit einem Anbieter (z. B. Google).  </li> <li>Beispiel: Sch\u00fctzen von Task Endpoints mit JWT und Rollen (<code>ADMIN</code>, <code>USER</code>).  </li> </ul>"},{"location":"languages/de/phase4/#unit-und-integrationstests","title":"Unit- und Integrationstests","text":"<ul> <li>Unit Tests: JUnit 5, Mockito (<code>@Mock</code>, <code>@InjectMocks</code>), Testen der Business Logic.  </li> <li>Integration Tests: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, H2 Datenbank f\u00fcr Tests.  </li> <li>Testcontainers: Tests mit PostgreSQL in Docker-Containern.  </li> <li>Beispiel: Testen von Services und Endpoints der Task-App.  </li> </ul>"},{"location":"languages/de/phase4/#restful-apis-und-dokumentation-mit-swagger","title":"RESTful APIs und Dokumentation mit Swagger","text":"<ul> <li>REST: HTTP-Methoden, Statuscodes, RESTful Prinzipien.  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>.  </li> <li>Swagger: Konfiguration von springdoc-openapi, Annotation mit <code>@Operation</code>.  </li> <li>Beispiel: Dokumentation der Task-App Endpoints mit Swagger UI.  </li> </ul>"},{"location":"languages/de/phase4/#einfuhrung-in-graphql","title":"Einf\u00fchrung in GraphQL","text":"<ul> <li>Konzepte: Queries, Mutations, Schema.  </li> <li>Spring Boot mit GraphQL: Einrichtung mit spring-boot-starter-graphql.  </li> <li>Beispiel: Erstellen einer GraphQL Query, um Aufgaben nach Status aufzulisten.  </li> </ul>"},{"location":"languages/de/phase4/#grundlegende-frontend-integration","title":"Grundlegende Frontend-Integration","text":"<ul> <li>Thymeleaf: Templates zur Darstellung von HTML-Seiten mit Spring Boot.  </li> <li>Beispiel: Erstellen einer einfachen Web-Oberfl\u00e4che zum Anzeigen und Erstellen von Aufgaben.  </li> </ul>"},{"location":"languages/de/phase4/#build-tools-maven-und-gradle","title":"Build Tools: Maven und Gradle","text":"<ul> <li>Maven: Struktur von <code>pom.xml</code>, Abh\u00e4ngigkeiten, Plugins.  </li> <li>Gradle: <code>build.gradle</code> Datei, Tasks, Dependency Management.  </li> <li>Beispiel: Konfiguration der Task-App mit Maven und Gradle.  </li> </ul>"},{"location":"languages/de/phase4/#projektbereitstellung","title":"Projektbereitstellung","text":"<ul> <li>Plattformen: Railway, Heroku, AWS (Elastic Beanstalk).  </li> <li>Schritte: Verpacken als JAR, Konfiguration von CI/CD mit GitHub Actions.  </li> <li>Beispiel: Bereitstellung der Task-App auf Railway mit PostgreSQL.  </li> </ul>"},{"location":"languages/de/phase4/#abschlussprojekt","title":"Abschlussprojekt","text":"<p>Task-Management-System - Datenbank: <code>Task</code> (Titel, Beschreibung, Status) und <code>User</code> Tabellen (1:N-Beziehung). - Java: REST API mit Spring Boot, Spring Data JPA f\u00fcr CRUD. - Security: JWT Authentication, Rollen (<code>ADMIN</code>, <code>USER</code>). - Tests: Unit Tests (Services) und Integration Tests (Endpoints mit Testcontainers). - Dokumentation: Swagger UI mit Beschreibungen der Endpoints. - Optional: Hinzuf\u00fcgen einer GraphQL Query zum Auflisten von Aufgaben und einer Thymeleaf-Oberfl\u00e4che f\u00fcr Interaktionen. - Git: Commits pro Feature (z. B. <code>feature/rest-api</code>, <code>feature/security</code>). - Ver\u00f6ffentlichung: Auf GitHub mit README (Setup, Endpoints, Bereitstellung).  </p>"},{"location":"languages/de/phase4/#ressourcen","title":"Ressourcen","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/de/phase5/","title":"Phase 5 \u2013 Architektur und Konkurrenz (2\u20133 Monate)","text":""},{"location":"languages/de/phase5/#clean-code-und-solid-prinzipien","title":"Clean Code und SOLID-Prinzipien","text":"<ul> <li>Clean Code: Klare Namensgebung, kurze Funktionen, hilfreiche Kommentare, konsistentes Format.  </li> <li>SOLID:  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>Beispiel: Refaktorisierung eines Services im Task Manager, um SOLID-Prinzipien einzuhalten.  </p>"},{"location":"languages/de/phase5/#design-patterns","title":"Design Patterns","text":"<ul> <li>Patterns: Factory (Erstellung), Singleton (einzelne Instanz), Builder (Objektkonstruktion), Strategy (Verhalten), Observer (Ereignisse).  </li> <li>Anwendung: Auswahl von Patterns, die zum Projektkontext passen.  </li> </ul> <p>Beispiel: Verwendung von Strategy f\u00fcr verschiedene Priorisierungsalgorithmen von Aufgaben.  </p>"},{"location":"languages/de/phase5/#threads-und-konkurrenz","title":"Threads und Konkurrenz","text":"<ul> <li>Konzepte: Thread, Runnable, ExecutorService, ForkJoinPool.  </li> <li>Techniken: Erstellen und Verwalten von Thread-Pools, asynchrone Aufgaben.  </li> </ul> <p>Beispiel: Parallele Verarbeitung von Aufgabenberichten mit ExecutorService.  </p>"},{"location":"languages/de/phase5/#synchronisation-und-konkurrenzprobleme","title":"Synchronisation und Konkurrenzprobleme","text":"<ul> <li>Mechanismen: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>.  </li> <li>Probleme: Deadlock, Race Condition, Starvation.  </li> </ul> <p>Beispiel: Implementierung eines sicheren Zugriffs auf eine gemeinsame Aufgabenliste.  </p>"},{"location":"languages/de/phase5/#einfuhrung-in-microservices","title":"Einf\u00fchrung in Microservices","text":"<ul> <li>Konzepte: Microservices-Architektur, REST-Kommunikation, Service Discovery.  </li> <li>Tools: Spring Cloud (z. B. Eureka f\u00fcr Service Discovery).  </li> </ul> <p>Beispiel: Aufteilung des Task Managers in Microservices (Aufgaben und Benutzer).  </p>"},{"location":"languages/de/phase5/#grundlagen-von-message-queues-optional","title":"Grundlagen von Message Queues (optional)","text":"<ul> <li>Konzepte: Publisher/Subscriber, Queues, Topics.  </li> <li>RabbitMQ: Einrichtung, Senden und Empfangen von Nachrichten.  </li> </ul> <p>Beispiel: Benachrichtigung von Benutzern \u00fcber Aufgabenaktualisierungen via RabbitMQ.  </p>"},{"location":"languages/de/phase5/#performance-optimierung","title":"Performance-Optimierung","text":"<ul> <li>Caching: Spring Cache mit Redis, um Datenbankzugriffe zu reduzieren.  </li> <li>JVM Tuning: Grundlegende Konzepte (Heap, Garbage Collection).  </li> </ul> <p>Beispiel: Implementierung eines Caches f\u00fcr h\u00e4ufige Abfragen im Aufgabensystem.  </p>"},{"location":"languages/de/phase5/#einfuhrung-in-devopscloud-docker-und-cicd","title":"Einf\u00fchrung in DevOps/Cloud: Docker und CI/CD","text":"<ul> <li>Docker: Container, Images, Dockerfile, Docker Compose.  </li> <li>CI/CD: Konfiguration von Pipelines mit GitHub Actions f\u00fcr Build und Deployment.  </li> </ul> <p>Beispiel: Erstellen eines Dockerfile f\u00fcr die Task-App und Deployment via GitHub Actions.  </p>"},{"location":"languages/de/phase5/#observability","title":"Observability","text":"<ul> <li>Tools: Prometheus (Metriken), Grafana (Visualisierung), ELK Stack (Logs).  </li> <li>Konzepte: Performance-\u00dcberwachung, zentralisierte Logs, Alarme.  </li> </ul> <p>Beispiel: \u00dcberwachung der API-Antwortzeit f\u00fcr Aufgaben mit Prometheus und Grafana.  </p>"},{"location":"languages/de/phase5/#sicherheit-owasp-top-ten","title":"Sicherheit: OWASP Top Ten","text":"<ul> <li>Konzepte: Injection, Authentifizierungsfehler, Offenlegung sensibler Daten.  </li> <li>Praktiken: Eingabevalidierung, Sanitization, sichere Konfiguration.  </li> </ul> <p>Beispiel: Schutz der Task-API gegen SQL Injection und XSS.  </p>"},{"location":"languages/de/phase5/#abschlussprojekt","title":"Abschlussprojekt","text":"<p>Fortgeschrittenes Task-Management-System - Backend: Erweiterung der Task-API (Phase 4) mit Microservices (Aufgaben und Benutzer). - Architektur: Refaktorisierung mit Clean Code, SOLID und Design Patterns (z. B. Strategy). - Konkurrenz: Parallele Verarbeitung von Berichten mit ExecutorService. - Optional: Hinzuf\u00fcgen von Kommunikation zwischen Microservices via RabbitMQ und Caching mit Redis f\u00fcr h\u00e4ufige Abfragen. - DevOps: Verpacken in Docker, Konfiguration von CI/CD mit GitHub Actions. - Observability: Hinzuf\u00fcgen von Prometheus und Grafana f\u00fcr Metriken. - Sicherheit: Implementierung von Schutzma\u00dfnahmen gegen OWASP Top Ten. - Git: Commits pro Feature (z. B. <code>feature/microservices</code>, <code>feature/concurrency</code>). - Ver\u00f6ffentlichung: Auf GitHub mit detailliertem README (Setup, Architektur, Deployment).  </p>"},{"location":"languages/de/phase5/#ressourcen","title":"Ressourcen","text":"<ul> <li>The Pragmatic Programmer (Buch)  </li> <li>Effective Java (Buch)  </li> <li>Java Concurrency in Practice (Buch)  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/de/phase6/","title":"Phase 6 \u2013 Abschlussprojekte (laufend)","text":""},{"location":"languages/de/phase6/#projekt-1-vollstandiges-crud-mit-authentifizierung","title":"Projekt 1: Vollst\u00e4ndiges CRUD mit Authentifizierung","text":"<ul> <li>Ziel: Erstellen einer robusten RESTful API mit sicherer Authentifizierung und Tests.  </li> <li>Technologien: Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers.  </li> <li>Features: CRUD f\u00fcr Entit\u00e4ten (z. B. Aufgaben, Benutzer), Authentifizierung mit Rollen (ADMIN, USER), Dokumentation mit Swagger.  </li> <li>Optional: Hinzuf\u00fcgen einer Thymeleaf-Oberfl\u00e4che zum Anzeigen/Verwalten von Aufgaben.  </li> <li>Beispiel: API zur Verwaltung von Projekten (Entit\u00e4ten: <code>Project</code>, <code>Task</code>, <code>User</code>) mit gesch\u00fctzten Endpoints.  </li> </ul>"},{"location":"languages/de/phase6/#projekt-2-datei-upload","title":"Projekt 2: Datei-Upload","text":"<ul> <li>Ziel: Hinzuf\u00fcgen einer Datei-Upload-Funktion zur API aus Projekt 1.  </li> <li>Technologien: Spring Boot (<code>MultipartFile</code>), Amazon S3 oder lokaler Speicher, Dateivalidierung.  </li> <li>Features: Hochladen von Bildern/Dokumenten, die mit Aufgaben verkn\u00fcpft sind, Validierung von Typ/Gr\u00f6\u00dfe.  </li> <li>Beispiel: Erm\u00f6glichen des Hochladens von Anh\u00e4ngen (z. B. PDF, PNG) f\u00fcr Aufgaben in der API.  </li> </ul>"},{"location":"languages/de/phase6/#projekt-3-cloud-bereitstellung","title":"Projekt 3: Cloud-Bereitstellung","text":"<ul> <li>Ziel: Bereitstellung der API auf einer Cloud-Plattform mit CI/CD.  </li> <li>Technologien: Railway, Heroku oder AWS (Elastic Beanstalk), GitHub Actions, Docker.  </li> <li>Features: Verpacken als JAR/Docker, Konfiguration von Umgebungsvariablen, automatisierte Bereitstellung.  </li> <li>Optional: Implementierung von Caching mit Redis zur Optimierung h\u00e4ufiger Abfragen.  </li> <li>Beispiel: Bereitstellung der Projekt-API auf Railway mit PostgreSQL und CI/CD.  </li> </ul>"},{"location":"languages/de/phase6/#projekt-4-microservices","title":"Projekt 4: Microservices","text":"<ul> <li>Ziel: Aufteilung der API aus Projekt 1 in orchestrierte Microservices.  </li> <li>Technologien: Spring Cloud (Eureka, Gateway), Docker Compose, REST f\u00fcr Kommunikation.  </li> <li>Features: Microservices f\u00fcr <code>Tasks</code> und <code>Users</code>, mit Service Discovery.  </li> <li>Optional: Verwendung von RabbitMQ f\u00fcr asynchrone Kommunikation zwischen Microservices.  </li> <li>Beispiel: Trennung der Logik f\u00fcr Aufgaben und Benutzer in zwei Services, orchestriert mit Docker.  </li> </ul>"},{"location":"languages/de/phase6/#projekt-5-integration-externer-apis","title":"Projekt 5: Integration externer APIs","text":"<ul> <li>Ziel: Nutzung einer externen API zur Erweiterung der Funktionalit\u00e4t.  </li> <li>Technologien: Spring RestTemplate oder WebClient, API-Authentifizierung (z. B. OAuth2).  </li> <li>Features: Integration mit einer \u00f6ffentlichen API (z. B. Senden von Benachrichtigungen per E-Mail mit SendGrid).  </li> <li>Optional: Hinzuf\u00fcgen einer GraphQL Query zum Abrufen von Aufgaben/Benutzern und Speichern von Metadaten in MongoDB.  </li> <li>Beispiel: Hinzuf\u00fcgen von E-Mail-Benachrichtigungen bei Abschluss von Aufgaben.  </li> </ul>"},{"location":"languages/de/phase6/#best-practices-fur-das-portfolio","title":"Best Practices f\u00fcr das Portfolio","text":"<ul> <li>Git: Commits pro Feature (z. B. <code>feature/crud</code>, <code>feature/upload</code>), klare Branches.  </li> <li>Dokumentation: README mit Beschreibung, Setup, Endpoints, Bereitstellung und Screenshots.  </li> <li>Ver\u00f6ffentlichung: Hosting auf GitHub mit einer Open-Source-Lizenz (z. B. MIT).  </li> </ul>"},{"location":"languages/de/phase6/#ressourcen","title":"Ressourcen","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/en/phase1/","title":"Phase 1 \u2013 Fundamentals and Essential Java (2\u20133 months)","text":""},{"location":"languages/en/phase1/#programming-logic-and-algorithms","title":"Programming Logic and Algorithms","text":"<ul> <li>Problem decomposition</li> <li>Exercises: average, even/odd, sorting</li> </ul>"},{"location":"languages/en/phase1/#environment-setup","title":"Environment Setup","text":"<ul> <li>Installation of the JDK</li> <li>IDE (IntelliJ or Eclipse)</li> <li>Basic debugging</li> </ul>"},{"location":"languages/en/phase1/#basic-java-syntax","title":"Basic Java Syntax","text":"<ul> <li>Program structure (class, main)</li> <li>Naming conventions</li> <li>Comments</li> </ul>"},{"location":"languages/en/phase1/#data-types-and-variables","title":"Data Types and Variables","text":"<ul> <li>Primitive and non-primitive types</li> <li>Declaration, initialization, constants</li> <li>Casting and comparison (<code>==</code> vs <code>.equals()</code>)</li> </ul>"},{"location":"languages/en/phase1/#input-and-output","title":"Input and Output","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/en/phase1/#control-structures","title":"Control Structures","text":"<ul> <li>if, else if, else, switch</li> <li>Logical and relational operators</li> </ul>"},{"location":"languages/en/phase1/#loops","title":"Loops","text":"<ul> <li>for, while, do-while</li> <li>break, continue, nested loops</li> </ul>"},{"location":"languages/en/phase1/#methods-and-scope","title":"Methods and Scope","text":"<ul> <li>Declaration, parameters, return</li> <li>Overloading</li> <li>Local variables and class attributes</li> </ul>"},{"location":"languages/en/phase1/#arrays","title":"Arrays","text":"<ul> <li>Declaration, initialization, and manipulation</li> <li>Linear search and manual sorting</li> <li>Arrays.toString() for debugging</li> </ul>"},{"location":"languages/en/phase1/#strings-and-stringbuilder","title":"Strings and StringBuilder","text":"<ul> <li>Common methods</li> <li>Immutability and performance</li> </ul>"},{"location":"languages/en/phase1/#exceptions","title":"Exceptions","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw and throws</li> <li>Creating custom exceptions (e.g., throw new MyException)</li> </ul>"},{"location":"languages/en/phase1/#essential-tools","title":"Essential Tools","text":"<ul> <li>Terminal: cd, ls, mkdir</li> <li>Git: init, add, commit, push, pull, branch, merge</li> <li>GitHub: creating repositories, pull requests, cloning</li> </ul>"},{"location":"languages/en/phase1/#final-projects","title":"Final Projects","text":"<ul> <li>Simple calculator and a Task manager</li> <li>Requirements:</li> <li>Use Git</li> <li>Publish on GitHub</li> <li>Explanatory README</li> </ul>"},{"location":"languages/en/phase1/#resources","title":"Resources","text":"<ul> <li>MOOC from the University of Helsinki</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/en/phase2/","title":"Phase 2 \u2013 Object-Oriented Programming (2\u20133 months)","text":""},{"location":"languages/en/phase2/#classes-objects-attributes-and-methods","title":"Classes, Objects, Attributes, and Methods","text":"<ul> <li>Class structure</li> <li>Object instantiation</li> <li>Use of this</li> <li>Best practices: naming, code organization</li> </ul>"},{"location":"languages/en/phase2/#encapsulation-inheritance-polymorphism-and-abstraction","title":"Encapsulation, Inheritance, Polymorphism, and Abstraction","text":"<ul> <li>Encapsulation: private, getters/setters, validation</li> <li>Inheritance: extends, overriding (@Override)</li> <li>Polymorphism: Subtype, method overloading</li> <li>Abstraction: overview, preparation for interfaces and abstract classes</li> </ul>"},{"location":"languages/en/phase2/#interfaces-and-abstract-classes","title":"Interfaces and Abstract Classes","text":"<ul> <li>Interfaces: implements, default methods</li> <li>Abstract classes: abstract and concrete methods</li> <li>Differences between interface and abstract class</li> </ul>"},{"location":"languages/en/phase2/#constructors-initializers-and-static-blocks","title":"Constructors, Initializers, and Static Blocks","text":"<ul> <li>Default and parameterized constructors, calls with this()</li> <li>Initialization blocks ({}) and static blocks (static {})</li> </ul>"},{"location":"languages/en/phase2/#enumerations","title":"Enumerations","text":"<ul> <li>Creating and using enum</li> <li>Methods and attributes in enums</li> </ul>"},{"location":"languages/en/phase2/#basic-collections","title":"Basic Collections","text":"<ul> <li>ArrayList: addition, removal, iteration (for, forEach, Iterator)</li> <li>HashMap: key-value, common operations</li> <li>HashSet: duplicate elimination</li> <li>Introduction to Queue and Stack (e.g., LinkedList as queue/stack)</li> <li>Introduction to Java Collections Framework</li> </ul>"},{"location":"languages/en/phase2/#basic-algorithms","title":"Basic Algorithms","text":"<ul> <li>Linear and binary search</li> <li>Sorting: Bubble Sort, Collections.sort()</li> <li>Recursion: concepts and simple examples (e.g., factorial, Fibonacci)</li> <li>Introduction to complexity (O(n), O(log n))</li> </ul>"},{"location":"languages/en/phase2/#generics","title":"Generics","text":"<ul> <li>Syntax (), generic collections, generic methods <li>Bounds (extends, super)</li>"},{"location":"languages/en/phase2/#stream-api-introduction","title":"Stream API (Introduction)","text":"<ul> <li>Basic operations: filter, map, collect</li> <li>Examples with ArrayList</li> </ul>"},{"location":"languages/en/phase2/#unit-testing-introduction","title":"Unit Testing (Introduction)","text":"<ul> <li>Basic use of JUnit</li> <li>Writing test cases for classes and methods</li> <li>Introduction to TDD (Test-Driven Development)</li> </ul>"},{"location":"languages/en/phase2/#final-project","title":"Final Project","text":"<ul> <li>Library System</li> <li>Classes: Book, User, Library</li> <li>Inheritance: DigitalBook and PhysicalBook</li> <li>Collections: ArrayList for books, HashMap for loans</li> <li>Encapsulation: data validation</li> <li>Git: commit per feature (e.g., <code>feature/book-management</code>)</li> <li>Publish on GitHub with explanatory README</li> </ul>"},{"location":"languages/en/phase2/#updated-resources","title":"Updated Resources","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java (Book)</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/en/phase3/","title":"Phase 3 \u2013 Data Persistence and Streams (2\u20133 months)","text":""},{"location":"languages/en/phase3/#basic-sql","title":"Basic SQL","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Keys: primary and foreign keys.  </li> <li>Normalization: 1NF, 2NF, 3NF.  </li> <li>Example: create tables for products and categories.  </li> </ul>"},{"location":"languages/en/phase3/#jdbc-and-connection-pool","title":"JDBC and Connection Pool","text":"<ul> <li>Classes: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>Use of Connection Pool (HikariCP).  </li> <li>Best practices: <code>try-with-resources</code>, handling of <code>SQLException</code>.  </li> </ul>"},{"location":"languages/en/phase3/#hibernate-jpa-in-practice","title":"Hibernate + JPA in Practice","text":"<ul> <li>Annotations: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>Configuration: <code>persistence.xml</code> or <code>application.properties</code>.  </li> <li>CRUD operations with <code>EntityManager</code>.  </li> <li>Introduction to database migrations with Flyway or Liquibase.</li> </ul>"},{"location":"languages/en/phase3/#introduction-to-nosql-databases","title":"Introduction to NoSQL Databases","text":"<ul> <li>Concepts: documents, collections, horizontal scalability.  </li> <li>MongoDB: setup, CRUD operations with MongoRepository.  </li> <li>Spring Data MongoDB: integration with Spring Boot.  </li> <li>Example: store system activity logs for products in MongoDB.</li> </ul>"},{"location":"languages/en/phase3/#streams-and-lambda-expressions","title":"Streams and Lambda Expressions","text":"<ul> <li>Operations: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>Example: filter products by price, sort by name.  </li> </ul>"},{"location":"languages/en/phase3/#optional-and-functional-interfaces","title":"Optional and Functional Interfaces","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>Functional interfaces: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>Example: use <code>Predicate</code> in Streams to filter data.  </li> </ul>"},{"location":"languages/en/phase3/#advanced-collections","title":"Advanced Collections","text":"<ul> <li>LinkedList: efficient insertion/removal.  </li> <li>TreeMap: ordered key-value pairs.  </li> <li>PriorityQueue: priority queue.  </li> <li>LinkedHashMap and Deque (introduction).  </li> </ul>"},{"location":"languages/en/phase3/#logging-slf4jlogback","title":"Logging (SLF4J/Logback)","text":"<ul> <li>Configuration of SLF4J with Logback.  </li> <li>Levels: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>Example: log Hibernate queries.  </li> </ul>"},{"location":"languages/en/phase3/#transaction-concepts-acid","title":"Transaction Concepts (ACID)","text":"<ul> <li>Atomicity, Consistency, Isolation, Durability.  </li> <li>Transactions with JDBC (<code>commit</code>, <code>rollback</code>) and Hibernate (<code>@Transactional</code>).  </li> </ul>"},{"location":"languages/en/phase3/#indexes-and-execution-plans","title":"Indexes and Execution Plans","text":"<ul> <li>Indexes: primary, unique, composite.  </li> <li>Use of EXPLAIN to optimize queries.  </li> <li>Example: create an index on a frequently searched column.  </li> </ul>"},{"location":"languages/en/phase3/#file-manipulation-optional","title":"File Manipulation (Optional)","text":"<ul> <li>Reading and writing with <code>Files</code>, <code>BufferedReader</code>.  </li> <li>Example: export product report to CSV using Streams.  </li> </ul>"},{"location":"languages/en/phase3/#database-testing-introduction","title":"Database Testing (Introduction)","text":"<ul> <li>Integration tests with H2 and JUnit.  </li> <li>Example: test CRUD operations with Hibernate.  </li> </ul>"},{"location":"languages/en/phase3/#final-project","title":"Final Project","text":"<p>Product Management System - Database: Product and Category tables (1:N relationship). - Java: classes with JPA (<code>Product</code>, <code>Category</code>), CRUD with Hibernate. - Optional: store product change logs in MongoDB. - Optional: store dynamic product attributes (e.g., technical specifications) in MongoDB. - Streams: filter/sort products (e.g., by price or category). - Logging: monitor database operations. - Git: commit per feature (e.g., <code>feature/crud</code>, <code>feature/streams</code>). - Publish on GitHub with explanatory README.  </p>"},{"location":"languages/en/phase3/#resources","title":"Resources","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/en/phase4/","title":"Phase 4 \u2013 Frameworks and Web Applications (3\u20134 months)","text":""},{"location":"languages/en/phase4/#spring-boot-spring-core-and-spring-data-jpa","title":"Spring Boot, Spring Core, and Spring Data JPA","text":"<ul> <li>Spring Core: Dependency injection (<code>@Bean</code>, <code>@Autowired</code>), IoC container.  </li> <li>Spring Boot: Auto-configuration, starters (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>), <code>application.yml</code>.  </li> <li>Spring Data JPA: Repositories (<code>CrudRepository</code>, <code>JpaRepository</code>), queries with <code>@Query</code>, pagination.  </li> <li>Example: Create REST endpoints for managing tasks (CRUD) in a task app.  </li> </ul>"},{"location":"languages/en/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>Concepts: Authentication, authorization, security filters.  </li> <li>JWT: Create and validate tokens, use <code>JwtAuthenticationFilter</code>.  </li> <li>OAuth2: Configure Resource Server, integrate with a provider (e.g., Google).  </li> <li>Example: Protect task endpoints with JWT and roles (<code>ADMIN</code>, <code>USER</code>).  </li> </ul>"},{"location":"languages/en/phase4/#unit-and-integration-testing","title":"Unit and Integration Testing","text":"<ul> <li>Unit tests: JUnit 5, Mockito (<code>@Mock</code>, <code>@InjectMocks</code>), test business logic.  </li> <li>Integration tests: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, H2 database for testing.  </li> <li>Testcontainers: Test with PostgreSQL in Docker containers.  </li> <li>Example: Test services and endpoints of the task app.  </li> </ul>"},{"location":"languages/en/phase4/#restful-apis-and-documentation-with-swagger","title":"RESTful APIs and Documentation with Swagger","text":"<ul> <li>REST: HTTP methods, status codes, RESTful principles.  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>.  </li> <li>Swagger: Configure springdoc-openapi, annotate with <code>@Operation</code>.  </li> <li>Example: Document task app endpoints with Swagger UI.  </li> </ul>"},{"location":"languages/en/phase4/#introduction-to-graphql","title":"Introduction to GraphQL","text":"<ul> <li>Concepts: Queries, mutations, schema.  </li> <li>Spring Boot with GraphQL: Setup with spring-boot-starter-graphql.  </li> <li>Example: Create a GraphQL query to list tasks by status.  </li> </ul>"},{"location":"languages/en/phase4/#basic-frontend-integration","title":"Basic Frontend Integration","text":"<ul> <li>Thymeleaf: Templates for rendering HTML pages with Spring Boot.  </li> <li>Example: Create a simple web interface to view and create tasks.  </li> </ul>"},{"location":"languages/en/phase4/#build-tools-maven-and-gradle","title":"Build Tools: Maven and Gradle","text":"<ul> <li>Maven: Structure of <code>pom.xml</code>, dependencies, plugins.  </li> <li>Gradle: <code>build.gradle</code> file, tasks, dependency management.  </li> <li>Example: Configure the task app with Maven and Gradle.  </li> </ul>"},{"location":"languages/en/phase4/#project-deployment","title":"Project Deployment","text":"<ul> <li>Platforms: Railway, Heroku, AWS (Elastic Beanstalk).  </li> <li>Steps: Package as JAR, configure CI/CD with GitHub Actions.  </li> <li>Example: Deploy the task app on Railway with PostgreSQL.  </li> </ul>"},{"location":"languages/en/phase4/#final-project","title":"Final Project","text":"<p>Task Management System - Database: <code>Task</code> (title, description, status) and <code>User</code> tables (1:N relationship). - Java: REST API with Spring Boot, Spring Data JPA for CRUD. - Security: JWT authentication, roles (<code>ADMIN</code>, <code>USER</code>). - Tests: Unit tests (services) and integration tests (endpoints with Testcontainers). - Documentation: Swagger UI with endpoint descriptions. - Optional: Add a GraphQL query to list tasks and a Thymeleaf interface for interaction. - Git: Commits per feature (e.g., <code>feature/rest-api</code>, <code>feature/security</code>). - Publish: On GitHub with README (setup, endpoints, deployment).  </p>"},{"location":"languages/en/phase4/#resources","title":"Resources","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/en/phase5/","title":"Phase 5 \u2013 Architecture and Concurrency (2\u20133 months)","text":""},{"location":"languages/en/phase5/#clean-code-and-solid-principles","title":"Clean Code and SOLID Principles","text":"<ul> <li>Clean Code: Clear naming, short functions, helpful comments, consistent formatting.  </li> <li>SOLID:  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>Example: Refactor a service in the Task Manager to follow SOLID principles.  </p>"},{"location":"languages/en/phase5/#design-patterns","title":"Design Patterns","text":"<ul> <li>Patterns: Factory (creation), Singleton (single instance), Builder (object construction), Strategy (behavior), Observer (events).  </li> <li>Application: Choose patterns suitable for the project context.  </li> </ul> <p>Example: Use Strategy for different task prioritization algorithms.  </p>"},{"location":"languages/en/phase5/#threads-and-concurrency","title":"Threads and Concurrency","text":"<ul> <li>Concepts: Thread, Runnable, ExecutorService, ForkJoinPool.  </li> <li>Techniques: Create and manage thread pools, asynchronous tasks.  </li> </ul> <p>Example: Process task reports in parallel with ExecutorService.  </p>"},{"location":"languages/en/phase5/#synchronization-and-concurrency-issues","title":"Synchronization and Concurrency Issues","text":"<ul> <li>Mechanisms: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>.  </li> <li>Issues: Deadlock, race condition, starvation.  </li> </ul> <p>Example: Implement safe access to a shared task list.  </p>"},{"location":"languages/en/phase5/#introduction-to-microservices","title":"Introduction to Microservices","text":"<ul> <li>Concepts: Microservices architecture, REST communication, service discovery.  </li> <li>Tools: Spring Cloud (e.g., Eureka for service discovery).  </li> </ul> <p>Example: Split the Task Manager into microservices (tasks and users).  </p>"},{"location":"languages/en/phase5/#message-queue-fundamentals-optional","title":"Message Queue Fundamentals (Optional)","text":"<ul> <li>Concepts: Publisher/subscriber, queues, topics.  </li> <li>RabbitMQ: Setup, sending and consuming messages.  </li> </ul> <p>Example: Notify users about task updates via RabbitMQ.  </p>"},{"location":"languages/en/phase5/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Caching: Spring Cache with Redis to reduce database access.  </li> <li>JVM Tuning: Basic concepts (heap, garbage collection).  </li> </ul> <p>Example: Implement cache for frequent queries in the task system.  </p>"},{"location":"languages/en/phase5/#introduction-to-devopscloud-docker-and-cicd","title":"Introduction to DevOps/Cloud: Docker and CI/CD","text":"<ul> <li>Docker: Containers, images, Dockerfile, Docker Compose.  </li> <li>CI/CD: Configure pipelines with GitHub Actions for build and deploy.  </li> </ul> <p>Example: Create a Dockerfile for the task app and deploy via GitHub Actions.  </p>"},{"location":"languages/en/phase5/#observability","title":"Observability","text":"<ul> <li>Tools: Prometheus (metrics), Grafana (visualization), ELK Stack (logs).  </li> <li>Concepts: Performance monitoring, centralized logs, alerts.  </li> </ul> <p>Example: Monitor API response time for tasks with Prometheus and Grafana.  </p>"},{"location":"languages/en/phase5/#security-owasp-top-ten","title":"Security: OWASP Top Ten","text":"<ul> <li>Concepts: Injection, authentication failures, sensitive data exposure.  </li> <li>Practices: Input validation, sanitization, secure configuration.  </li> </ul> <p>Example: Protect the task API against SQL injection and XSS.  </p>"},{"location":"languages/en/phase5/#final-project","title":"Final Project","text":"<p>Advanced Task Management System - Backend: Enhance the task API (Phase 4) with microservices (tasks and users). - Architecture: Refactor with Clean Code, SOLID, and design patterns (e.g., Strategy). - Concurrency: Process reports in parallel with ExecutorService. - Optional: Add communication between microservices via RabbitMQ and caching with Redis for frequent queries. - DevOps: Package in Docker, configure CI/CD with GitHub Actions. - Observability: Add Prometheus and Grafana for metrics. - Security: Implement protections against OWASP Top Ten. - Git: Commits per feature (e.g., <code>feature/microservices</code>, <code>feature/concurrency</code>). - Publish: On GitHub with detailed README (setup, architecture, deployment).  </p>"},{"location":"languages/en/phase5/#resources","title":"Resources","text":"<ul> <li>The Pragmatic Programmer (Book)  </li> <li>Effective Java (Book)  </li> <li>Java Concurrency in Practice (Book)  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/en/phase6/","title":"Phase 6 \u2013 Final Projects (Ongoing)","text":""},{"location":"languages/en/phase6/#project-1-complete-crud-with-authentication","title":"Project 1: Complete CRUD with Authentication","text":"<ul> <li>Objective: Build a robust RESTful API with secure authentication and testing.  </li> <li>Technologies: Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers.  </li> <li>Features: CRUD for entities (e.g., tasks, users), authentication with roles (ADMIN, USER), documentation with Swagger.  </li> <li>Optional: Add a Thymeleaf interface to view/manage tasks.  </li> <li>Example: API to manage projects (entities: <code>Project</code>, <code>Task</code>, <code>User</code>) with protected endpoints.  </li> </ul>"},{"location":"languages/en/phase6/#project-2-file-upload","title":"Project 2: File Upload","text":"<ul> <li>Objective: Add file upload functionality to the API from Project 1.  </li> <li>Technologies: Spring Boot (<code>MultipartFile</code>), Amazon S3 or local storage, file validation.  </li> <li>Features: Upload images/documents associated with tasks, validate type/size.  </li> <li>Example: Allow uploading attachments (e.g., PDF, PNG) for tasks in the API.  </li> </ul>"},{"location":"languages/en/phase6/#project-3-cloud-deployment","title":"Project 3: Cloud Deployment","text":"<ul> <li>Objective: Deploy the API to a cloud platform with CI/CD.  </li> <li>Technologies: Railway, Heroku, or AWS (Elastic Beanstalk), GitHub Actions, Docker.  </li> <li>Features: Package as JAR/Docker, configure environment variables, automate deployment.  </li> <li>Optional: Implement caching with Redis to optimize frequent queries.  </li> <li>Example: Deploy the project API on Railway with PostgreSQL and CI/CD.  </li> </ul>"},{"location":"languages/en/phase6/#project-4-microservices","title":"Project 4: Microservices","text":"<ul> <li>Objective: Split the API from Project 1 into orchestrated microservices.  </li> <li>Technologies: Spring Cloud (Eureka, Gateway), Docker Compose, REST for communication.  </li> <li>Features: Microservices for <code>Tasks</code> and <code>Users</code>, with service discovery.  </li> <li>Optional: Use RabbitMQ for asynchronous communication between microservices.  </li> <li>Example: Separate task and user logic into two services, orchestrated with Docker.  </li> </ul>"},{"location":"languages/en/phase6/#project-5-external-api-integration","title":"Project 5: External API Integration","text":"<ul> <li>Objective: Consume an external API to enhance functionality.  </li> <li>Technologies: Spring RestTemplate or WebClient, API authentication (e.g., OAuth2).  </li> <li>Features: Integrate with a public API (e.g., send notifications via email with SendGrid).  </li> <li>Optional: Add a GraphQL query to retrieve tasks/users and store metadata in MongoDB.  </li> <li>Example: Add email notifications for task completion.  </li> </ul>"},{"location":"languages/en/phase6/#portfolio-best-practices","title":"Portfolio Best Practices","text":"<ul> <li>Git: Commits per feature (e.g., <code>feature/crud</code>, <code>feature/upload</code>), clear branches.  </li> <li>Documentation: README with description, setup, endpoints, deployment, and screenshots.  </li> <li>Publish: Host on GitHub with an open-source license (e.g., MIT).  </li> </ul>"},{"location":"languages/en/phase6/#resources","title":"Resources","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/es/phase1/","title":"Fase 1 \u2013 Fundamentos y Java Esencial (2\u20133 meses)","text":""},{"location":"languages/es/phase1/#logica-de-programacion-y-algoritmos","title":"L\u00f3gica de Programaci\u00f3n y Algoritmos","text":"<ul> <li>Descomposici\u00f3n de problemas</li> <li>Ejercicios: promedio, par/impar, ordenaci\u00f3n</li> </ul>"},{"location":"languages/es/phase1/#configuracion-del-entorno","title":"Configuraci\u00f3n del Entorno","text":"<ul> <li>Instalaci\u00f3n del JDK</li> <li>IDE (IntelliJ o Eclipse)</li> <li>Debugging b\u00e1sico</li> </ul>"},{"location":"languages/es/phase1/#sintaxis-basica-de-java","title":"Sintaxis B\u00e1sica de Java","text":"<ul> <li>Estructura de un programa (class, main)</li> <li>Convenciones de nomenclatura</li> <li>Comentarios</li> </ul>"},{"location":"languages/es/phase1/#tipos-de-datos-y-variables","title":"Tipos de Datos y Variables","text":"<ul> <li>Tipos primitivos y no primitivos</li> <li>Declaraci\u00f3n, inicializaci\u00f3n, constantes</li> <li>Casting y comparaci\u00f3n (<code>==</code> vs <code>.equals()</code>)</li> </ul>"},{"location":"languages/es/phase1/#entrada-y-salida","title":"Entrada y Salida","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/es/phase1/#estructuras-de-control","title":"Estructuras de Control","text":"<ul> <li>if, else if, else, switch</li> <li>Operadores l\u00f3gicos y relacionales</li> </ul>"},{"location":"languages/es/phase1/#bucles","title":"Bucles","text":"<ul> <li>for, while, do-while</li> <li>break, continue, bucles anidados</li> </ul>"},{"location":"languages/es/phase1/#metodos-y-alcance","title":"M\u00e9todos y Alcance","text":"<ul> <li>Declaraci\u00f3n, par\u00e1metros, return</li> <li>Overloading</li> <li>Variables locales y atributos de clase</li> </ul>"},{"location":"languages/es/phase1/#arrays","title":"Arrays","text":"<ul> <li>Declaraci\u00f3n, inicializaci\u00f3n y manipulaci\u00f3n</li> <li>B\u00fasqueda lineal y ordenaci\u00f3n manual</li> <li>Arrays.toString() para debugging</li> </ul>"},{"location":"languages/es/phase1/#strings-y-stringbuilder","title":"Strings y StringBuilder","text":"<ul> <li>M\u00e9todos comunes</li> <li>Imutabilidad y rendimiento</li> </ul>"},{"location":"languages/es/phase1/#excepciones","title":"Excepciones","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw y throws</li> <li>Creaci\u00f3n de excepciones personalizadas (por ejemplo, throw new MyException)</li> </ul>"},{"location":"languages/es/phase1/#herramientas-esenciales","title":"Herramientas Esenciales","text":"<ul> <li>Terminal: cd, ls, mkdir</li> <li>Git: init, add, commit, push, pull, branch, merge</li> <li>GitHub: creaci\u00f3n de repositorios, pull requests, clonaci\u00f3n</li> </ul>"},{"location":"languages/es/phase1/#proyectos-finales","title":"Proyectos Finales","text":"<ul> <li>Calculadora simple y un Gestor de tareas</li> <li>Requisitos:</li> <li>Usar Git</li> <li>Publicar en GitHub</li> <li>README explicativo</li> </ul>"},{"location":"languages/es/phase1/#recursos","title":"Recursos","text":"<ul> <li>MOOC de la Universidad de Helsinki</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/es/phase2/","title":"Fase 2 \u2013 Programaci\u00f3n Orientada a Objetos (2\u20133 meses)","text":""},{"location":"languages/es/phase2/#clases-objetos-atributos-y-metodos","title":"Clases, Objetos, Atributos y M\u00e9todos","text":"<ul> <li>Estructura de clases</li> <li>Instanciaci\u00f3n de objetos</li> <li>Uso de this</li> <li>Mejores pr\u00e1cticas: nomenclatura, organizaci\u00f3n de c\u00f3digo</li> </ul>"},{"location":"languages/es/phase2/#encapsulacion-herencia-polimorfismo-y-abstraccion","title":"Encapsulaci\u00f3n, Herencia, Polimorfismo y Abstracci\u00f3n","text":"<ul> <li>Encapsulation: private, getters/setters, validaci\u00f3n</li> <li>Inheritance: extends, overriding (@Override)</li> <li>Polymorphism: Subtipo, method overloading</li> <li>Abstraction: visi\u00f3n general, preparaci\u00f3n para interfaces y clases abstractas</li> </ul>"},{"location":"languages/es/phase2/#interfaces-y-clases-abstractas","title":"Interfaces y Clases Abstractas","text":"<ul> <li>Interfaces: implements, default methods</li> <li>Abstract classes: m\u00e9todos abstractos y concretos</li> <li>Diferencias entre interface y abstract class</li> </ul>"},{"location":"languages/es/phase2/#constructores-inicializadores-y-bloques-estaticos","title":"Constructores, Inicializadores y Bloques Est\u00e1ticos","text":"<ul> <li>Constructores por defecto y parametrizados, llamadas con this()</li> <li>Bloques de inicializaci\u00f3n ({}) y bloques est\u00e1ticos (static {})</li> </ul>"},{"location":"languages/es/phase2/#enumeraciones","title":"Enumeraciones","text":"<ul> <li>Creaci\u00f3n y uso de enum</li> <li>M\u00e9todos y atributos en enums</li> </ul>"},{"location":"languages/es/phase2/#colecciones-basicas","title":"Colecciones B\u00e1sicas","text":"<ul> <li>ArrayList: adici\u00f3n, eliminaci\u00f3n, iteraci\u00f3n (for, forEach, Iterator)</li> <li>HashMap: clave-valor, operaciones comunes</li> <li>HashSet: eliminaci\u00f3n de duplicados</li> <li>Introducci\u00f3n a Queue y Stack (por ejemplo, LinkedList como queue/stack)</li> <li>Introducci\u00f3n al Java Collections Framework</li> </ul>"},{"location":"languages/es/phase2/#algoritmos-basicos","title":"Algoritmos B\u00e1sicos","text":"<ul> <li>B\u00fasqueda lineal y binaria</li> <li>Sorting: Bubble Sort, Collections.sort()</li> <li>Recursion: conceptos y ejemplos simples (por ejemplo, factorial, Fibonacci)</li> <li>Introducci\u00f3n a la complejidad (O(n), O(log n))</li> </ul>"},{"location":"languages/es/phase2/#generics","title":"Generics","text":"<ul> <li>Sintaxis (), colecciones gen\u00e9ricas, m\u00e9todos gen\u00e9ricos <li>L\u00edmites (extends, super)</li>"},{"location":"languages/es/phase2/#stream-api-introduccion","title":"Stream API (Introducci\u00f3n)","text":"<ul> <li>Operaciones b\u00e1sicas: filter, map, collect</li> <li>Ejemplos con ArrayList</li> </ul>"},{"location":"languages/es/phase2/#pruebas-unitarias-introduccion","title":"Pruebas Unitarias (Introducci\u00f3n)","text":"<ul> <li>Uso b\u00e1sico de JUnit</li> <li>Escribir casos de prueba para clases y m\u00e9todos</li> <li>Introducci\u00f3n a TDD (Test-Driven Development)</li> </ul>"},{"location":"languages/es/phase2/#proyecto-final","title":"Proyecto Final","text":"<ul> <li>Sistema de Biblioteca</li> <li>Clases: Book, User, Library</li> <li>Herencia: DigitalBook y PhysicalBook</li> <li>Colecciones: ArrayList para libros, HashMap para pr\u00e9stamos</li> <li>Encapsulaci\u00f3n: validaci\u00f3n de datos</li> <li>Git: commit por funcionalidad (por ejemplo, <code>feature/book-management</code>)</li> <li>Publicar en GitHub con README explicativo</li> </ul>"},{"location":"languages/es/phase2/#recursos-actualizados","title":"Recursos Actualizados","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java (Libro)</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/es/phase3/","title":"Fase 3 \u2013 Persistencia de Datos y Streams (2\u20133 meses)","text":""},{"location":"languages/es/phase3/#sql-basico","title":"SQL B\u00e1sico","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Keys: claves primarias y for\u00e1neas.  </li> <li>Normalization: 1NF, 2NF, 3NF.  </li> <li>Ejemplo: crear tablas para productos y categor\u00edas.  </li> </ul>"},{"location":"languages/es/phase3/#jdbc-y-connection-pool","title":"JDBC y Connection Pool","text":"<ul> <li>Classes: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>Uso de Connection Pool (HikariCP).  </li> <li>Mejores pr\u00e1cticas: <code>try-with-resources</code>, manejo de <code>SQLException</code>.  </li> </ul>"},{"location":"languages/es/phase3/#hibernate-jpa-en-la-practica","title":"Hibernate + JPA en la Pr\u00e1ctica","text":"<ul> <li>Annotations: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>Configuration: <code>persistence.xml</code> o <code>application.properties</code>.  </li> <li>Operaciones CRUD con <code>EntityManager</code>.  </li> <li>Introducci\u00f3n a migraciones de base de datos con Flyway o Liquibase.</li> </ul>"},{"location":"languages/es/phase3/#introduccion-a-bases-de-datos-nosql","title":"Introducci\u00f3n a Bases de Datos NoSQL","text":"<ul> <li>Conceptos: documentos, colecciones, escalabilidad horizontal.  </li> <li>MongoDB: configuraci\u00f3n, operaciones CRUD con MongoRepository.  </li> <li>Spring Data MongoDB: integraci\u00f3n con Spring Boot.  </li> <li>Ejemplo: almacenar logs de actividad del sistema para productos en MongoDB.</li> </ul>"},{"location":"languages/es/phase3/#streams-y-lambda-expressions","title":"Streams y Lambda Expressions","text":"<ul> <li>Operaciones: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>Ejemplo: filtrar productos por precio, ordenar por nombre.  </li> </ul>"},{"location":"languages/es/phase3/#optional-e-interfaces-funcionales","title":"Optional e Interfaces Funcionales","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>Functional interfaces: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>Ejemplo: usar <code>Predicate</code> en Streams para filtrar datos.  </li> </ul>"},{"location":"languages/es/phase3/#colecciones-avanzadas","title":"Colecciones Avanzadas","text":"<ul> <li>LinkedList: inserci\u00f3n/eliminaci\u00f3n eficiente.  </li> <li>TreeMap: pares clave-valor ordenados.  </li> <li>PriorityQueue: cola de prioridad.  </li> <li>LinkedHashMap y Deque (introducci\u00f3n).  </li> </ul>"},{"location":"languages/es/phase3/#logging-slf4jlogback","title":"Logging (SLF4J/Logback)","text":"<ul> <li>Configuraci\u00f3n de SLF4J con Logback.  </li> <li>Niveles: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>Ejemplo: registrar queries de Hibernate.  </li> </ul>"},{"location":"languages/es/phase3/#conceptos-de-transacciones-acid","title":"Conceptos de Transacciones (ACID)","text":"<ul> <li>Atomicidad, Consistencia, Aislamiento, Durabilidad.  </li> <li>Transacciones con JDBC (<code>commit</code>, <code>rollback</code>) y Hibernate (<code>@Transactional</code>).  </li> </ul>"},{"location":"languages/es/phase3/#indices-y-planes-de-ejecucion","title":"\u00cdndices y Planes de Ejecuci\u00f3n","text":"<ul> <li>Indexes: primarios, \u00fanicos, compuestos.  </li> <li>Uso de EXPLAIN para optimizar queries.  </li> <li>Ejemplo: crear un \u00edndice en una columna de b\u00fasqueda frecuente.  </li> </ul>"},{"location":"languages/es/phase3/#manipulacion-de-archivos-opcional","title":"Manipulaci\u00f3n de Archivos (Opcional)","text":"<ul> <li>Lectura y escritura con <code>Files</code>, <code>BufferedReader</code>.  </li> <li>Ejemplo: exportar un informe de productos a CSV usando Streams.  </li> </ul>"},{"location":"languages/es/phase3/#pruebas-con-bases-de-datos-introduccion","title":"Pruebas con Bases de Datos (Introducci\u00f3n)","text":"<ul> <li>Pruebas de integraci\u00f3n con H2 y JUnit.  </li> <li>Ejemplo: probar operaciones CRUD con Hibernate.  </li> </ul>"},{"location":"languages/es/phase3/#proyecto-final","title":"Proyecto Final","text":"<p>Sistema de Gesti\u00f3n de Productos - Base de datos: tablas Product y Category (relaci\u00f3n 1:N). - Java: clases con JPA (<code>Product</code>, <code>Category</code>), CRUD con Hibernate. - Opcional: almacenar logs de cambios de productos en MongoDB. - Opcional: almacenar atributos din\u00e1micos de productos (por ejemplo, especificaciones t\u00e9cnicas) en MongoDB. - Streams: filtrar/ordenar productos (por ejemplo, por precio o categor\u00eda). - Logging: monitorear operaciones de base de datos. - Git: commit por funcionalidad (por ejemplo, <code>feature/crud</code>, <code>feature/streams</code>). - Publicar en GitHub con README explicativo.  </p>"},{"location":"languages/es/phase3/#recursos","title":"Recursos","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/es/phase4/","title":"Fase 4 \u2013 Frameworks y Aplicaciones Web (3\u20134 meses)","text":""},{"location":"languages/es/phase4/#spring-boot-spring-core-y-spring-data-jpa","title":"Spring Boot, Spring Core y Spring Data JPA","text":"<ul> <li>Spring Core: Inyecci\u00f3n de dependencias (<code>@Bean</code>, <code>@Autowired</code>), contenedor IoC.  </li> <li>Spring Boot: Autoconfiguraci\u00f3n, starters (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>), <code>application.yml</code>.  </li> <li>Spring Data JPA: Repositorios (<code>CrudRepository</code>, <code>JpaRepository</code>), consultas con <code>@Query</code>, paginaci\u00f3n.  </li> <li>Ejemplo: Crear endpoints REST para gestionar tareas (CRUD) en una aplicaci\u00f3n de tareas.  </li> </ul>"},{"location":"languages/es/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>Conceptos: Autenticaci\u00f3n, autorizaci\u00f3n, filtros de seguridad.  </li> <li>JWT: Crear y validar tokens, usar <code>JwtAuthenticationFilter</code>.  </li> <li>OAuth2: Configurar Resource Server, integrar con un proveedor (por ejemplo, Google).  </li> <li>Ejemplo: Proteger endpoints de tareas con JWT y roles (<code>ADMIN</code>, <code>USER</code>).  </li> </ul>"},{"location":"languages/es/phase4/#pruebas-unitarias-e-integracion","title":"Pruebas Unitarias e Integraci\u00f3n","text":"<ul> <li>Pruebas unitarias: JUnit 5, Mockito (<code>@Mock</code>, <code>@InjectMocks</code>), probar l\u00f3gica de negocio.  </li> <li>Pruebas de integraci\u00f3n: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, base de datos H2 para pruebas.  </li> <li>Testcontainers: Probar con PostgreSQL en contenedores Docker.  </li> <li>Ejemplo: Probar servicios y endpoints de la aplicaci\u00f3n de tareas.  </li> </ul>"},{"location":"languages/es/phase4/#apis-restful-y-documentacion-con-swagger","title":"APIs RESTful y Documentaci\u00f3n con Swagger","text":"<ul> <li>REST: M\u00e9todos HTTP, c\u00f3digos de estado, principios RESTful.  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>.  </li> <li>Swagger: Configurar springdoc-openapi, anotar con <code>@Operation</code>.  </li> <li>Ejemplo: Documentar endpoints de la aplicaci\u00f3n de tareas con Swagger UI.  </li> </ul>"},{"location":"languages/es/phase4/#introduccion-a-graphql","title":"Introducci\u00f3n a GraphQL","text":"<ul> <li>Conceptos: Queries, mutations, schema.  </li> <li>Spring Boot con GraphQL: Configuraci\u00f3n con spring-boot-starter-graphql.  </li> <li>Ejemplo: Crear una query GraphQL para listar tareas por estado.  </li> </ul>"},{"location":"languages/es/phase4/#integracion-basica-con-frontend","title":"Integraci\u00f3n B\u00e1sica con Frontend","text":"<ul> <li>Thymeleaf: Plantillas para renderizar p\u00e1ginas HTML con Spring Boot.  </li> <li>Ejemplo: Crear una interfaz web simple para visualizar y crear tareas.  </li> </ul>"},{"location":"languages/es/phase4/#herramientas-de-build-maven-y-gradle","title":"Herramientas de Build: Maven y Gradle","text":"<ul> <li>Maven: Estructura de <code>pom.xml</code>, dependencias, plugins.  </li> <li>Gradle: Archivo <code>build.gradle</code>, tareas, gesti\u00f3n de dependencias.  </li> <li>Ejemplo: Configurar la aplicaci\u00f3n de tareas con Maven y Gradle.  </li> </ul>"},{"location":"languages/es/phase4/#despliegue-de-proyecto","title":"Despliegue de Proyecto","text":"<ul> <li>Plataformas: Railway, Heroku, AWS (Elastic Beanstalk).  </li> <li>Pasos: Empaquetar como JAR, configurar CI/CD con GitHub Actions.  </li> <li>Ejemplo: Desplegar la aplicaci\u00f3n de tareas en Railway con PostgreSQL.  </li> </ul>"},{"location":"languages/es/phase4/#proyecto-final","title":"Proyecto Final","text":"<p>Sistema de Gesti\u00f3n de Tareas - Base de datos: Tablas <code>Task</code> (t\u00edtulo, descripci\u00f3n, estado) y <code>User</code> (relaci\u00f3n 1:N). - Java: API REST con Spring Boot, Spring Data JPA para CRUD. - Seguridad: Autenticaci\u00f3n JWT, roles (<code>ADMIN</code>, <code>USER</code>). - Pruebas: Pruebas unitarias (servicios) y de integraci\u00f3n (endpoints con Testcontainers). - Documentaci\u00f3n: Swagger UI con descripciones de endpoints. - Opcional: Agregar una query GraphQL para listar tareas y una interfaz Thymeleaf para interacci\u00f3n. - Git: Commits por funcionalidad (por ejemplo, <code>feature/rest-api</code>, <code>feature/security</code>). - Publicar: En GitHub con README (configuraci\u00f3n, endpoints, despliegue).  </p>"},{"location":"languages/es/phase4/#recursos","title":"Recursos","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/es/phase5/","title":"Fase 5 \u2013 Arquitectura y Concurrencia (2\u20133 meses)","text":""},{"location":"languages/es/phase5/#clean-code-y-principios-solid","title":"Clean Code y Principios SOLID","text":"<ul> <li>Clean Code: Nomenclatura clara, funciones cortas, comentarios \u00fatiles, formato consistente.  </li> <li>SOLID:  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>Ejemplo: Refactorizar un servicio del Gestor de Tareas para seguir los principios SOLID.  </p>"},{"location":"languages/es/phase5/#design-patterns","title":"Design Patterns","text":"<ul> <li>Patrones: Factory (creaci\u00f3n), Singleton (instancia \u00fanica), Builder (construcci\u00f3n de objetos), Strategy (comportamiento), Observer (eventos).  </li> <li>Aplicaci\u00f3n: Elegir patrones adecuados al contexto del proyecto.  </li> </ul> <p>Ejemplo: Usar Strategy para diferentes algoritmos de priorizaci\u00f3n de tareas.  </p>"},{"location":"languages/es/phase5/#threads-y-concurrencia","title":"Threads y Concurrencia","text":"<ul> <li>Conceptos: Thread, Runnable, ExecutorService, ForkJoinPool.  </li> <li>T\u00e9cnicas: Crear y gestionar pools de threads, tareas as\u00edncronas.  </li> </ul> <p>Ejemplo: Procesar informes de tareas en paralelo con ExecutorService.  </p>"},{"location":"languages/es/phase5/#sincronizacion-y-problemas-de-concurrencia","title":"Sincronizaci\u00f3n y Problemas de Concurrencia","text":"<ul> <li>Mecanismos: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>.  </li> <li>Problemas: Deadlock, race condition, starvation.  </li> </ul> <p>Ejemplo: Implementar acceso seguro a una lista de tareas compartida.  </p>"},{"location":"languages/es/phase5/#introduccion-a-microservicios","title":"Introducci\u00f3n a Microservicios","text":"<ul> <li>Conceptos: Arquitectura de microservicios, comunicaci\u00f3n v\u00eda REST, descubrimiento de servicios.  </li> <li>Herramientas: Spring Cloud (por ejemplo, Eureka para descubrimiento de servicios).  </li> </ul> <p>Ejemplo: Dividir el Gestor de Tareas en microservicios (tareas y usuarios).  </p>"},{"location":"languages/es/phase5/#fundamentos-de-colas-de-mensajes-opcional","title":"Fundamentos de Colas de Mensajes (Opcional)","text":"<ul> <li>Conceptos: Publisher/subscriber, colas, t\u00f3picos.  </li> <li>RabbitMQ: Configuraci\u00f3n, env\u00edo y consumo de mensajes.  </li> </ul> <p>Ejemplo: Notificar a usuarios sobre actualizaciones de tareas v\u00eda RabbitMQ.  </p>"},{"location":"languages/es/phase5/#optimizacion-de-rendimiento","title":"Optimizaci\u00f3n de Rendimiento","text":"<ul> <li>Caching: Spring Cache con Redis para reducir accesos a la base de datos.  </li> <li>JVM Tuning: Conceptos b\u00e1sicos (heap, garbage collection).  </li> </ul> <p>Ejemplo: Implementar cache para consultas frecuentes en el sistema de tareas.  </p>"},{"location":"languages/es/phase5/#introduccion-a-devopscloud-docker-y-cicd","title":"Introducci\u00f3n a DevOps/Cloud: Docker y CI/CD","text":"<ul> <li>Docker: Contenedores, im\u00e1genes, Dockerfile, Docker Compose.  </li> <li>CI/CD: Configurar pipelines con GitHub Actions para construcci\u00f3n y despliegue.  </li> </ul> <p>Ejemplo: Crear un Dockerfile para la aplicaci\u00f3n de tareas y desplegar v\u00eda GitHub Actions.  </p>"},{"location":"languages/es/phase5/#observabilidad","title":"Observabilidad","text":"<ul> <li>Herramientas: Prometheus (m\u00e9tricas), Grafana (visualizaci\u00f3n), ELK Stack (logs).  </li> <li>Conceptos: Monitoreo de rendimiento, logs centralizados, alertas.  </li> </ul> <p>Ejemplo: Monitorear el tiempo de respuesta de la API de tareas con Prometheus y Grafana.  </p>"},{"location":"languages/es/phase5/#seguridad-owasp-top-ten","title":"Seguridad: OWASP Top Ten","text":"<ul> <li>Conceptos: Inyecci\u00f3n, fallos de autenticaci\u00f3n, exposici\u00f3n de datos sensibles.  </li> <li>Pr\u00e1cticas: Validaci\u00f3n de entrada, sanitizaci\u00f3n, configuraci\u00f3n segura.  </li> </ul> <p>Ejemplo: Proteger la API de tareas contra inyecci\u00f3n SQL y XSS.  </p>"},{"location":"languages/es/phase5/#proyecto-final","title":"Proyecto Final","text":"<p>Sistema Avanzado de Gesti\u00f3n de Tareas - Backend: Mejorar la API de tareas (Fase 4) con microservicios (tareas y usuarios). - Arquitectura: Refactorizar con Clean Code, SOLID y design patterns (por ejemplo, Strategy). - Concurrencia: Procesar informes en paralelo con ExecutorService. - Opcional: Agregar comunicaci\u00f3n entre microservicios v\u00eda RabbitMQ y caching con Redis para consultas frecuentes. - DevOps: Empaquetar en Docker, configurar CI/CD con GitHub Actions. - Observabilidad: Agregar Prometheus y Grafana para m\u00e9tricas. - Seguridad: Implementar protecciones contra OWASP Top Ten. - Git: Commits por funcionalidad (por ejemplo, <code>feature/microservices</code>, <code>feature/concurrency</code>). - Publicar: En GitHub con README detallado (configuraci\u00f3n, arquitectura, despliegue).  </p>"},{"location":"languages/es/phase5/#recursos","title":"Recursos","text":"<ul> <li>The Pragmatic Programmer (Libro)  </li> <li>Effective Java (Libro)  </li> <li>Java Concurrency in Practice (Libro)  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/es/phase6/","title":"Fase 6 \u2013 Proyectos Finales (Continuo)","text":""},{"location":"languages/es/phase6/#proyecto-1-crud-completo-con-autenticacion","title":"Proyecto 1: CRUD Completo con Autenticaci\u00f3n","text":"<ul> <li>Objetivo: Construir una API RESTful robusta con autenticaci\u00f3n segura y pruebas.  </li> <li>Tecnolog\u00edas: Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers.  </li> <li>Funcionalidades: CRUD para entidades (por ejemplo, tareas, usuarios), autenticaci\u00f3n con roles (ADMIN, USER), documentaci\u00f3n con Swagger.  </li> <li>Opcional: Agregar una interfaz Thymeleaf para visualizar/gestionar tareas.  </li> <li>Ejemplo: API para gestionar proyectos (entidades: <code>Project</code>, <code>Task</code>, <code>User</code>) con endpoints protegidos.  </li> </ul>"},{"location":"languages/es/phase6/#proyecto-2-carga-de-archivos","title":"Proyecto 2: Carga de Archivos","text":"<ul> <li>Objetivo: Agregar funcionalidad de carga de archivos a la API del Proyecto 1.  </li> <li>Tecnolog\u00edas: Spring Boot (<code>MultipartFile</code>), Amazon S3 o almacenamiento local, validaci\u00f3n de archivos.  </li> <li>Funcionalidades: Carga de im\u00e1genes/documentos asociados a tareas, validaci\u00f3n de tipo/tama\u00f1o.  </li> <li>Ejemplo: Permitir la carga de anexos (por ejemplo, PDF, PNG) para tareas en la API.  </li> </ul>"},{"location":"languages/es/phase6/#proyecto-3-despliegue-en-la-nube","title":"Proyecto 3: Despliegue en la Nube","text":"<ul> <li>Objetivo: Desplegar la API en una plataforma en la nube con CI/CD.  </li> <li>Tecnolog\u00edas: Railway, Heroku o AWS (Elastic Beanstalk), GitHub Actions, Docker.  </li> <li>Funcionalidades: Empaquetar como JAR/Docker, configurar variables de entorno, automatizar el despliegue.  </li> <li>Opcional: Implementar caching con Redis para optimizar consultas frecuentes.  </li> <li>Ejemplo: Desplegar la API de proyectos en Railway con PostgreSQL y CI/CD.  </li> </ul>"},{"location":"languages/es/phase6/#proyecto-4-microservicios","title":"Proyecto 4: Microservicios","text":"<ul> <li>Objetivo: Dividir la API del Proyecto 1 en microservicios orquestados.  </li> <li>Tecnolog\u00edas: Spring Cloud (Eureka, Gateway), Docker Compose, REST para comunicaci\u00f3n.  </li> <li>Funcionalidades: Microservicios para <code>Tasks</code> y <code>Users</code>, con descubrimiento de servicios.  </li> <li>Opcional: Usar RabbitMQ para comunicaci\u00f3n as\u00edncrona entre microservicios.  </li> <li>Ejemplo: Separar la l\u00f3gica de tareas y usuarios en dos servicios, orquestados con Docker.  </li> </ul>"},{"location":"languages/es/phase6/#proyecto-5-integracion-con-api-externa","title":"Proyecto 5: Integraci\u00f3n con API Externa","text":"<ul> <li>Objetivo: Consumir una API externa para enriquecer la funcionalidad.  </li> <li>Tecnolog\u00edas: Spring RestTemplate o WebClient, autenticaci\u00f3n de API (por ejemplo, OAuth2).  </li> <li>Funcionalidades: Integrar con una API p\u00fablica (por ejemplo, enviar notificaciones por correo con SendGrid).  </li> <li>Opcional: Agregar una query GraphQL para consultar tareas/usuarios y almacenar metadatos en MongoDB.  </li> <li>Ejemplo: Agregar notificaciones por correo electr\u00f3nico para la finalizaci\u00f3n de tareas.  </li> </ul>"},{"location":"languages/es/phase6/#mejores-practicas-de-portafolio","title":"Mejores Pr\u00e1cticas de Portafolio","text":"<ul> <li>Git: Commits por funcionalidad (por ejemplo, <code>feature/crud</code>, <code>feature/upload</code>), ramas claras.  </li> <li>Documentaci\u00f3n: README con descripci\u00f3n, configuraci\u00f3n, endpoints, despliegue y capturas de pantalla.  </li> <li>Publicar: Hospedar en GitHub con una licencia open-source (por ejemplo, MIT).  </li> </ul>"},{"location":"languages/es/phase6/#recursos","title":"Recursos","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/fr/phase1/","title":"Phase 1 \u2013 Fondamentaux et Java Essentiel (2\u20133 mois)","text":""},{"location":"languages/fr/phase1/#logique-de-programmation-et-algorithmes","title":"Logique de programmation et algorithmes","text":"<ul> <li>D\u00e9composition de probl\u00e8mes</li> <li>Exercices : moyenne, pair/impair, tri</li> </ul>"},{"location":"languages/fr/phase1/#configuration-de-lenvironnement","title":"Configuration de l'environnement","text":"<ul> <li>Installation du JDK</li> <li>IDE (IntelliJ ou Eclipse)</li> <li>Debugging de base</li> </ul>"},{"location":"languages/fr/phase1/#syntaxe-de-base-de-java","title":"Syntaxe de base de Java","text":"<ul> <li>Structure d'un programme (class, main)</li> <li>Conventions de nommage</li> <li>Commentaires</li> </ul>"},{"location":"languages/fr/phase1/#types-de-donnees-et-variables","title":"Types de donn\u00e9es et variables","text":"<ul> <li>Types primitifs et non primitifs</li> <li>D\u00e9claration, initialisation, constantes</li> <li>Casting et comparaison (<code>==</code> vs <code>.equals()</code>)</li> </ul>"},{"location":"languages/fr/phase1/#entree-et-sortie","title":"Entr\u00e9e et sortie","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/fr/phase1/#structures-de-controle","title":"Structures de contr\u00f4le","text":"<ul> <li>if, else if, else, switch</li> <li>Op\u00e9rateurs logiques et relationnels</li> </ul>"},{"location":"languages/fr/phase1/#boucles","title":"Boucles","text":"<ul> <li>for, while, do-while</li> <li>break, continue, boucles imbriqu\u00e9es</li> </ul>"},{"location":"languages/fr/phase1/#methodes-et-portee","title":"M\u00e9thodes et port\u00e9e","text":"<ul> <li>D\u00e9claration, param\u00e8tres, return</li> <li>Overloading</li> <li>Variables locales et attributs de classe</li> </ul>"},{"location":"languages/fr/phase1/#tableaux","title":"Tableaux","text":"<ul> <li>D\u00e9claration, initialisation et manipulation</li> <li>Recherche lin\u00e9aire et tri manuel</li> <li>Arrays.toString() pour debugging</li> </ul>"},{"location":"languages/fr/phase1/#strings-et-stringbuilder","title":"Strings et StringBuilder","text":"<ul> <li>M\u00e9thodes courantes</li> <li>Immutabilit\u00e9 et performance</li> </ul>"},{"location":"languages/fr/phase1/#exceptions","title":"Exceptions","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw et throws</li> <li>Cr\u00e9ation d'exceptions personnalis\u00e9es (par exemple, throw new MyException)</li> </ul>"},{"location":"languages/fr/phase1/#outils-essentiels","title":"Outils essentiels","text":"<ul> <li>Terminal : cd, ls, mkdir</li> <li>Git : init, add, commit, push, pull, branch, merge</li> <li>GitHub : cr\u00e9ation de d\u00e9p\u00f4ts, pull requests, clonage</li> </ul>"},{"location":"languages/fr/phase1/#projets-finaux","title":"Projets finaux","text":"<ul> <li>Calculatrice simple et gestionnaire de t\u00e2ches</li> <li>Exigences :</li> <li>Utiliser Git</li> <li>Publier sur GitHub</li> <li>README explicatif</li> </ul>"},{"location":"languages/fr/phase1/#ressources","title":"Ressources","text":"<ul> <li>MOOC de l'Universit\u00e9 d'Helsinki</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/fr/phase2/","title":"Phase 2 \u2013 Programmation Orient\u00e9e Objet (2\u20133 mois)","text":""},{"location":"languages/fr/phase2/#classes-objets-attributs-et-methodes","title":"Classes, Objets, Attributs et M\u00e9thodes","text":"<ul> <li>Structure des classes</li> <li>Instanciation des objets</li> <li>Utilisation de this</li> <li>Meilleures pratiques : nommage, organisation du code</li> </ul>"},{"location":"languages/fr/phase2/#encapsulation-heritage-polymorphisme-et-abstraction","title":"Encapsulation, H\u00e9ritage, Polymorphisme et Abstraction","text":"<ul> <li>Encapsulation : private, getters/setters, validation</li> <li>Inheritance : extends, overriding (@Override)</li> <li>Polymorphism : sous-type, method overloading</li> <li>Abstraction : aper\u00e7u, pr\u00e9paration aux interfaces et classes abstraites</li> </ul>"},{"location":"languages/fr/phase2/#interfaces-et-classes-abstraites","title":"Interfaces et Classes Abstraites","text":"<ul> <li>Interfaces : implements, default methods</li> <li>Abstract classes : m\u00e9thodes abstraites et concr\u00e8tes</li> <li>Diff\u00e9rences entre interface et abstract class</li> </ul>"},{"location":"languages/fr/phase2/#constructeurs-initialisateurs-et-blocs-statiques","title":"Constructeurs, Initialisateurs et Blocs Statiques","text":"<ul> <li>Constructeurs par d\u00e9faut et param\u00e9tr\u00e9s, appels avec this()</li> <li>Blocs d\u2019initialisation ({}) et blocs statiques (static {})</li> </ul>"},{"location":"languages/fr/phase2/#enumerations","title":"\u00c9num\u00e9rations","text":"<ul> <li>Cr\u00e9ation et utilisation d\u2019enum</li> <li>M\u00e9thodes et attributs dans les enums</li> </ul>"},{"location":"languages/fr/phase2/#collections-de-base","title":"Collections de Base","text":"<ul> <li>ArrayList : ajout, suppression, it\u00e9ration (for, forEach, Iterator)</li> <li>HashMap : cl\u00e9-valeur, op\u00e9rations courantes</li> <li>HashSet : \u00e9limination des doublons</li> <li>Introduction \u00e0 Queue et Stack (par exemple, LinkedList comme queue/stack)</li> <li>Introduction au Java Collections Framework</li> </ul>"},{"location":"languages/fr/phase2/#algorithmes-de-base","title":"Algorithmes de Base","text":"<ul> <li>Recherche lin\u00e9aire et binaire</li> <li>Sorting : Bubble Sort, Collections.sort()</li> <li>Recursion : concepts et exemples simples (par exemple, factorielle, Fibonacci)</li> <li>Introduction \u00e0 la complexit\u00e9 (O(n), O(log n))</li> </ul>"},{"location":"languages/fr/phase2/#generics","title":"Generics","text":"<ul> <li>Syntaxe (), collections g\u00e9n\u00e9riques, m\u00e9thodes g\u00e9n\u00e9riques <li>Limites (extends, super)</li>"},{"location":"languages/fr/phase2/#stream-api-introduction","title":"Stream API (Introduction)","text":"<ul> <li>Op\u00e9rations de base : filter, map, collect</li> <li>Exemples avec ArrayList</li> </ul>"},{"location":"languages/fr/phase2/#tests-unitaires-introduction","title":"Tests Unitaires (Introduction)","text":"<ul> <li>Utilisation de base de JUnit</li> <li>\u00c9criture de cas de test pour les classes et m\u00e9thodes</li> <li>Introduction \u00e0 TDD (Test-Driven Development)</li> </ul>"},{"location":"languages/fr/phase2/#projet-final","title":"Projet Final","text":"<ul> <li>Syst\u00e8me de Biblioth\u00e8que</li> <li>Classes : Book, User, Library</li> <li>H\u00e9ritage : DigitalBook et PhysicalBook</li> <li>Collections : ArrayList pour les livres, HashMap pour les pr\u00eats</li> <li>Encapsulation : validation des donn\u00e9es</li> <li>Git : commit par fonctionnalit\u00e9 (par exemple, <code>feature/book-management</code>)</li> <li>Publier sur GitHub avec un README explicatif</li> </ul>"},{"location":"languages/fr/phase2/#ressources-mises-a-jour","title":"Ressources Mises \u00e0 Jour","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java (Livre)</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/fr/phase3/","title":"Phase 3 \u2013 Persistance des Donn\u00e9es et Streams (2\u20133 mois)","text":""},{"location":"languages/fr/phase3/#sql-de-base","title":"SQL de Base","text":"<ul> <li>DDL : <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML : <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins : <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Keys : cl\u00e9s primaires et \u00e9trang\u00e8res.  </li> <li>Normalization : 1NF, 2NF, 3NF.  </li> <li>Exemple : cr\u00e9er des tables pour les produits et les cat\u00e9gories.  </li> </ul>"},{"location":"languages/fr/phase3/#jdbc-et-connection-pool","title":"JDBC et Connection Pool","text":"<ul> <li>Classes : <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>Utilisation de Connection Pool (HikariCP).  </li> <li>Meilleures pratiques : <code>try-with-resources</code>, gestion des <code>SQLException</code>.  </li> </ul>"},{"location":"languages/fr/phase3/#hibernate-jpa-en-pratique","title":"Hibernate + JPA en Pratique","text":"<ul> <li>Annotations : <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>Configuration : <code>persistence.xml</code> ou <code>application.properties</code>.  </li> <li>Op\u00e9rations CRUD avec <code>EntityManager</code>.  </li> <li>Introduction aux migrations de base de donn\u00e9es avec Flyway ou Liquibase.</li> </ul>"},{"location":"languages/fr/phase3/#introduction-aux-bases-de-donnees-nosql","title":"Introduction aux Bases de Donn\u00e9es NoSQL","text":"<ul> <li>Concepts : documents, collections, scalabilit\u00e9 horizontale.  </li> <li>MongoDB : configuration, op\u00e9rations CRUD avec MongoRepository.  </li> <li>Spring Data MongoDB : int\u00e9gration avec Spring Boot.  </li> <li>Exemple : stocker les journaux d\u2019activit\u00e9 du syst\u00e8me pour les produits dans MongoDB.</li> </ul>"},{"location":"languages/fr/phase3/#streams-et-lambda-expressions","title":"Streams et Lambda Expressions","text":"<ul> <li>Op\u00e9rations : <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>Exemple : filtrer les produits par prix, trier par nom.  </li> </ul>"},{"location":"languages/fr/phase3/#optional-et-functional-interfaces","title":"Optional et Functional Interfaces","text":"<ul> <li><code>Optional</code> : <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>Functional interfaces : <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>Exemple : utiliser <code>Predicate</code> dans Streams pour filtrer des donn\u00e9es.  </li> </ul>"},{"location":"languages/fr/phase3/#collections-avancees","title":"Collections Avanc\u00e9es","text":"<ul> <li>LinkedList : insertion/suppression efficace.  </li> <li>TreeMap : paires cl\u00e9-valeur ordonn\u00e9es.  </li> <li>PriorityQueue : file de priorit\u00e9.  </li> <li>LinkedHashMap et Deque (introduction).  </li> </ul>"},{"location":"languages/fr/phase3/#logging-slf4jlogback","title":"Logging (SLF4J/Logback)","text":"<ul> <li>Configuration de SLF4J avec Logback.  </li> <li>Niveaux : <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>Exemple : enregistrer les queries Hibernate.  </li> </ul>"},{"location":"languages/fr/phase3/#concepts-de-transactions-acid","title":"Concepts de Transactions (ACID)","text":"<ul> <li>Atomicit\u00e9, Coh\u00e9rence, Isolation, Durabilit\u00e9.  </li> <li>Transactions avec JDBC (<code>commit</code>, <code>rollback</code>) et Hibernate (<code>@Transactional</code>).  </li> </ul>"},{"location":"languages/fr/phase3/#index-et-plans-dexecution","title":"Index et Plans d\u2019Ex\u00e9cution","text":"<ul> <li>Indexes : primaires, uniques, composites.  </li> <li>Utilisation de EXPLAIN pour optimiser les queries.  </li> <li>Exemple : cr\u00e9er un index sur une colonne fr\u00e9quemment recherch\u00e9e.  </li> </ul>"},{"location":"languages/fr/phase3/#manipulation-de-fichiers-optionnel","title":"Manipulation de Fichiers (Optionnel)","text":"<ul> <li>Lecture et \u00e9criture avec <code>Files</code>, <code>BufferedReader</code>.  </li> <li>Exemple : exporter un rapport de produits au format CSV en utilisant Streams.  </li> </ul>"},{"location":"languages/fr/phase3/#tests-de-base-de-donnees-introduction","title":"Tests de Base de Donn\u00e9es (Introduction)","text":"<ul> <li>Tests d\u2019int\u00e9gration avec H2 et JUnit.  </li> <li>Exemple : tester les op\u00e9rations CRUD avec Hibernate.  </li> </ul>"},{"location":"languages/fr/phase3/#projet-final","title":"Projet Final","text":"<p>Syst\u00e8me de Gestion de Produits - Base de donn\u00e9es : tables Product et Category (relation 1:N). - Java : classes avec JPA (<code>Product</code>, <code>Category</code>), CRUD avec Hibernate. - Optionnel : stocker les journaux de modifications des produits dans MongoDB. - Optionnel : stocker les attributs dynamiques des produits (par exemple, sp\u00e9cifications techniques) dans MongoDB. - Streams : filtrer/trier les produits (par exemple, par prix ou cat\u00e9gorie). - Logging : surveiller les op\u00e9rations de base de donn\u00e9es. - Git : commit par fonctionnalit\u00e9 (par exemple, <code>feature/crud</code>, <code>feature/streams</code>). - Publier sur GitHub avec un README explicatif.  </p>"},{"location":"languages/fr/phase3/#ressources","title":"Ressources","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/fr/phase4/","title":"Phase 4 \u2013 Frameworks et Applications Web (3\u20134 mois)","text":""},{"location":"languages/fr/phase4/#spring-boot-spring-core-et-spring-data-jpa","title":"Spring Boot, Spring Core et Spring Data JPA","text":"<ul> <li>Spring Core : Injection de d\u00e9pendances (<code>@Bean</code>, <code>@Autowired</code>), conteneur IoC.  </li> <li>Spring Boot : Auto-configuration, starters (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>), <code>application.yml</code>.  </li> <li>Spring Data JPA : Repositories (<code>CrudRepository</code>, <code>JpaRepository</code>), requ\u00eates avec <code>@Query</code>, pagination.  </li> <li>Exemple : Cr\u00e9er des endpoints REST pour g\u00e9rer des t\u00e2ches (CRUD) dans une application de t\u00e2ches.  </li> </ul>"},{"location":"languages/fr/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>Concepts : Authentification, autorisation, filtres de s\u00e9curit\u00e9.  </li> <li>JWT : Cr\u00e9er et valider des tokens, utiliser <code>JwtAuthenticationFilter</code>.  </li> <li>OAuth2 : Configurer un Resource Server, int\u00e9grer avec un fournisseur (par exemple, Google).  </li> <li>Exemple : Prot\u00e9ger les endpoints des t\u00e2ches avec JWT et roles (<code>ADMIN</code>, <code>USER</code>).  </li> </ul>"},{"location":"languages/fr/phase4/#tests-unitaires-et-dintegration","title":"Tests Unitaires et d\u2019Int\u00e9gration","text":"<ul> <li>Unit tests : JUnit 5, Mockito (<code>@Mock</code>, <code>@InjectMocks</code>), tester la logique m\u00e9tier.  </li> <li>Integration tests : <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, base de donn\u00e9es H2 pour les tests.  </li> <li>Testcontainers : Tester avec PostgreSQL dans des conteneurs Docker.  </li> <li>Exemple : Tester les services et endpoints de l\u2019application de t\u00e2ches.  </li> </ul>"},{"location":"languages/fr/phase4/#apis-restful-et-documentation-avec-swagger","title":"APIs RESTful et Documentation avec Swagger","text":"<ul> <li>REST : M\u00e9thodes HTTP, codes de statut, principes RESTful.  </li> <li>Spring REST : <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>.  </li> <li>Swagger : Configurer springdoc-openapi, annoter avec <code>@Operation</code>.  </li> <li>Exemple : Documenter les endpoints de l\u2019application de t\u00e2ches avec Swagger UI.  </li> </ul>"},{"location":"languages/fr/phase4/#introduction-a-graphql","title":"Introduction \u00e0 GraphQL","text":"<ul> <li>Concepts : Queries, mutations, schema.  </li> <li>Spring Boot avec GraphQL : Configuration avec spring-boot-starter-graphql.  </li> <li>Exemple : Cr\u00e9er une query GraphQL pour lister les t\u00e2ches par statut.  </li> </ul>"},{"location":"languages/fr/phase4/#integration-frontend-de-base","title":"Int\u00e9gration Frontend de Base","text":"<ul> <li>Thymeleaf : Templates pour rendre des pages HTML avec Spring Boot.  </li> <li>Exemple : Cr\u00e9er une interface web simple pour visualiser et cr\u00e9er des t\u00e2ches.  </li> </ul>"},{"location":"languages/fr/phase4/#outils-de-build-maven-et-gradle","title":"Outils de Build : Maven et Gradle","text":"<ul> <li>Maven : Structure du <code>pom.xml</code>, d\u00e9pendances, plugins.  </li> <li>Gradle : Fichier <code>build.gradle</code>, t\u00e2ches, gestion des d\u00e9pendances.  </li> <li>Exemple : Configurer l\u2019application de t\u00e2ches avec Maven et Gradle.  </li> </ul>"},{"location":"languages/fr/phase4/#deploiement-de-projet","title":"D\u00e9ploiement de Projet","text":"<ul> <li>Plateformes : Railway, Heroku, AWS (Elastic Beanstalk).  </li> <li>\u00c9tapes : Empaqueter en JAR, configurer CI/CD avec GitHub Actions.  </li> <li>Exemple : D\u00e9ployer l\u2019application de t\u00e2ches sur Railway avec PostgreSQL.  </li> </ul>"},{"location":"languages/fr/phase4/#projet-final","title":"Projet Final","text":"<p>Syst\u00e8me de Gestion de T\u00e2ches - Base de donn\u00e9es : Tables <code>Task</code> (titre, description, statut) et <code>User</code> (relation 1:N). - Java : API REST avec Spring Boot, Spring Data JPA pour CRUD. - S\u00e9curit\u00e9 : Authentification JWT, roles (<code>ADMIN</code>, <code>USER</code>). - Tests : Tests unitaires (services) et tests d\u2019int\u00e9gration (endpoints avec Testcontainers). - Documentation : Swagger UI avec descriptions des endpoints. - Optionnel : Ajouter une query GraphQL pour lister les t\u00e2ches et une interface Thymeleaf pour l\u2019interaction. - Git : Commits par fonctionnalit\u00e9 (par exemple, <code>feature/rest-api</code>, <code>feature/security</code>). - Publier : Sur GitHub avec un README (configuration, endpoints, d\u00e9ploiement).  </p>"},{"location":"languages/fr/phase4/#ressources","title":"Ressources","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/fr/phase5/","title":"Phase 5 \u2013 Architecture et Concurrence (2\u20133 mois)","text":""},{"location":"languages/fr/phase5/#clean-code-et-principes-solid","title":"Clean Code et Principes SOLID","text":"<ul> <li>Clean Code : Nommage clair, fonctions courtes, commentaires utiles, formatage coh\u00e9rent.  </li> <li>SOLID :  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>Exemple : Refactoriser un service du Gestionnaire de T\u00e2ches pour respecter les principes SOLID.  </p>"},{"location":"languages/fr/phase5/#design-patterns","title":"Design Patterns","text":"<ul> <li>Patterns : Factory (cr\u00e9ation), Singleton (instance unique), Builder (construction d\u2019objets), Strategy (comportement), Observer (\u00e9v\u00e9nements).  </li> <li>Application : Choisir des patterns adapt\u00e9s au contexte du projet.  </li> </ul> <p>Exemple : Utiliser Strategy pour diff\u00e9rents algorithmes de priorisation des t\u00e2ches.  </p>"},{"location":"languages/fr/phase5/#threads-et-concurrence","title":"Threads et Concurrence","text":"<ul> <li>Concepts : Thread, Runnable, ExecutorService, ForkJoinPool.  </li> <li>Techniques : Cr\u00e9er et g\u00e9rer des pools de threads, t\u00e2ches asynchrones.  </li> </ul> <p>Exemple : Traiter les rapports de t\u00e2ches en parall\u00e8le avec ExecutorService.  </p>"},{"location":"languages/fr/phase5/#synchronisation-et-problemes-de-concurrence","title":"Synchronisation et Probl\u00e8mes de Concurrence","text":"<ul> <li>M\u00e9canismes : <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>.  </li> <li>Probl\u00e8mes : Deadlock, race condition, starvation.  </li> </ul> <p>Exemple : Impl\u00e9menter un acc\u00e8s s\u00e9curis\u00e9 \u00e0 une liste de t\u00e2ches partag\u00e9e.  </p>"},{"location":"languages/fr/phase5/#introduction-aux-microservices","title":"Introduction aux Microservices","text":"<ul> <li>Concepts : Architecture de microservices, communication REST, d\u00e9couverte de services.  </li> <li>Outils : Spring Cloud (par exemple, Eureka pour la d\u00e9couverte de services).  </li> </ul> <p>Exemple : Diviser le Gestionnaire de T\u00e2ches en microservices (t\u00e2ches et utilisateurs).  </p>"},{"location":"languages/fr/phase5/#fondamentaux-des-files-de-messages-optionnel","title":"Fondamentaux des Files de Messages (Optionnel)","text":"<ul> <li>Concepts : Publisher/subscriber, queues, topics.  </li> <li>RabbitMQ : Configuration, envoi et consommation de messages.  </li> </ul> <p>Exemple : Notifier les utilisateurs des mises \u00e0 jour des t\u00e2ches via RabbitMQ.  </p>"},{"location":"languages/fr/phase5/#optimisation-des-performances","title":"Optimisation des Performances","text":"<ul> <li>Caching : Spring Cache avec Redis pour r\u00e9duire les acc\u00e8s \u00e0 la base de donn\u00e9es.  </li> <li>JVM Tuning : Concepts de base (heap, garbage collection).  </li> </ul> <p>Exemple : Impl\u00e9menter un cache pour les requ\u00eates fr\u00e9quentes dans le syst\u00e8me de t\u00e2ches.  </p>"},{"location":"languages/fr/phase5/#introduction-a-devopscloud-docker-et-cicd","title":"Introduction \u00e0 DevOps/Cloud : Docker et CI/CD","text":"<ul> <li>Docker : Conteneurs, images, Dockerfile, Docker Compose.  </li> <li>CI/CD : Configurer des pipelines avec GitHub Actions pour la construction et le d\u00e9ploiement.  </li> </ul> <p>Exemple : Cr\u00e9er un Dockerfile pour l\u2019application de t\u00e2ches et d\u00e9ployer via GitHub Actions.  </p>"},{"location":"languages/fr/phase5/#observabilite","title":"Observabilit\u00e9","text":"<ul> <li>Outils : Prometheus (m\u00e9triques), Grafana (visualisation), ELK Stack (logs).  </li> <li>Concepts : Surveillance des performances, logs centralis\u00e9s, alertes.  </li> </ul> <p>Exemple : Surveiller le temps de r\u00e9ponse de l\u2019API des t\u00e2ches avec Prometheus et Grafana.  </p>"},{"location":"languages/fr/phase5/#securite-owasp-top-ten","title":"S\u00e9curit\u00e9 : OWASP Top Ten","text":"<ul> <li>Concepts : Injection, \u00e9checs d\u2019authentification, exposition de donn\u00e9es sensibles.  </li> <li>Pratiques : Validation des entr\u00e9es, sanitisation, configuration s\u00e9curis\u00e9e.  </li> </ul> <p>Exemple : Prot\u00e9ger l\u2019API des t\u00e2ches contre les injections SQL et XSS.  </p>"},{"location":"languages/fr/phase5/#projet-final","title":"Projet Final","text":"<p>Syst\u00e8me Avanc\u00e9 de Gestion de T\u00e2ches - Backend : Am\u00e9liorer l\u2019API des t\u00e2ches (Phase 4) avec des microservices (t\u00e2ches et utilisateurs). - Architecture : Refactoriser avec Clean Code, SOLID et design patterns (par exemple, Strategy). - Concurrence : Traiter les rapports en parall\u00e8le avec ExecutorService. - Optionnel : Ajouter une communication entre microservices via RabbitMQ et un caching avec Redis pour les requ\u00eates fr\u00e9quentes. - DevOps : Empaqueter en Docker, configurer CI/CD avec GitHub Actions. - Observabilit\u00e9 : Ajouter Prometheus et Grafana pour les m\u00e9triques. - S\u00e9curit\u00e9 : Impl\u00e9menter des protections contre les OWASP Top Ten. - Git : Commits par fonctionnalit\u00e9 (par exemple, <code>feature/microservices</code>, <code>feature/concurrency</code>). - Publier : Sur GitHub avec un README d\u00e9taill\u00e9 (configuration, architecture, d\u00e9ploiement).  </p>"},{"location":"languages/fr/phase5/#ressources","title":"Ressources","text":"<ul> <li>The Pragmatic Programmer (Livre)  </li> <li>Effective Java (Livre)  </li> <li>Java Concurrency in Practice (Livre)  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/fr/phase6/","title":"Phase 6 \u2013 Projets Finaux (En continu)","text":""},{"location":"languages/fr/phase6/#projet-1-crud-complet-avec-authentification","title":"Projet 1 : CRUD Complet avec Authentification","text":"<ul> <li>Objectif : Construire une API RESTful robuste avec authentification s\u00e9curis\u00e9e et tests.  </li> <li>Technologies : Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers.  </li> <li>Fonctionnalit\u00e9s : CRUD pour les entit\u00e9s (par exemple, t\u00e2ches, utilisateurs), authentification avec roles (ADMIN, USER), documentation avec Swagger.  </li> <li>Optionnel : Ajouter une interface Thymeleaf pour visualiser/g\u00e9rer les t\u00e2ches.  </li> <li>Exemple : API pour g\u00e9rer des projets (entit\u00e9s : <code>Project</code>, <code>Task</code>, <code>User</code>) avec des endpoints prot\u00e9g\u00e9s.  </li> </ul>"},{"location":"languages/fr/phase6/#projet-2-telechargement-de-fichiers","title":"Projet 2 : T\u00e9l\u00e9chargement de Fichiers","text":"<ul> <li>Objectif : Ajouter une fonctionnalit\u00e9 de t\u00e9l\u00e9chargement de fichiers \u00e0 l\u2019API du Projet 1.  </li> <li>Technologies : Spring Boot (<code>MultipartFile</code>), Amazon S3 ou stockage local, validation des fichiers.  </li> <li>Fonctionnalit\u00e9s : T\u00e9l\u00e9charger des images/documents associ\u00e9s aux t\u00e2ches, valider le type/taille.  </li> <li>Exemple : Permettre le t\u00e9l\u00e9chargement de pi\u00e8ces jointes (par exemple, PDF, PNG) pour les t\u00e2ches dans l\u2019API.  </li> </ul>"},{"location":"languages/fr/phase6/#projet-3-deploiement-dans-le-cloud","title":"Projet 3 : D\u00e9ploiement dans le Cloud","text":"<ul> <li>Objectif : D\u00e9ployer l\u2019API sur une plateforme cloud avec CI/CD.  </li> <li>Technologies : Railway, Heroku, ou AWS (Elastic Beanstalk), GitHub Actions, Docker.  </li> <li>Fonctionnalit\u00e9s : Empaqueter en JAR/Docker, configurer les variables d\u2019environnement, automatiser le d\u00e9ploiement.  </li> <li>Optionnel : Impl\u00e9menter un caching avec Redis pour optimiser les requ\u00eates fr\u00e9quentes.  </li> <li>Exemple : D\u00e9ployer l\u2019API du projet sur Railway avec PostgreSQL et CI/CD.  </li> </ul>"},{"location":"languages/fr/phase6/#projet-4-microservices","title":"Projet 4 : Microservices","text":"<ul> <li>Objectif : Diviser l\u2019API du Projet 1 en microservices orchestr\u00e9s.  </li> <li>Technologies : Spring Cloud (Eureka, Gateway), Docker Compose, REST pour la communication.  </li> <li>Fonctionnalit\u00e9s : Microservices pour <code>Tasks</code> et <code>Users</code>, avec d\u00e9couverte de services.  </li> <li>Optionnel : Utiliser RabbitMQ pour une communication asynchrone entre microservices.  </li> <li>Exemple : S\u00e9parer la logique des t\u00e2ches et des utilisateurs en deux services, orchestr\u00e9s avec Docker.  </li> </ul>"},{"location":"languages/fr/phase6/#projet-5-integration-dapi-externe","title":"Projet 5 : Int\u00e9gration d\u2019API Externe","text":"<ul> <li>Objectif : Consommer une API externe pour enrichir les fonctionnalit\u00e9s.  </li> <li>Technologies : Spring RestTemplate ou WebClient, authentification API (par exemple, OAuth2).  </li> <li>Fonctionnalit\u00e9s : Int\u00e9grer une API publique (par exemple, envoyer des notifications par email avec SendGrid).  </li> <li>Optionnel : Ajouter une query GraphQL pour r\u00e9cup\u00e9rer les t\u00e2ches/utilisateurs et stocker les m\u00e9tadonn\u00e9es dans MongoDB.  </li> <li>Exemple : Ajouter des notifications par email pour la compl\u00e9tion des t\u00e2ches.  </li> </ul>"},{"location":"languages/fr/phase6/#meilleures-pratiques-pour-le-portfolio","title":"Meilleures Pratiques pour le Portfolio","text":"<ul> <li>Git : Commits par fonctionnalit\u00e9 (par exemple, <code>feature/crud</code>, <code>feature/upload</code>), branches claires.  </li> <li>Documentation : README avec description, configuration, endpoints, d\u00e9ploiement et captures d\u2019\u00e9cran.  </li> <li>Publication : H\u00e9berger sur GitHub avec une licence open-source (par exemple, MIT).  </li> </ul>"},{"location":"languages/fr/phase6/#ressources","title":"Ressources","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/hi/phase1/","title":"\u091a\u0930\u0923 1 \u2013 \u092e\u0942\u0932\u092d\u0942\u0924 \u0914\u0930 \u0906\u0935\u0936\u094d\u092f\u0915 \u091c\u093e\u0935\u093e (2-3 \u092e\u0939\u0940\u0928\u0947)","text":""},{"location":"languages/hi/phase1/#_1","title":"\u092a\u094d\u0930\u094b\u0917\u094d\u0930\u093e\u092e\u093f\u0902\u0917 \u0932\u0949\u091c\u093f\u0915 \u0914\u0930 \u090f\u0932\u094d\u0917\u094b\u0930\u093f\u0926\u092e","text":"<ul> <li>\u0938\u092e\u0938\u094d\u092f\u093e \u0935\u093f\u0918\u091f\u0928</li> <li>\u0905\u092d\u094d\u092f\u093e\u0938: \u0914\u0938\u0924, \u0938\u092e/\u0935\u093f\u0937\u092e, \u0938\u0949\u0930\u094d\u091f\u093f\u0902\u0917</li> </ul>"},{"location":"languages/hi/phase1/#_2","title":"\u092a\u0930\u094d\u092f\u093e\u0935\u0930\u0923 \u0938\u0947\u091f\u0905\u092a","text":"<ul> <li>JDK \u0915\u0940 \u0938\u094d\u0925\u093e\u092a\u0928\u093e</li> <li>IDE (IntelliJ \u092f\u093e Eclipse)</li> <li>Basic debugging</li> </ul>"},{"location":"languages/hi/phase1/#_3","title":"\u092e\u0942\u0932 \u091c\u093e\u0935\u093e \u0938\u093f\u0928\u094d\u091f\u0948\u0915\u094d\u0938","text":"<ul> <li>\u092a\u094d\u0930\u094b\u0917\u094d\u0930\u093e\u092e \u0938\u0902\u0930\u091a\u0928\u093e (class, main)</li> <li>\u0928\u093e\u092e\u0915\u0930\u0923 \u092a\u0930\u0902\u092a\u0930\u093e\u090f\u0901</li> <li>\u091f\u093f\u092a\u094d\u092a\u0923\u093f\u092f\u093e\u0901</li> </ul>"},{"location":"languages/hi/phase1/#_4","title":"\u0921\u0947\u091f\u093e \u092a\u094d\u0930\u0915\u093e\u0930 \u0914\u0930 \u091a\u0930","text":"<ul> <li>\u092a\u094d\u0930\u093f\u092e\u093f\u091f\u093f\u0935 \u0914\u0930 \u0917\u0948\u0930-\u092a\u094d\u0930\u093f\u092e\u093f\u091f\u093f\u0935 \u092a\u094d\u0930\u0915\u093e\u0930</li> <li>\u0918\u094b\u0937\u0923\u093e, \u092a\u094d\u0930\u093e\u0930\u0902\u092d\u093f\u0915\u0930\u0923, \u0938\u094d\u0925\u093f\u0930\u093e\u0902\u0915</li> <li>Casting \u0914\u0930 \u0924\u0941\u0932\u0928\u093e (<code>==</code> vs <code>.equals()</code>)</li> </ul>"},{"location":"languages/hi/phase1/#_5","title":"\u0907\u0928\u092a\u0941\u091f \u0914\u0930 \u0906\u0909\u091f\u092a\u0941\u091f","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/hi/phase1/#_6","title":"\u0928\u093f\u092f\u0902\u0924\u094d\u0930\u0923 \u0938\u0902\u0930\u091a\u0928\u093e\u090f\u0901","text":"<ul> <li>if, else if, else, switch</li> <li>\u0924\u093e\u0930\u094d\u0915\u093f\u0915 \u0914\u0930 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0911\u092a\u0930\u0947\u091f\u0930</li> </ul>"},{"location":"languages/hi/phase1/#_7","title":"\u0932\u0942\u092a\u094d\u0938","text":"<ul> <li>for, while, do-while</li> <li>break, continue, \u0928\u0947\u0938\u094d\u091f\u0947\u0921 \u0932\u0942\u092a\u094d\u0938</li> </ul>"},{"location":"languages/hi/phase1/#_8","title":"\u092e\u0947\u0925\u0921\u094d\u0938 \u0914\u0930 \u0938\u094d\u0915\u094b\u092a","text":"<ul> <li>\u0918\u094b\u0937\u0923\u093e, \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930, return</li> <li>Overloading</li> <li>\u0938\u094d\u0925\u093e\u0928\u0940\u092f \u091a\u0930 \u0914\u0930 \u0915\u094d\u0932\u093e\u0938 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u090f\u0901</li> </ul>"},{"location":"languages/hi/phase1/#arrays","title":"Arrays","text":"<ul> <li>\u0918\u094b\u0937\u0923\u093e, \u092a\u094d\u0930\u093e\u0930\u0902\u092d\u093f\u0915\u0930\u0923, \u0914\u0930 \u0939\u0947\u0930\u092b\u0947\u0930</li> <li>\u0930\u0948\u0916\u093f\u0915 \u0916\u094b\u091c \u0914\u0930 \u092e\u0948\u0928\u094d\u092f\u0941\u0905\u0932 \u0938\u0949\u0930\u094d\u091f\u093f\u0902\u0917</li> <li>Arrays.toString() \u0915\u0947 \u0932\u093f\u090f debugging</li> </ul>"},{"location":"languages/hi/phase1/#strings-stringbuilder","title":"Strings \u0914\u0930 StringBuilder","text":"<ul> <li>\u0938\u093e\u092e\u093e\u0928\u094d\u092f \u092e\u0947\u0925\u0921\u094d\u0938</li> <li>Immutability \u0914\u0930 \u092a\u094d\u0930\u0926\u0930\u094d\u0936\u0928</li> </ul>"},{"location":"languages/hi/phase1/#exceptions","title":"Exceptions","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw \u0914\u0930 throws</li> <li>\u0915\u0938\u094d\u091f\u092e \u0905\u092a\u0935\u093e\u0926 \u092c\u0928\u093e\u0928\u093e (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, throw new MyException)</li> </ul>"},{"location":"languages/hi/phase1/#_9","title":"\u0906\u0935\u0936\u094d\u092f\u0915 \u0909\u092a\u0915\u0930\u0923","text":"<ul> <li>Terminal: cd, ls, mkdir</li> <li>Git: init, add, commit, push, pull, branch, merge</li> <li>GitHub: \u0930\u093f\u092a\u0949\u091c\u093f\u091f\u0930\u0940 \u092c\u0928\u093e\u0928\u093e, pull requests, \u0915\u094d\u0932\u094b\u0928\u093f\u0902\u0917</li> </ul>"},{"location":"languages/hi/phase1/#_10","title":"\u0905\u0902\u0924\u093f\u092e \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f\u094d\u0938","text":"<ul> <li>\u0938\u093e\u0927\u093e\u0930\u0923 \u0915\u0948\u0932\u0915\u0941\u0932\u0947\u091f\u0930 \u0914\u0930 \u090f\u0915 \u091f\u093e\u0938\u094d\u0915 \u092e\u0948\u0928\u0947\u091c\u0930</li> <li>\u0906\u0935\u0936\u094d\u092f\u0915\u0924\u093e\u090f\u0901:</li> <li>Git \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0947\u0902</li> <li>GitHub \u092a\u0930 \u092a\u094d\u0930\u0915\u093e\u0936\u093f\u0924 \u0915\u0930\u0947\u0902</li> <li>\u0935\u094d\u092f\u093e\u0916\u094d\u092f\u093e\u0924\u094d\u092e\u0915 README</li> </ul>"},{"location":"languages/hi/phase1/#_11","title":"\u0938\u0902\u0938\u093e\u0927\u0928","text":"<ul> <li>MOOC from the University of Helsinki</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/hi/phase2/","title":"\u091a\u0930\u0923 2 \u2013 \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f-\u0913\u0930\u093f\u090f\u0902\u091f\u0947\u0921 \u092a\u094d\u0930\u094b\u0917\u094d\u0930\u093e\u092e\u093f\u0902\u0917 (2-3 \u092e\u0939\u0940\u0928\u0947)","text":""},{"location":"languages/hi/phase2/#_1","title":"\u0915\u094d\u0932\u093e\u0938\u0947\u0938, \u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f\u094d\u0938, \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u090f\u0901 \u0914\u0930 \u092e\u0947\u0925\u0921\u094d\u0938","text":"<ul> <li>\u0915\u094d\u0932\u093e\u0938 \u0938\u0902\u0930\u091a\u0928\u093e</li> <li>\u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0907\u0902\u0938\u094d\u091f\u0948\u0902\u0936\u093f\u090f\u0936\u0928</li> <li>this \u0915\u093e \u0909\u092a\u092f\u094b\u0917</li> <li>\u0938\u0930\u094d\u0935\u094b\u0924\u094d\u0924\u092e \u0905\u092d\u094d\u092f\u093e\u0938: \u0928\u093e\u092e\u0915\u0930\u0923, \u0915\u094b\u0921 \u0938\u0902\u0917\u0920\u0928</li> </ul>"},{"location":"languages/hi/phase2/#_2","title":"\u090f\u0928\u0915\u0948\u092a\u094d\u0938\u0941\u0932\u0947\u0936\u0928, \u0907\u0928\u0939\u0947\u0930\u093f\u091f\u0947\u0902\u0938, \u092a\u0949\u0932\u093f\u092e\u0949\u0930\u094d\u092b\u093f\u091c\u094d\u092e \u0914\u0930 \u090f\u092c\u094d\u0938\u091f\u094d\u0930\u0948\u0915\u094d\u0936\u0928","text":"<ul> <li>Encapsulation: private, getters/setters, \u0935\u0948\u0932\u093f\u0921\u0947\u0936\u0928</li> <li>Inheritance: extends, overriding (@Override)</li> <li>Polymorphism: \u0938\u092c\u091f\u093e\u0907\u092a, method overloading</li> <li>Abstraction: \u0905\u0935\u0932\u094b\u0915\u0928, \u0907\u0902\u091f\u0930\u092b\u0947\u0938 \u0914\u0930 \u090f\u092c\u094d\u0938\u091f\u094d\u0930\u0948\u0915\u094d\u091f \u0915\u094d\u0932\u093e\u0938\u0947\u0938 \u0915\u0947 \u0932\u093f\u090f \u0924\u0948\u092f\u093e\u0930\u0940</li> </ul>"},{"location":"languages/hi/phase2/#_3","title":"\u0907\u0902\u091f\u0930\u092b\u0947\u0938 \u0914\u0930 \u090f\u092c\u094d\u0938\u091f\u094d\u0930\u0948\u0915\u094d\u091f \u0915\u094d\u0932\u093e\u0938\u0947\u0938","text":"<ul> <li>Interfaces: implements, default methods</li> <li>Abstract classes: \u090f\u092c\u094d\u0938\u091f\u094d\u0930\u0948\u0915\u094d\u091f \u0914\u0930 \u0915\u0902\u0915\u094d\u0930\u0940\u091f \u092e\u0947\u0925\u0921\u094d\u0938</li> <li>\u0907\u0902\u091f\u0930\u092b\u0947\u0938 \u0914\u0930 \u090f\u092c\u094d\u0938\u091f\u094d\u0930\u0948\u0915\u094d\u091f \u0915\u094d\u0932\u093e\u0938 \u0915\u0947 \u092c\u0940\u091a \u0905\u0902\u0924\u0930</li> </ul>"},{"location":"languages/hi/phase2/#_4","title":"\u0915\u0902\u0938\u094d\u091f\u094d\u0930\u0915\u094d\u091f\u0930\u094d\u0938, \u0907\u0928\u093f\u0936\u093f\u092f\u0932\u093e\u0907\u091c\u0930\u094d\u0938 \u0914\u0930 \u0938\u094d\u091f\u0948\u091f\u093f\u0915 \u092c\u094d\u0932\u0949\u0915\u094d\u0938","text":"<ul> <li>\u0921\u093f\u092b\u093c\u0949\u0932\u094d\u091f \u0914\u0930 \u092a\u0948\u0930\u093e\u092e\u0940\u091f\u0930\u093e\u0907\u091c\u094d\u0921 \u0915\u0902\u0938\u094d\u091f\u094d\u0930\u0915\u094d\u091f\u0930\u094d\u0938, this() \u0915\u0947 \u0938\u093e\u0925 \u0915\u0949\u0932</li> <li>\u0907\u0928\u093f\u0936\u093f\u092f\u0932\u093e\u0907\u091c\u0947\u0936\u0928 \u092c\u094d\u0932\u0949\u0915\u094d\u0938 ({}) \u0914\u0930 \u0938\u094d\u091f\u0948\u091f\u093f\u0915 \u092c\u094d\u0932\u0949\u0915\u094d\u0938 (static {})</li> </ul>"},{"location":"languages/hi/phase2/#_5","title":"\u090f\u0928\u094d\u092f\u0942\u092e\u0930\u0947\u0936\u0928\u094d\u0938","text":"<ul> <li>enum \u092c\u0928\u093e\u0928\u093e \u0914\u0930 \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0928\u093e</li> <li>enums \u092e\u0947\u0902 \u092e\u0947\u0925\u0921\u094d\u0938 \u0914\u0930 \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u090f\u0901</li> </ul>"},{"location":"languages/hi/phase2/#_6","title":"\u092e\u0942\u0932 \u0915\u0932\u0947\u0915\u094d\u0936\u0928\u094d\u0938","text":"<ul> <li>ArrayList: \u091c\u094b\u0921\u093c\u0928\u093e, \u0939\u091f\u093e\u0928\u093e, \u0907\u091f\u0947\u0930\u0947\u0936\u0928 (for, forEach, Iterator)</li> <li>HashMap: key-value, \u0938\u093e\u092e\u093e\u0928\u094d\u092f \u0911\u092a\u0930\u0947\u0936\u0928\u094d\u0938</li> <li>HashSet: \u0921\u0941\u092a\u094d\u0932\u093f\u0915\u0947\u091f \u0939\u091f\u093e\u0928\u093e</li> <li>Queue \u0914\u0930 Stack \u0915\u093e \u092a\u0930\u093f\u091a\u092f (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, LinkedList \u0915\u094b queue/stack \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0928\u093e)</li> <li>Java Collections Framework \u0915\u093e \u092a\u0930\u093f\u091a\u092f</li> </ul>"},{"location":"languages/hi/phase2/#_7","title":"\u092e\u0942\u0932 \u090f\u0932\u094d\u0917\u094b\u0930\u093f\u0926\u092e","text":"<ul> <li>\u0930\u0948\u0916\u093f\u0915 \u0914\u0930 \u092c\u093e\u0907\u0928\u0930\u0940 \u0938\u0930\u094d\u091a</li> <li>Sorting: Bubble Sort, Collections.sort()</li> <li>Recursion: \u0905\u0935\u0927\u093e\u0930\u0923\u093e\u090f\u0901 \u0914\u0930 \u0938\u093e\u0927\u093e\u0930\u0923 \u0909\u0926\u093e\u0939\u0930\u0923 (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, \u092b\u0948\u0915\u094d\u091f\u094b\u0930\u093f\u092f\u0932, \u092b\u093f\u092c\u094b\u0928\u093e\u091a\u0940)</li> <li>\u091c\u091f\u093f\u0932\u0924\u093e \u0915\u093e \u092a\u0930\u093f\u091a\u092f (O(n), O(log n))</li> </ul>"},{"location":"languages/hi/phase2/#_8","title":"\u091c\u0947\u0928\u0947\u0930\u093f\u0915\u094d\u0938","text":"<ul> <li>\u0938\u093f\u0928\u094d\u091f\u0948\u0915\u094d\u0938 (), \u091c\u0947\u0928\u0947\u0930\u093f\u0915 \u0915\u0932\u0947\u0915\u094d\u0936\u0928\u094d\u0938, \u091c\u0947\u0928\u0947\u0930\u093f\u0915 \u092e\u0947\u0925\u0921\u094d\u0938 <li>Bounds (extends, super)</li>"},{"location":"languages/hi/phase2/#stream-api","title":"Stream API (\u092a\u0930\u093f\u091a\u092f)","text":"<ul> <li>\u092e\u0942\u0932 \u0911\u092a\u0930\u0947\u0936\u0928\u094d\u0938: filter, map, collect</li> <li>ArrayList \u0915\u0947 \u0938\u093e\u0925 \u0909\u0926\u093e\u0939\u0930\u0923</li> </ul>"},{"location":"languages/hi/phase2/#_9","title":"\u092f\u0942\u0928\u093f\u091f \u091f\u0947\u0938\u094d\u091f\u093f\u0902\u0917 (\u092a\u0930\u093f\u091a\u092f)","text":"<ul> <li>JUnit \u0915\u093e \u092e\u0942\u0932 \u0909\u092a\u092f\u094b\u0917</li> <li>\u0915\u094d\u0932\u093e\u0938\u0947\u0938 \u0914\u0930 \u092e\u0947\u0925\u0921\u094d\u0938 \u0915\u0947 \u0932\u093f\u090f \u091f\u0947\u0938\u094d\u091f \u0915\u0947\u0938 \u0932\u093f\u0916\u0928\u093e</li> <li>TDD (Test-Driven Development) \u0915\u093e \u092a\u0930\u093f\u091a\u092f</li> </ul>"},{"location":"languages/hi/phase2/#_10","title":"\u0905\u0902\u0924\u093f\u092e \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f","text":"<ul> <li>\u0932\u093e\u0907\u092c\u094d\u0930\u0947\u0930\u0940 \u0938\u093f\u0938\u094d\u091f\u092e</li> <li>\u0915\u094d\u0932\u093e\u0938\u0947\u0938: Book, User, Library</li> <li>\u0907\u0928\u0939\u0947\u0930\u093f\u091f\u0947\u0902\u0938: DigitalBook \u0914\u0930 PhysicalBook</li> <li>\u0915\u0932\u0947\u0915\u094d\u0936\u0928\u094d\u0938: \u092a\u0941\u0938\u094d\u0924\u0915\u094b\u0902 \u0915\u0947 \u0932\u093f\u090f ArrayList, \u0909\u0927\u093e\u0930 \u0915\u0947 \u0932\u093f\u090f HashMap</li> <li>\u090f\u0928\u0915\u0948\u092a\u094d\u0938\u0941\u0932\u0947\u0936\u0928: \u0921\u0947\u091f\u093e \u0935\u0948\u0932\u093f\u0921\u0947\u0936\u0928</li> <li>Git: \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u092b\u0940\u091a\u0930 \u0915\u0947 \u0932\u093f\u090f commit (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, <code>feature/book-management</code>)</li> <li>GitHub \u092a\u0930 \u092a\u094d\u0930\u0915\u093e\u0936\u0928 \u0915\u0947 \u0938\u093e\u0925 \u0935\u094d\u092f\u093e\u0916\u094d\u092f\u093e\u0924\u094d\u092e\u0915 README</li> </ul>"},{"location":"languages/hi/phase2/#_11","title":"\u0905\u0926\u094d\u092f\u0924\u0928 \u0938\u0902\u0938\u093e\u0927\u0928","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java (\u092a\u0941\u0938\u094d\u0924\u0915)</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/hi/phase3/","title":"\u091a\u0930\u0923 3 \u2013 \u0921\u0947\u091f\u093e \u092a\u0930\u094d\u0938\u093f\u0938\u094d\u091f\u0947\u0902\u0938 \u0914\u0930 \u0938\u094d\u091f\u094d\u0930\u0940\u092e\u094d\u0938 (2-3 \u092e\u0939\u0940\u0928\u0947)","text":""},{"location":"languages/hi/phase3/#sql","title":"\u092e\u0942\u0932 SQL","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Keys: \u092a\u094d\u0930\u093e\u0907\u092e\u0930\u0940 \u0914\u0930 \u092b\u0949\u0930\u0947\u0928 \u0915\u0940\u091c\u093c\u0964  </li> <li>\u0928\u0949\u0930\u094d\u092e\u0932\u093e\u0907\u091c\u0947\u0936\u0928: 1NF, 2NF, 3NF\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: \u092a\u094d\u0930\u094b\u0921\u0915\u094d\u091f\u094d\u0938 \u0914\u0930 \u0915\u0948\u091f\u0947\u0917\u0930\u0940\u091c \u0915\u0947 \u0932\u093f\u090f \u091f\u0947\u092c\u0932 \u092c\u0928\u093e\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase3/#jdbc-connection-pool","title":"JDBC \u0914\u0930 Connection Pool","text":"<ul> <li>Classes: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>Connection Pool (HikariCP) \u0915\u093e \u0909\u092a\u092f\u094b\u0917\u0964  </li> <li>\u0938\u0930\u094d\u0935\u094b\u0924\u094d\u0924\u092e \u0905\u092d\u094d\u092f\u093e\u0938: <code>try-with-resources</code>, <code>SQLException</code> \u0915\u093e \u092a\u094d\u0930\u092c\u0902\u0927\u0928\u0964  </li> </ul>"},{"location":"languages/hi/phase3/#hibernate-jpa","title":"Hibernate + JPA \u0935\u094d\u092f\u0935\u0939\u093e\u0930 \u092e\u0947\u0902","text":"<ul> <li>Annotations: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>\u0915\u0949\u0928\u094d\u092b\u093c\u093f\u0917\u0930\u0947\u0936\u0928: <code>persistence.xml</code> \u092f\u093e <code>application.properties</code>.  </li> <li><code>EntityManager</code> \u0915\u0947 \u0938\u093e\u0925 CRUD \u0911\u092a\u0930\u0947\u0936\u0928\u094d\u0938\u0964  </li> <li>Flyway \u092f\u093e Liquibase \u0915\u0947 \u0938\u093e\u0925 \u0921\u0947\u091f\u093e\u092c\u0947\u0938 \u092e\u093e\u0907\u0917\u094d\u0930\u0947\u0936\u0928\u094d\u0938 \u0915\u093e \u092a\u0930\u093f\u091a\u092f\u0964</li> </ul>"},{"location":"languages/hi/phase3/#nosql","title":"NoSQL \u0921\u0947\u091f\u093e\u092c\u0947\u0938 \u0915\u093e \u092a\u0930\u093f\u091a\u092f","text":"<ul> <li>\u0905\u0935\u0927\u093e\u0930\u0923\u093e\u090f\u0901: \u0926\u0938\u094d\u0924\u093e\u0935\u0947\u091c\u093c, \u0915\u0932\u0947\u0915\u094d\u0936\u0928\u094d\u0938, \u0939\u0949\u0930\u093f\u091c\u0949\u0928\u094d\u091f\u0932 \u0938\u094d\u0915\u0947\u0932\u0947\u092c\u093f\u0932\u093f\u091f\u0940\u0964  </li> <li>MongoDB: \u0938\u0947\u091f\u0905\u092a, MongoRepository \u0915\u0947 \u0938\u093e\u0925 CRUD \u0911\u092a\u0930\u0947\u0936\u0928\u094d\u0938\u0964  </li> <li>Spring Data MongoDB: Spring Boot \u0915\u0947 \u0938\u093e\u0925 \u090f\u0915\u0940\u0915\u0930\u0923\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: MongoDB \u092e\u0947\u0902 \u092a\u094d\u0930\u094b\u0921\u0915\u094d\u091f\u094d\u0938 \u0915\u0947 \u0932\u093f\u090f \u0938\u093f\u0938\u094d\u091f\u092e \u0917\u0924\u093f\u0935\u093f\u0927\u093f \u0932\u0949\u0917\u094d\u0938 \u0938\u094d\u091f\u094b\u0930 \u0915\u0930\u0928\u093e\u0964</li> </ul>"},{"location":"languages/hi/phase3/#_1","title":"\u0938\u094d\u091f\u094d\u0930\u0940\u092e\u094d\u0938 \u0914\u0930 \u0932\u0948\u092e\u094d\u092c\u094d\u0921\u093e \u090f\u0915\u094d\u0938\u092a\u094d\u0930\u0947\u0936\u0928\u094d\u0938","text":"<ul> <li>\u0911\u092a\u0930\u0947\u0936\u0928\u094d\u0938: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: \u0915\u0940\u092e\u0924 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u092a\u094d\u0930\u094b\u0921\u0915\u094d\u091f\u094d\u0938 \u0915\u094b \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930\u0928\u093e, \u0928\u093e\u092e \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u0938\u0949\u0930\u094d\u091f \u0915\u0930\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase3/#optional-functional-interfaces","title":"Optional \u0914\u0930 Functional Interfaces","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>Functional Interfaces: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: \u0938\u094d\u091f\u094d\u0930\u0940\u092e\u094d\u0938 \u092e\u0947\u0902 \u0921\u0947\u091f\u093e \u092b\u093c\u093f\u0932\u094d\u091f\u0930 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f <code>Predicate</code> \u0915\u093e \u0909\u092a\u092f\u094b\u0917\u0964  </li> </ul>"},{"location":"languages/hi/phase3/#_2","title":"\u0909\u0928\u094d\u0928\u0924 \u0915\u0932\u0947\u0915\u094d\u0936\u0928\u094d\u0938","text":"<ul> <li>LinkedList: \u0915\u0941\u0936\u0932\u0924\u093e\u092a\u0942\u0930\u094d\u0935\u0915 \u091c\u094b\u0921\u093c\u0928\u093e/\u0939\u091f\u093e\u0928\u093e\u0964  </li> <li>TreeMap: \u0915\u094d\u0930\u092e\u092c\u0926\u094d\u0927 key-value \u091c\u094b\u0921\u093c\u0947\u0964  </li> <li>PriorityQueue: \u092a\u094d\u0930\u093e\u092f\u094b\u0930\u093f\u091f\u0940 \u0915\u094d\u092f\u0942\u0964  </li> <li>LinkedHashMap \u0914\u0930 Deque (\u092a\u0930\u093f\u091a\u092f)\u0964  </li> </ul>"},{"location":"languages/hi/phase3/#slf4jlogback","title":"\u0932\u0949\u0917\u093f\u0902\u0917 (SLF4J/Logback)","text":"<ul> <li>SLF4J \u0915\u0947 \u0938\u093e\u0925 Logback \u0915\u093e \u0915\u0949\u0928\u094d\u092b\u093c\u093f\u0917\u0930\u0947\u0936\u0928\u0964  </li> <li>\u0932\u0947\u0935\u0932\u094d\u0938: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: Hibernate \u0915\u094d\u0935\u0947\u0930\u0940\u091c\u093c \u0915\u094b \u0932\u0949\u0917 \u0915\u0930\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase3/#acid","title":"\u091f\u094d\u0930\u093e\u0902\u091c\u0947\u0915\u094d\u0936\u0928 \u0905\u0935\u0927\u093e\u0930\u0923\u093e\u090f\u0901 (ACID)","text":"<ul> <li>\u092a\u0930\u092e\u093e\u0923\u0941\u0915\u0924\u093e, \u0938\u0902\u0917\u0924\u0924\u093e, \u0905\u0932\u0917\u093e\u0935, \u0938\u094d\u0925\u093e\u092f\u093f\u0924\u094d\u0935\u0964  </li> <li>JDBC (<code>commit</code>, <code>rollback</code>) \u0914\u0930 Hibernate (<code>@Transactional</code>) \u0915\u0947 \u0938\u093e\u0925 \u091f\u094d\u0930\u093e\u0902\u091c\u0947\u0915\u094d\u0936\u0928\u094d\u0938\u0964  </li> </ul>"},{"location":"languages/hi/phase3/#_3","title":"\u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u0914\u0930 \u090f\u0915\u094d\u091c\u0940\u0915\u094d\u092f\u0942\u0936\u0928 \u092a\u094d\u0932\u093e\u0928\u094d\u0938","text":"<ul> <li>Indexes: \u092a\u094d\u0930\u093e\u0907\u092e\u0930\u0940, \u092f\u0942\u0928\u093f\u0915, \u0915\u092e\u094d\u092a\u094b\u091c\u093f\u091f\u0964  </li> <li>\u0915\u094d\u0935\u0947\u0930\u0940\u091c\u093c \u0915\u094b \u0905\u0928\u0941\u0915\u0942\u0932\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f EXPLAIN \u0915\u093e \u0909\u092a\u092f\u094b\u0917\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: \u092c\u093e\u0930-\u092c\u093e\u0930 \u0916\u094b\u091c\u0940 \u091c\u093e\u0928\u0947 \u0935\u093e\u0932\u0940 \u0915\u0949\u0932\u092e \u092a\u0930 \u0907\u0902\u0921\u0947\u0915\u094d\u0938 \u092c\u0928\u093e\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase3/#_4","title":"\u092b\u093e\u0907\u0932 \u092e\u0948\u0928\u093f\u092a\u0941\u0932\u0947\u0936\u0928 (\u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915)","text":"<ul> <li><code>Files</code>, <code>BufferedReader</code> \u0915\u0947 \u0938\u093e\u0925 \u092a\u0922\u093c\u0928\u093e \u0914\u0930 \u0932\u093f\u0916\u0928\u093e\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: \u0938\u094d\u091f\u094d\u0930\u0940\u092e\u094d\u0938 \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0915\u0947 CSV \u092e\u0947\u0902 \u092a\u094d\u0930\u094b\u0921\u0915\u094d\u091f \u0930\u093f\u092a\u094b\u0930\u094d\u091f \u0928\u093f\u0930\u094d\u092f\u093e\u0924 \u0915\u0930\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase3/#_5","title":"\u0921\u0947\u091f\u093e\u092c\u0947\u0938 \u091f\u0947\u0938\u094d\u091f\u093f\u0902\u0917 (\u092a\u0930\u093f\u091a\u092f)","text":"<ul> <li>H2 \u0914\u0930 JUnit \u0915\u0947 \u0938\u093e\u0925 \u0907\u0902\u091f\u0940\u0917\u094d\u0930\u0947\u0936\u0928 \u091f\u0947\u0938\u094d\u091f\u094d\u0938\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: Hibernate \u0915\u0947 \u0938\u093e\u0925 CRUD \u0911\u092a\u0930\u0947\u0936\u0928\u094d\u0938 \u0915\u093e \u091f\u0947\u0938\u094d\u091f \u0915\u0930\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase3/#_6","title":"\u0905\u0902\u0924\u093f\u092e \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f","text":"<p>\u092a\u094d\u0930\u094b\u0921\u0915\u094d\u091f \u092e\u0948\u0928\u0947\u091c\u092e\u0947\u0902\u091f \u0938\u093f\u0938\u094d\u091f\u092e - \u0921\u0947\u091f\u093e\u092c\u0947\u0938: Product \u0914\u0930 Category \u091f\u0947\u092c\u0932\u094d\u0938 (1:N \u0938\u0902\u092c\u0902\u0927)\u0964 - Java: JPA (<code>Product</code>, <code>Category</code>) \u0915\u0947 \u0938\u093e\u0925 \u0915\u094d\u0932\u093e\u0938\u0947\u0938, Hibernate \u0915\u0947 \u0938\u093e\u0925 CRUD\u0964 - \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915: MongoDB \u092e\u0947\u0902 \u092a\u094d\u0930\u094b\u0921\u0915\u094d\u091f \u092a\u0930\u093f\u0935\u0930\u094d\u0924\u0928 \u0932\u0949\u0917\u094d\u0938 \u0938\u094d\u091f\u094b\u0930 \u0915\u0930\u0928\u093e\u0964 - \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915: MongoDB \u092e\u0947\u0902 \u0921\u093e\u092f\u0928\u093e\u092e\u093f\u0915 \u092a\u094d\u0930\u094b\u0921\u0915\u094d\u091f \u0935\u093f\u0936\u0947\u0937\u0924\u093e\u090f\u0901 (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, \u0924\u0915\u0928\u0940\u0915\u0940 \u0935\u093f\u0928\u093f\u0930\u094d\u0926\u0947\u0936) \u0938\u094d\u091f\u094b\u0930 \u0915\u0930\u0928\u093e\u0964 - \u0938\u094d\u091f\u094d\u0930\u0940\u092e\u094d\u0938: \u092a\u094d\u0930\u094b\u0921\u0915\u094d\u091f\u094d\u0938 \u0915\u094b \u092b\u093c\u093f\u0932\u094d\u091f\u0930/\u0938\u0949\u0930\u094d\u091f \u0915\u0930\u0928\u093e (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, \u0915\u0940\u092e\u0924 \u092f\u093e \u0915\u0948\u091f\u0947\u0917\u0930\u0940 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930)\u0964 - \u0932\u0949\u0917\u093f\u0902\u0917: \u0921\u0947\u091f\u093e\u092c\u0947\u0938 \u0911\u092a\u0930\u0947\u0936\u0928\u094d\u0938 \u0915\u0940 \u0928\u093f\u0917\u0930\u093e\u0928\u0940\u0964 - Git: \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u092b\u0940\u091a\u0930 \u0915\u0947 \u0932\u093f\u090f commit (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, <code>feature/crud</code>, <code>feature/streams</code>)\u0964 - GitHub \u092a\u0930 \u092a\u094d\u0930\u0915\u093e\u0936\u0928 \u0915\u0947 \u0938\u093e\u0925 \u0935\u094d\u092f\u093e\u0916\u094d\u092f\u093e\u0924\u094d\u092e\u0915 README\u0964  </p>"},{"location":"languages/hi/phase3/#_7","title":"\u0938\u0902\u0938\u093e\u0927\u0928","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/hi/phase4/","title":"\u091a\u0930\u0923 4 \u2013 \u092b\u094d\u0930\u0947\u092e\u0935\u0930\u094d\u0915\u094d\u0938 \u0914\u0930 \u0935\u0947\u092c \u090f\u092a\u094d\u0932\u093f\u0915\u0947\u0936\u0928\u094d\u0938 (3-4 \u092e\u0939\u0940\u0928\u0947)","text":""},{"location":"languages/hi/phase4/#spring-boot-spring-core-spring-data-jpa","title":"Spring Boot, Spring Core, \u0914\u0930 Spring Data JPA","text":"<ul> <li>Spring Core: Dependency Injection (<code>@Bean</code>, <code>@Autowired</code>), IoC Container.  </li> <li>Spring Boot: Auto-Configuration, Starters (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>), <code>application.yml</code>.  </li> <li>Spring Data JPA: Repositories (<code>CrudRepository</code>, <code>JpaRepository</code>), <code>@Query</code> \u0915\u0947 \u0938\u093e\u0925 \u0915\u094d\u0935\u0947\u0930\u0940\u091c\u093c, \u092a\u0947\u091c\u093f\u0928\u0947\u0936\u0928\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: \u091f\u093e\u0938\u094d\u0915 \u0910\u092a \u092e\u0947\u0902 \u091f\u093e\u0938\u094d\u0915 \u092a\u094d\u0930\u092c\u0902\u0927\u0928 \u0915\u0947 \u0932\u093f\u090f REST Endpoints \u092c\u0928\u093e\u0928\u093e (CRUD).  </li> </ul>"},{"location":"languages/hi/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>\u0905\u0935\u0927\u093e\u0930\u0923\u093e\u090f\u0901: Authentication, Authorization, Security Filters.  </li> <li>JWT: \u091f\u094b\u0915\u0928 \u092c\u0928\u093e\u0928\u093e \u0914\u0930 \u0938\u0924\u094d\u092f\u093e\u092a\u093f\u0924 \u0915\u0930\u0928\u093e, <code>JwtAuthenticationFilter</code> \u0915\u093e \u0909\u092a\u092f\u094b\u0917\u0964  </li> <li>OAuth2: Resource Server \u0915\u0949\u0928\u094d\u092b\u093c\u093f\u0917\u0930 \u0915\u0930\u0928\u093e, \u0915\u093f\u0938\u0940 \u092a\u094d\u0930\u0926\u093e\u0924\u093e (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, Google) \u0915\u0947 \u0938\u093e\u0925 \u090f\u0915\u0940\u0915\u0930\u0923\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: JWT \u0914\u0930 roles (<code>ADMIN</code>, <code>USER</code>) \u0915\u0947 \u0938\u093e\u0925 \u091f\u093e\u0938\u094d\u0915 endpoints \u0915\u094b \u0938\u0941\u0930\u0915\u094d\u0937\u093f\u0924 \u0915\u0930\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase4/#_1","title":"\u092f\u0942\u0928\u093f\u091f \u0914\u0930 \u0907\u0902\u091f\u0940\u0917\u094d\u0930\u0947\u0936\u0928 \u091f\u0947\u0938\u094d\u091f\u093f\u0902\u0917","text":"<ul> <li>Unit Tests: JUnit 5, Mockito (<code>@Mock</code>, <code>@InjectMocks</code>), \u092c\u093f\u091c\u0928\u0947\u0938 \u0932\u0949\u091c\u093f\u0915 \u0915\u093e \u091f\u0947\u0938\u094d\u091f\u0964  </li> <li>Integration Tests: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, \u091f\u0947\u0938\u094d\u091f\u093f\u0902\u0917 \u0915\u0947 \u0932\u093f\u090f H2 \u0921\u0947\u091f\u093e\u092c\u0947\u0938\u0964  </li> <li>Testcontainers: Docker \u0915\u0902\u091f\u0947\u0928\u0930 \u092e\u0947\u0902 PostgreSQL \u0915\u0947 \u0938\u093e\u0925 \u091f\u0947\u0938\u094d\u091f\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: \u091f\u093e\u0938\u094d\u0915 \u0910\u092a \u0915\u0947 \u0938\u0930\u094d\u0935\u093f\u0938\u0947\u091c \u0914\u0930 endpoints \u0915\u093e \u091f\u0947\u0938\u094d\u091f \u0915\u0930\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase4/#restful-apis-swagger","title":"RESTful APIs \u0914\u0930 Swagger \u0915\u0947 \u0938\u093e\u0925 \u0921\u093e\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f\u0947\u0936\u0928","text":"<ul> <li>REST: HTTP \u092e\u0947\u0925\u0921\u094d\u0938, \u0938\u094d\u091f\u0947\u091f\u0938 \u0915\u094b\u0921\u094d\u0938, RESTful \u0938\u093f\u0926\u094d\u0927\u093e\u0902\u0924\u0964  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>.  </li> <li>Swagger: springdoc-openapi \u0915\u0949\u0928\u094d\u092b\u093c\u093f\u0917\u0930 \u0915\u0930\u0928\u093e, <code>@Operation</code> \u0915\u0947 \u0938\u093e\u0925 \u090f\u0928\u094b\u091f\u0947\u091f \u0915\u0930\u0928\u093e\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: Swagger UI \u0915\u0947 \u0938\u093e\u0925 \u091f\u093e\u0938\u094d\u0915 \u0910\u092a endpoints \u0915\u093e \u0921\u093e\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f\u0947\u0936\u0928\u0964  </li> </ul>"},{"location":"languages/hi/phase4/#graphql","title":"GraphQL \u0915\u093e \u092a\u0930\u093f\u091a\u092f","text":"<ul> <li>\u0905\u0935\u0927\u093e\u0930\u0923\u093e\u090f\u0901: Queries, Mutations, Schema.  </li> <li>Spring Boot with GraphQL: spring-boot-starter-graphql \u0915\u0947 \u0938\u093e\u0925 \u0938\u0947\u091f\u0905\u092a\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: \u0938\u094d\u091f\u0947\u091f\u0938 \u0915\u0947 \u0906\u0927\u093e\u0930 \u092a\u0930 \u091f\u093e\u0938\u094d\u0915 \u0932\u093f\u0938\u094d\u091f \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f GraphQL Query \u092c\u0928\u093e\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase4/#_2","title":"\u092e\u0942\u0932 \u092b\u094d\u0930\u0902\u091f\u090f\u0902\u0921 \u0907\u0902\u091f\u0940\u0917\u094d\u0930\u0947\u0936\u0928","text":"<ul> <li>Thymeleaf: Spring Boot \u0915\u0947 \u0938\u093e\u0925 HTML \u092a\u0947\u091c \u0930\u0947\u0902\u0921\u0930 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u091f\u0947\u092e\u094d\u092a\u0932\u0947\u091f\u094d\u0938\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: \u091f\u093e\u0938\u094d\u0915 \u0926\u0947\u0916\u0928\u0947 \u0914\u0930 \u092c\u0928\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u090f\u0915 \u0938\u093e\u0927\u093e\u0930\u0923 \u0935\u0947\u092c \u0907\u0902\u091f\u0930\u092b\u0947\u0938 \u092c\u0928\u093e\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase4/#maven-gradle","title":"\u092c\u093f\u0932\u094d\u0921 \u091f\u0942\u0932\u094d\u0938: Maven \u0914\u0930 Gradle","text":"<ul> <li>Maven: <code>pom.xml</code> \u0915\u0940 \u0938\u0902\u0930\u091a\u0928\u093e, \u0921\u093f\u092a\u0947\u0902\u0921\u0947\u0902\u0938\u0940\u091c\u093c, \u092a\u094d\u0932\u0917\u0907\u0928\u094d\u0938\u0964  </li> <li>Gradle: <code>build.gradle</code> \u092b\u093c\u093e\u0907\u0932, \u091f\u093e\u0938\u094d\u0915\u094d\u0938, \u0921\u093f\u092a\u0947\u0902\u0921\u0947\u0902\u0938\u0940 \u092e\u0948\u0928\u0947\u091c\u092e\u0947\u0902\u091f\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: Maven \u0914\u0930 Gradle \u0915\u0947 \u0938\u093e\u0925 \u091f\u093e\u0938\u094d\u0915 \u0910\u092a \u0915\u0949\u0928\u094d\u092b\u093c\u093f\u0917\u0930 \u0915\u0930\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase4/#_3","title":"\u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f \u0921\u093f\u092a\u094d\u0932\u0949\u092f\u092e\u0947\u0902\u091f","text":"<ul> <li>\u092a\u094d\u0932\u0947\u091f\u092b\u0949\u0930\u094d\u092e\u094d\u0938: Railway, Heroku, AWS (Elastic Beanstalk).  </li> <li>\u091a\u0930\u0923: JAR \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u092a\u0948\u0915\u0947\u091c\u093f\u0902\u0917, GitHub Actions \u0915\u0947 \u0938\u093e\u0925 CI/CD \u0915\u0949\u0928\u094d\u092b\u093c\u093f\u0917\u0930 \u0915\u0930\u0928\u093e\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: PostgreSQL \u0915\u0947 \u0938\u093e\u0925 Railway \u092a\u0930 \u091f\u093e\u0938\u094d\u0915 \u0910\u092a \u0921\u093f\u092a\u094d\u0932\u0949\u092f \u0915\u0930\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase4/#_4","title":"\u0905\u0902\u0924\u093f\u092e \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f","text":"<p>\u091f\u093e\u0938\u094d\u0915 \u092e\u0948\u0928\u0947\u091c\u092e\u0947\u0902\u091f \u0938\u093f\u0938\u094d\u091f\u092e - \u0921\u0947\u091f\u093e\u092c\u0947\u0938: <code>Task</code> (\u0936\u0940\u0930\u094d\u0937\u0915, \u0935\u093f\u0935\u0930\u0923, \u0938\u094d\u091f\u0947\u091f\u0938) \u0914\u0930 <code>User</code> \u091f\u0947\u092c\u0932\u094d\u0938 (1:N \u0938\u0902\u092c\u0902\u0927)\u0964 - Java: Spring Boot, Spring Data JPA \u0915\u0947 \u0938\u093e\u0925 REST API \u092c\u0928\u093e\u0928\u093e \u0914\u0930 CRUD\u0964 - \u0938\u093f\u0915\u094d\u092f\u094b\u0930\u093f\u091f\u0940: JWT Authentication, roles (<code>ADMIN</code>, <code>USER</code>). - \u091f\u0947\u0938\u094d\u091f\u094d\u0938: \u092f\u0942\u0928\u093f\u091f \u091f\u0947\u0938\u094d\u091f\u094d\u0938 (\u0938\u0930\u094d\u0935\u093f\u0938\u0947\u091c) \u0914\u0930 \u0907\u0902\u091f\u0940\u0917\u094d\u0930\u0947\u0936\u0928 \u091f\u0947\u0938\u094d\u091f\u094d\u0938 (Testcontainers \u0915\u0947 \u0938\u093e\u0925 endpoints)\u0964 - \u0921\u093e\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f\u0947\u0936\u0928: endpoints \u0915\u0947 \u0935\u093f\u0935\u0930\u0923 \u0915\u0947 \u0938\u093e\u0925 Swagger UI\u0964 - \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915: \u091f\u093e\u0938\u094d\u0915 \u0932\u093f\u0938\u094d\u091f \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f GraphQL Query \u0914\u0930 \u0907\u0902\u091f\u0930\u0948\u0915\u094d\u0936\u0928 \u0915\u0947 \u0932\u093f\u090f Thymeleaf \u0907\u0902\u091f\u0930\u092b\u0947\u0938 \u091c\u094b\u0921\u093c\u0928\u093e\u0964 - Git: \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u092b\u0940\u091a\u0930 \u0915\u0947 \u0932\u093f\u090f commit (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, <code>feature/rest-api</code>, <code>feature/security</code>)\u0964 - \u092a\u094d\u0930\u0915\u093e\u0936\u0928: GitHub \u092a\u0930 README \u0915\u0947 \u0938\u093e\u0925 (\u0938\u0947\u091f\u0905\u092a, endpoints, \u0921\u093f\u092a\u094d\u0932\u0949\u092f\u092e\u0947\u0902\u091f)\u0964  </p>"},{"location":"languages/hi/phase4/#_5","title":"\u0938\u0902\u0938\u093e\u0927\u0928","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/hi/phase5/","title":"\u091a\u0930\u0923 5 \u2013 \u0906\u0930\u094d\u0915\u093f\u091f\u0947\u0915\u094d\u091a\u0930 \u0914\u0930 \u0915\u0928\u0915\u0930\u0947\u0902\u0938\u0940 (2-3 \u092e\u0939\u0940\u0928\u0947)","text":""},{"location":"languages/hi/phase5/#clean-code-solid","title":"Clean Code \u0914\u0930 SOLID \u0938\u093f\u0926\u094d\u0927\u093e\u0902\u0924","text":"<ul> <li>Clean Code: \u0938\u094d\u092a\u0937\u094d\u091f \u0928\u093e\u092e\u0915\u0930\u0923, \u091b\u094b\u091f\u0947 \u092b\u0902\u0915\u094d\u0936\u0928\u094d\u0938, \u0909\u092a\u092f\u094b\u0917\u0940 \u091f\u093f\u092a\u094d\u092a\u0923\u093f\u092f\u093e\u0901, \u0938\u0941\u0938\u0902\u0917\u0924 \u092b\u0949\u0930\u094d\u092e\u0947\u091f\u093f\u0902\u0917\u0964  </li> <li>SOLID:  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>\u0909\u0926\u093e\u0939\u0930\u0923: \u091f\u093e\u0938\u094d\u0915 \u092e\u0948\u0928\u0947\u091c\u0930 \u092e\u0947\u0902 \u090f\u0915 \u0938\u0930\u094d\u0935\u093f\u0938 \u0915\u094b SOLID \u0938\u093f\u0926\u094d\u0927\u093e\u0902\u0924\u094b\u0902 \u0915\u0947 \u0905\u0928\u0941\u0938\u093e\u0930 \u0930\u093f\u092b\u0948\u0915\u094d\u091f\u0930 \u0915\u0930\u0928\u093e\u0964  </p>"},{"location":"languages/hi/phase5/#_1","title":"\u0921\u093f\u091c\u093c\u093e\u0907\u0928 \u092a\u0948\u091f\u0930\u094d\u0928\u094d\u0938","text":"<ul> <li>\u092a\u0948\u091f\u0930\u094d\u0928\u094d\u0938: Factory (\u0928\u093f\u0930\u094d\u092e\u093e\u0923), Singleton (\u090f\u0915\u0932 \u0907\u0902\u0938\u094d\u091f\u0948\u0902\u0938), Builder (\u0911\u092c\u094d\u091c\u0947\u0915\u094d\u091f \u0928\u093f\u0930\u094d\u092e\u093e\u0923), Strategy (\u0935\u094d\u092f\u0935\u0939\u093e\u0930), Observer (\u0907\u0935\u0947\u0902\u091f\u094d\u0938)\u0964  </li> <li>\u090f\u092a\u094d\u0932\u093f\u0915\u0947\u0936\u0928: \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f \u0938\u0902\u0926\u0930\u094d\u092d \u0915\u0947 \u0932\u093f\u090f \u0909\u092a\u092f\u0941\u0915\u094d\u0924 \u092a\u0948\u091f\u0930\u094d\u0928\u094d\u0938 \u0915\u093e \u091a\u092f\u0928\u0964  </li> </ul> <p>\u0909\u0926\u093e\u0939\u0930\u0923: \u0935\u093f\u092d\u093f\u0928\u094d\u0928 \u091f\u093e\u0938\u094d\u0915 \u092a\u094d\u0930\u093e\u092f\u094b\u0930\u093f\u091f\u093e\u0907\u091c\u0947\u0936\u0928 \u090f\u0932\u094d\u0917\u094b\u0930\u093f\u0926\u092e \u0915\u0947 \u0932\u093f\u090f Strategy \u0915\u093e \u0909\u092a\u092f\u094b\u0917\u0964  </p>"},{"location":"languages/hi/phase5/#_2","title":"\u0925\u094d\u0930\u0947\u0921\u094d\u0938 \u0914\u0930 \u0915\u0928\u0915\u0930\u0947\u0902\u0938\u0940","text":"<ul> <li>\u0905\u0935\u0927\u093e\u0930\u0923\u093e\u090f\u0901: Thread, Runnable, ExecutorService, ForkJoinPool\u0964  </li> <li>\u0924\u0915\u0928\u0940\u0915\u0947\u0902: \u0925\u094d\u0930\u0947\u0921 \u092a\u0942\u0932 \u092c\u0928\u093e\u0928\u093e \u0914\u0930 \u092a\u094d\u0930\u092c\u0902\u0927\u0928, \u090f\u0938\u093f\u0902\u0915\u094d\u0930\u094b\u0928\u0938 \u091f\u093e\u0938\u094d\u0915\u094d\u0938\u0964  </li> </ul> <p>\u0909\u0926\u093e\u0939\u0930\u0923: ExecutorService \u0915\u0947 \u0938\u093e\u0925 \u091f\u093e\u0938\u094d\u0915 \u0930\u093f\u092a\u094b\u0930\u094d\u091f\u094d\u0938 \u0915\u094b \u0938\u092e\u093e\u0928\u093e\u0902\u0924\u0930 \u092e\u0947\u0902 \u092a\u094d\u0930\u094b\u0938\u0947\u0938 \u0915\u0930\u0928\u093e\u0964  </p>"},{"location":"languages/hi/phase5/#_3","title":"\u0938\u093f\u0902\u0915\u094d\u0930\u094b\u0928\u093e\u0907\u091c\u093c\u0947\u0936\u0928 \u0914\u0930 \u0915\u0928\u0915\u0930\u0947\u0902\u0938\u0940 \u0938\u092e\u0938\u094d\u092f\u093e\u090f\u0901","text":"<ul> <li>\u092e\u0948\u0915\u0947\u0928\u093f\u091c\u093c\u094d\u092e\u094d\u0938: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>\u0964  </li> <li>\u0938\u092e\u0938\u094d\u092f\u093e\u090f\u0901: Deadlock, Race Condition, Starvation\u0964  </li> </ul> <p>\u0909\u0926\u093e\u0939\u0930\u0923: \u0938\u093e\u091d\u093e \u091f\u093e\u0938\u094d\u0915 \u0932\u093f\u0938\u094d\u091f \u092e\u0947\u0902 \u0938\u0941\u0930\u0915\u094d\u0937\u093f\u0924 \u092a\u0939\u0941\u0901\u091a \u0932\u093e\u0917\u0942 \u0915\u0930\u0928\u093e\u0964  </p>"},{"location":"languages/hi/phase5/#_4","title":"\u092e\u093e\u0907\u0915\u094d\u0930\u094b\u0938\u0930\u094d\u0935\u093f\u0938\u0947\u091c\u093c \u0915\u093e \u092a\u0930\u093f\u091a\u092f","text":"<ul> <li>\u0905\u0935\u0927\u093e\u0930\u0923\u093e\u090f\u0901: \u092e\u093e\u0907\u0915\u094d\u0930\u094b\u0938\u0930\u094d\u0935\u093f\u0938\u0947\u091c\u093c \u0906\u0930\u094d\u0915\u093f\u091f\u0947\u0915\u094d\u091a\u0930, REST \u0915\u092e\u094d\u092f\u0941\u0928\u093f\u0915\u0947\u0936\u0928, \u0938\u0930\u094d\u0935\u093f\u0938 \u0921\u093f\u0938\u094d\u0915\u0935\u0930\u0940\u0964  </li> <li>\u091f\u0942\u0932\u094d\u0938: Spring Cloud (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, Eureka for service discovery)\u0964  </li> </ul> <p>\u0909\u0926\u093e\u0939\u0930\u0923: \u091f\u093e\u0938\u094d\u0915 \u092e\u0948\u0928\u0947\u091c\u0930 \u0915\u094b \u092e\u093e\u0907\u0915\u094d\u0930\u094b\u0938\u0930\u094d\u0935\u093f\u0938\u0947\u091c\u093c (\u091f\u093e\u0938\u094d\u0915\u094d\u0938 \u0914\u0930 \u092f\u0942\u091c\u0930\u094d\u0938) \u092e\u0947\u0902 \u0935\u093f\u092d\u093e\u091c\u093f\u0924 \u0915\u0930\u0928\u093e\u0964  </p>"},{"location":"languages/hi/phase5/#_5","title":"\u092e\u0947\u0938\u0947\u091c \u0915\u094d\u092f\u0942 \u092b\u0902\u0921\u093e\u092e\u0947\u0902\u091f\u0932\u094d\u0938 (\u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915)","text":"<ul> <li>\u0905\u0935\u0927\u093e\u0930\u0923\u093e\u090f\u0901: Publisher/Subscriber, Queues, Topics\u0964  </li> <li>RabbitMQ: \u0938\u0947\u091f\u0905\u092a, \u092e\u0947\u0938\u0947\u091c \u092d\u0947\u091c\u0928\u093e \u0914\u0930 \u0909\u092a\u092d\u094b\u0917 \u0915\u0930\u0928\u093e\u0964  </li> </ul> <p>\u0909\u0926\u093e\u0939\u0930\u0923: RabbitMQ \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u092f\u0942\u091c\u0930\u094d\u0938 \u0915\u094b \u091f\u093e\u0938\u094d\u0915 \u0905\u092a\u0921\u0947\u091f\u094d\u0938 \u0915\u0947 \u092c\u093e\u0930\u0947 \u092e\u0947\u0902 \u0938\u0942\u091a\u093f\u0924 \u0915\u0930\u0928\u093e\u0964  </p>"},{"location":"languages/hi/phase5/#_6","title":"\u092a\u0930\u092b\u0949\u0930\u094d\u092e\u0947\u0902\u0938 \u0911\u092a\u094d\u091f\u093f\u092e\u093e\u0907\u091c\u093c\u0947\u0936\u0928","text":"<ul> <li>Caching: Spring Cache \u0915\u0947 \u0938\u093e\u0925 Redis \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0921\u0947\u091f\u093e\u092c\u0947\u0938 \u090f\u0915\u094d\u0938\u0947\u0938 \u0915\u094b \u0915\u092e \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f\u0964  </li> <li>JVM Tuning: \u092e\u0942\u0932 \u0905\u0935\u0927\u093e\u0930\u0923\u093e\u090f\u0901 (Heap, Garbage Collection)\u0964  </li> </ul> <p>\u0909\u0926\u093e\u0939\u0930\u0923: \u091f\u093e\u0938\u094d\u0915 \u0938\u093f\u0938\u094d\u091f\u092e \u092e\u0947\u0902 \u092c\u093e\u0930-\u092c\u093e\u0930 \u0939\u094b\u0928\u0947 \u0935\u093e\u0932\u0940 \u0915\u094d\u0935\u0947\u0930\u0940\u091c\u093c \u0915\u0947 \u0932\u093f\u090f \u0915\u0948\u0936 \u0932\u093e\u0917\u0942 \u0915\u0930\u0928\u093e\u0964  </p>"},{"location":"languages/hi/phase5/#devopscloud-docker-cicd","title":"DevOps/Cloud \u0915\u093e \u092a\u0930\u093f\u091a\u092f: Docker \u0914\u0930 CI/CD","text":"<ul> <li>Docker: \u0915\u0902\u091f\u0947\u0928\u0930\u094d\u0938, \u0907\u092e\u0947\u091c\u0947\u0938, Dockerfile, Docker Compose\u0964  </li> <li>CI/CD: GitHub Actions \u0915\u0947 \u0938\u093e\u0925 \u092c\u093f\u0932\u094d\u0921 \u0914\u0930 \u0921\u093f\u092a\u094d\u0932\u0949\u092f \u0915\u0947 \u0932\u093f\u090f \u092a\u093e\u0907\u092a\u0932\u093e\u0907\u0928 \u0915\u0949\u0928\u094d\u092b\u093c\u093f\u0917\u0930 \u0915\u0930\u0928\u093e\u0964  </li> </ul> <p>\u0909\u0926\u093e\u0939\u0930\u0923: \u091f\u093e\u0938\u094d\u0915 \u0910\u092a \u0915\u0947 \u0932\u093f\u090f Dockerfile \u092c\u0928\u093e\u0928\u093e \u0914\u0930 GitHub Actions \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u0921\u093f\u092a\u094d\u0932\u0949\u092f \u0915\u0930\u0928\u093e\u0964  </p>"},{"location":"languages/hi/phase5/#_7","title":"\u0911\u092c\u094d\u091c\u0930\u094d\u0935\u0947\u092c\u093f\u0932\u093f\u091f\u0940","text":"<ul> <li>\u091f\u0942\u0932\u094d\u0938: Prometheus (\u092e\u0947\u091f\u094d\u0930\u093f\u0915\u094d\u0938), Grafana (\u0935\u093f\u091c\u093c\u0941\u0905\u0932\u093e\u0907\u091c\u093c\u0947\u0936\u0928), ELK Stack (\u0932\u0949\u0917\u094d\u0938)\u0964  </li> <li>\u0905\u0935\u0927\u093e\u0930\u0923\u093e\u090f\u0901: \u092a\u0930\u092b\u0949\u0930\u094d\u092e\u0947\u0902\u0938 \u092e\u0949\u0928\u093f\u091f\u0930\u093f\u0902\u0917, \u0938\u0947\u0902\u091f\u094d\u0930\u0932\u093e\u0907\u091c\u093c\u094d\u0921 \u0932\u0949\u0917\u094d\u0938, \u0905\u0932\u0930\u094d\u091f\u094d\u0938\u0964  </li> </ul> <p>\u0909\u0926\u093e\u0939\u0930\u0923: Prometheus \u0914\u0930 Grafana \u0915\u0947 \u0938\u093e\u0925 \u091f\u093e\u0938\u094d\u0915\u094d\u0938 \u0915\u0947 \u0932\u093f\u090f API \u0930\u093f\u0938\u094d\u092a\u0949\u0928\u094d\u0938 \u091f\u093e\u0907\u092e \u0915\u0940 \u0928\u093f\u0917\u0930\u093e\u0928\u0940\u0964  </p>"},{"location":"languages/hi/phase5/#owasp-top-ten","title":"\u0938\u093f\u0915\u094d\u092f\u094b\u0930\u093f\u091f\u0940: OWASP Top Ten","text":"<ul> <li>\u0905\u0935\u0927\u093e\u0930\u0923\u093e\u090f\u0901: Injection, Authentication Failures, \u0938\u0902\u0935\u0947\u0926\u0928\u0936\u0940\u0932 \u0921\u0947\u091f\u093e \u090f\u0915\u094d\u0938\u092a\u094b\u091c\u093c\u0930\u0964  </li> <li>\u0905\u092d\u094d\u092f\u093e\u0938: \u0907\u0928\u092a\u0941\u091f \u0935\u0948\u0932\u093f\u0921\u0947\u0936\u0928, \u0938\u0948\u0928\u093f\u091f\u093e\u0907\u091c\u093c\u0947\u0936\u0928, \u0938\u0941\u0930\u0915\u094d\u0937\u093f\u0924 \u0915\u0949\u0928\u094d\u092b\u093c\u093f\u0917\u0930\u0947\u0936\u0928\u0964  </li> </ul> <p>\u0909\u0926\u093e\u0939\u0930\u0923: \u091f\u093e\u0938\u094d\u0915 API \u0915\u094b SQL Injection \u0914\u0930 XSS \u0938\u0947 \u0938\u0941\u0930\u0915\u094d\u0937\u093f\u0924 \u0915\u0930\u0928\u093e\u0964  </p>"},{"location":"languages/hi/phase5/#_8","title":"\u0905\u0902\u0924\u093f\u092e \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f","text":"<p>\u0909\u0928\u094d\u0928\u0924 \u091f\u093e\u0938\u094d\u0915 \u092e\u0948\u0928\u0947\u091c\u092e\u0947\u0902\u091f \u0938\u093f\u0938\u094d\u091f\u092e - \u092c\u0948\u0915\u090f\u0902\u0921: \u091a\u0930\u0923 4 \u0915\u0940 \u091f\u093e\u0938\u094d\u0915 API \u0915\u094b \u092e\u093e\u0907\u0915\u094d\u0930\u094b\u0938\u0930\u094d\u0935\u093f\u0938\u0947\u091c\u093c (\u091f\u093e\u0938\u094d\u0915\u094d\u0938 \u0914\u0930 \u092f\u0942\u091c\u0930\u094d\u0938) \u0915\u0947 \u0938\u093e\u0925 \u092c\u0922\u093c\u093e\u0928\u093e\u0964 - \u0906\u0930\u094d\u0915\u093f\u091f\u0947\u0915\u094d\u091a\u0930: Clean Code, SOLID, \u0914\u0930 Design Patterns (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, Strategy) \u0915\u0947 \u0938\u093e\u0925 \u0930\u093f\u092b\u0948\u0915\u094d\u091f\u0930 \u0915\u0930\u0928\u093e\u0964 - \u0915\u0928\u0915\u0930\u0947\u0902\u0938\u0940: ExecutorService \u0915\u0947 \u0938\u093e\u0925 \u0930\u093f\u092a\u094b\u0930\u094d\u091f\u094d\u0938 \u0915\u094b \u0938\u092e\u093e\u0928\u093e\u0902\u0924\u0930 \u092e\u0947\u0902 \u092a\u094d\u0930\u094b\u0938\u0947\u0938 \u0915\u0930\u0928\u093e\u0964 - \u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915: RabbitMQ \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u092e\u093e\u0907\u0915\u094d\u0930\u094b\u0938\u0930\u094d\u0935\u093f\u0938\u0947\u091c\u093c \u0915\u0947 \u092c\u0940\u091a \u0915\u092e\u094d\u092f\u0941\u0928\u093f\u0915\u0947\u0936\u0928 \u0914\u0930 \u092c\u093e\u0930-\u092c\u093e\u0930 \u0939\u094b\u0928\u0947 \u0935\u093e\u0932\u0940 \u0915\u094d\u0935\u0947\u0930\u0940\u091c\u093c \u0915\u0947 \u0932\u093f\u090f Redis \u0915\u0947 \u0938\u093e\u0925 \u0915\u0948\u0936\u093f\u0902\u0917 \u091c\u094b\u0921\u093c\u0928\u093e\u0964 - DevOps: Docker \u092e\u0947\u0902 \u092a\u0948\u0915\u0947\u091c\u093f\u0902\u0917, GitHub Actions \u0915\u0947 \u0938\u093e\u0925 CI/CD \u0915\u0949\u0928\u094d\u092b\u093c\u093f\u0917\u0930 \u0915\u0930\u0928\u093e\u0964 - \u0911\u092c\u094d\u091c\u0930\u094d\u0935\u0947\u092c\u093f\u0932\u093f\u091f\u0940: \u092e\u0947\u091f\u094d\u0930\u093f\u0915\u094d\u0938 \u0915\u0947 \u0932\u093f\u090f Prometheus \u0914\u0930 Grafana \u091c\u094b\u0921\u093c\u0928\u093e\u0964 - \u0938\u093f\u0915\u094d\u092f\u094b\u0930\u093f\u091f\u0940: OWASP Top Ten \u0915\u0947 \u0916\u093f\u0932\u093e\u092b \u0938\u0941\u0930\u0915\u094d\u0937\u093e \u0932\u093e\u0917\u0942 \u0915\u0930\u0928\u093e\u0964 - Git: \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u092b\u0940\u091a\u0930 \u0915\u0947 \u0932\u093f\u090f commit (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, <code>feature/microservices</code>, <code>feature/concurrency</code>)\u0964 - \u092a\u094d\u0930\u0915\u093e\u0936\u0928: GitHub \u092a\u0930 \u0935\u093f\u0938\u094d\u0924\u0943\u0924 README \u0915\u0947 \u0938\u093e\u0925 (\u0938\u0947\u091f\u0905\u092a, \u0906\u0930\u094d\u0915\u093f\u091f\u0947\u0915\u094d\u091a\u0930, \u0921\u093f\u092a\u094d\u0932\u0949\u092f\u092e\u0947\u0902\u091f)\u0964  </p>"},{"location":"languages/hi/phase5/#_9","title":"\u0938\u0902\u0938\u093e\u0927\u0928","text":"<ul> <li>The Pragmatic Programmer (\u092a\u0941\u0938\u094d\u0924\u0915)  </li> <li>Effective Java (\u092a\u0941\u0938\u094d\u0924\u0915)  </li> <li>Java Concurrency in Practice (\u092a\u0941\u0938\u094d\u0924\u0915)  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/hi/phase6/","title":"\u091a\u0930\u0923 6 \u2013 \u0905\u0902\u0924\u093f\u092e \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f\u094d\u0938 (\u091a\u0932 \u0930\u0939\u0947)","text":""},{"location":"languages/hi/phase6/#1-crud","title":"\u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f 1: \u092a\u0942\u0930\u094d\u0923 CRUD \u0915\u0947 \u0938\u093e\u0925 \u0911\u0925\u0947\u0902\u091f\u093f\u0915\u0947\u0936\u0928","text":"<ul> <li>\u0909\u0926\u094d\u0926\u0947\u0936\u094d\u092f: \u0938\u0941\u0930\u0915\u094d\u0937\u093f\u0924 \u0911\u0925\u0947\u0902\u091f\u093f\u0915\u0947\u0936\u0928 \u0914\u0930 \u091f\u0947\u0938\u094d\u091f\u093f\u0902\u0917 \u0915\u0947 \u0938\u093e\u0925 \u090f\u0915 \u092e\u091c\u092c\u0942\u0924 RESTful API \u092c\u0928\u093e\u0928\u093e\u0964  </li> <li>\u091f\u0947\u0915\u094d\u0928\u094b\u0932\u0949\u091c\u0940\u091c: Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers\u0964  </li> <li>\u092b\u0940\u091a\u0930\u094d\u0938: \u090f\u0902\u091f\u093f\u091f\u0940\u091c (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, \u091f\u093e\u0938\u094d\u0915\u094d\u0938, \u092f\u0942\u091c\u0930\u094d\u0938) \u0915\u0947 \u0932\u093f\u090f CRUD, roles (ADMIN, USER) \u0915\u0947 \u0938\u093e\u0925 \u0911\u0925\u0947\u0902\u091f\u093f\u0915\u0947\u0936\u0928, Swagger \u0915\u0947 \u0938\u093e\u0925 \u0921\u093e\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f\u0947\u0936\u0928\u0964  </li> <li>\u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915: \u091f\u093e\u0938\u094d\u0915\u094d\u0938 \u0926\u0947\u0916\u0928\u0947/\u092a\u094d\u0930\u092c\u0902\u0927\u0928 \u0915\u0947 \u0932\u093f\u090f Thymeleaf \u0907\u0902\u091f\u0930\u092b\u0947\u0938 \u091c\u094b\u0921\u093c\u0928\u093e\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f\u094d\u0938 \u092a\u094d\u0930\u092c\u0902\u0927\u0928 \u0915\u0947 \u0932\u093f\u090f API (\u090f\u0902\u091f\u093f\u091f\u0940\u091c: <code>Project</code>, <code>Task</code>, <code>User</code>) \u0938\u0941\u0930\u0915\u094d\u0937\u093f\u0924 endpoints \u0915\u0947 \u0938\u093e\u0925\u0964  </li> </ul>"},{"location":"languages/hi/phase6/#2","title":"\u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f 2: \u092b\u093e\u0907\u0932 \u0905\u092a\u0932\u094b\u0921","text":"<ul> <li>\u0909\u0926\u094d\u0926\u0947\u0936\u094d\u092f: \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f 1 \u0915\u0940 API \u092e\u0947\u0902 \u092b\u093e\u0907\u0932 \u0905\u092a\u0932\u094b\u0921 \u092b\u0902\u0915\u094d\u0936\u0928\u0948\u0932\u093f\u091f\u0940 \u091c\u094b\u0921\u093c\u0928\u093e\u0964  </li> <li>\u091f\u0947\u0915\u094d\u0928\u094b\u0932\u0949\u091c\u0940\u091c: Spring Boot (<code>MultipartFile</code>), Amazon S3 \u092f\u093e \u0932\u094b\u0915\u0932 \u0938\u094d\u091f\u094b\u0930\u0947\u091c, \u092b\u093e\u0907\u0932 \u0935\u0948\u0932\u093f\u0921\u0947\u0936\u0928\u0964  </li> <li>\u092b\u0940\u091a\u0930\u094d\u0938: \u091f\u093e\u0938\u094d\u0915\u094d\u0938 \u0938\u0947 \u0938\u0902\u092c\u0902\u0927\u093f\u0924 \u0907\u092e\u0947\u091c/\u0921\u0949\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f\u094d\u0938 \u0905\u092a\u0932\u094b\u0921 \u0915\u0930\u0928\u093e, \u091f\u093e\u0907\u092a/\u0938\u093e\u0907\u091c\u093c \u0935\u0948\u0932\u093f\u0921\u0947\u0936\u0928\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: API \u092e\u0947\u0902 \u091f\u093e\u0938\u094d\u0915\u094d\u0938 \u0915\u0947 \u0932\u093f\u090f \u0905\u091f\u0948\u091a\u092e\u0947\u0902\u091f\u094d\u0938 (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, PDF, PNG) \u0905\u092a\u0932\u094b\u0921 \u0915\u0930\u0928\u0947 \u0915\u0940 \u0905\u0928\u0941\u092e\u0924\u093f \u0926\u0947\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase6/#3","title":"\u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f 3: \u0915\u094d\u0932\u093e\u0909\u0921 \u0921\u093f\u092a\u094d\u0932\u0949\u092f\u092e\u0947\u0902\u091f","text":"<ul> <li>\u0909\u0926\u094d\u0926\u0947\u0936\u094d\u092f: CI/CD \u0915\u0947 \u0938\u093e\u0925 \u0915\u094d\u0932\u093e\u0909\u0921 \u092a\u094d\u0932\u0947\u091f\u092b\u0949\u0930\u094d\u092e \u092a\u0930 API \u0921\u093f\u092a\u094d\u0932\u0949\u092f \u0915\u0930\u0928\u093e\u0964  </li> <li>\u091f\u0947\u0915\u094d\u0928\u094b\u0932\u0949\u091c\u0940\u091c: Railway, Heroku, \u092f\u093e AWS (Elastic Beanstalk), GitHub Actions, Docker\u0964  </li> <li>\u092b\u0940\u091a\u0930\u094d\u0938: JAR/Docker \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u092a\u0948\u0915\u0947\u091c\u093f\u0902\u0917, \u092a\u0930\u094d\u092f\u093e\u0935\u0930\u0923 \u091a\u0930 \u0915\u0949\u0928\u094d\u092b\u093c\u093f\u0917\u0930 \u0915\u0930\u0928\u093e, \u0938\u094d\u0935\u091a\u093e\u0932\u093f\u0924 \u0921\u093f\u092a\u094d\u0932\u0949\u092f\u092e\u0947\u0902\u091f\u0964  </li> <li>\u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915: \u092c\u093e\u0930-\u092c\u093e\u0930 \u0939\u094b\u0928\u0947 \u0935\u093e\u0932\u0940 \u0915\u094d\u0935\u0947\u0930\u0940\u091c\u093c \u0915\u094b \u0905\u0928\u0941\u0915\u0942\u0932\u093f\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f Redis \u0915\u0947 \u0938\u093e\u0925 \u0915\u0948\u0936\u093f\u0902\u0917 \u0932\u093e\u0917\u0942 \u0915\u0930\u0928\u093e\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: PostgreSQL \u0914\u0930 CI/CD \u0915\u0947 \u0938\u093e\u0925 Railway \u092a\u0930 \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f API \u0921\u093f\u092a\u094d\u0932\u0949\u092f \u0915\u0930\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase6/#4","title":"\u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f 4: \u092e\u093e\u0907\u0915\u094d\u0930\u094b\u0938\u0930\u094d\u0935\u093f\u0938\u0947\u091c\u093c","text":"<ul> <li>\u0909\u0926\u094d\u0926\u0947\u0936\u094d\u092f: \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f 1 \u0915\u0940 API \u0915\u094b \u0911\u0930\u094d\u0915\u0947\u0938\u094d\u091f\u094d\u0930\u0947\u091f\u0947\u0921 \u092e\u093e\u0907\u0915\u094d\u0930\u094b\u0938\u0930\u094d\u0935\u093f\u0938\u0947\u091c\u093c \u092e\u0947\u0902 \u0935\u093f\u092d\u093e\u091c\u093f\u0924 \u0915\u0930\u0928\u093e\u0964  </li> <li>\u091f\u0947\u0915\u094d\u0928\u094b\u0932\u0949\u091c\u0940\u091c: Spring Cloud (Eureka, Gateway), Docker Compose, REST \u0915\u0947 \u0932\u093f\u090f \u0915\u092e\u094d\u092f\u0941\u0928\u093f\u0915\u0947\u0936\u0928\u0964  </li> <li>\u092b\u0940\u091a\u0930\u094d\u0938: <code>Tasks</code> \u0914\u0930 <code>Users</code> \u0915\u0947 \u0932\u093f\u090f \u092e\u093e\u0907\u0915\u094d\u0930\u094b\u0938\u0930\u094d\u0935\u093f\u0938\u0947\u091c\u093c, \u0938\u0930\u094d\u0935\u093f\u0938 \u0921\u093f\u0938\u094d\u0915\u0935\u0930\u0940 \u0915\u0947 \u0938\u093e\u0925\u0964  </li> <li>\u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915: \u092e\u093e\u0907\u0915\u094d\u0930\u094b\u0938\u0930\u094d\u0935\u093f\u0938\u0947\u091c\u093c \u0915\u0947 \u092c\u0940\u091a \u090f\u0938\u093f\u0902\u0915\u094d\u0930\u094b\u0928\u0938 \u0915\u092e\u094d\u092f\u0941\u0928\u093f\u0915\u0947\u0936\u0928 \u0915\u0947 \u0932\u093f\u090f RabbitMQ \u0915\u093e \u0909\u092a\u092f\u094b\u0917\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: \u091f\u093e\u0938\u094d\u0915 \u0914\u0930 \u092f\u0942\u091c\u0930 \u0932\u0949\u091c\u093f\u0915 \u0915\u094b \u0926\u094b \u0938\u0930\u094d\u0935\u093f\u0938\u0947\u091c \u092e\u0947\u0902 \u0905\u0932\u0917 \u0915\u0930\u0928\u093e, Docker \u0915\u0947 \u0938\u093e\u0925 \u0911\u0930\u094d\u0915\u0947\u0938\u094d\u091f\u094d\u0930\u0947\u091f\u0947\u0921\u0964  </li> </ul>"},{"location":"languages/hi/phase6/#5-api","title":"\u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f 5: \u090f\u0915\u094d\u0938\u091f\u0930\u094d\u0928\u0932 API \u0907\u0902\u091f\u0940\u0917\u094d\u0930\u0947\u0936\u0928","text":"<ul> <li>\u0909\u0926\u094d\u0926\u0947\u0936\u094d\u092f: \u0915\u093e\u0930\u094d\u092f\u0915\u094d\u0937\u092e\u0924\u093e \u092c\u0922\u093c\u093e\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u090f\u0915 \u090f\u0915\u094d\u0938\u091f\u0930\u094d\u0928\u0932 API \u0915\u093e \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0928\u093e\u0964  </li> <li>\u091f\u0947\u0915\u094d\u0928\u094b\u0932\u0949\u091c\u0940\u091c: Spring RestTemplate \u092f\u093e WebClient, API \u0911\u0925\u0947\u0902\u091f\u093f\u0915\u0947\u0936\u0928 (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, OAuth2)\u0964  </li> <li>\u092b\u0940\u091a\u0930\u094d\u0938: \u090f\u0915 \u092a\u092c\u094d\u0932\u093f\u0915 API \u0915\u0947 \u0938\u093e\u0925 \u090f\u0915\u0940\u0915\u0930\u0923 (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, SendGrid \u0915\u0947 \u092e\u093e\u0927\u094d\u092f\u092e \u0938\u0947 \u0908\u092e\u0947\u0932 \u0928\u094b\u091f\u093f\u092b\u093f\u0915\u0947\u0936\u0928\u094d\u0938 \u092d\u0947\u091c\u0928\u093e)\u0964  </li> <li>\u0935\u0948\u0915\u0932\u094d\u092a\u093f\u0915: \u091f\u093e\u0938\u094d\u0915\u094d\u0938/\u092f\u0942\u091c\u0930\u094d\u0938 \u0915\u094b \u0930\u093f\u091f\u094d\u0930\u0940\u0935 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f GraphQL Query \u091c\u094b\u0921\u093c\u0928\u093e \u0914\u0930 MongoDB \u092e\u0947\u0902 \u092e\u0947\u091f\u093e\u0921\u0947\u091f\u093e \u0938\u094d\u091f\u094b\u0930 \u0915\u0930\u0928\u093e\u0964  </li> <li>\u0909\u0926\u093e\u0939\u0930\u0923: \u091f\u093e\u0938\u094d\u0915 \u092a\u0942\u0930\u094d\u0923 \u0939\u094b\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f \u0908\u092e\u0947\u0932 \u0928\u094b\u091f\u093f\u092b\u093f\u0915\u0947\u0936\u0928\u094d\u0938 \u091c\u094b\u0921\u093c\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase6/#_1","title":"\u092a\u094b\u0930\u094d\u091f\u092b\u094b\u0932\u093f\u092f\u094b \u0938\u0930\u094d\u0935\u094b\u0924\u094d\u0924\u092e \u0905\u092d\u094d\u092f\u093e\u0938","text":"<ul> <li>Git: \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u092b\u0940\u091a\u0930 \u0915\u0947 \u0932\u093f\u090f commit (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, <code>feature/crud</code>, <code>feature/upload</code>), \u0938\u094d\u092a\u0937\u094d\u091f \u092c\u094d\u0930\u093e\u0902\u091a\u0947\u0938\u0964  </li> <li>\u0921\u093e\u0915\u094d\u092f\u0942\u092e\u0947\u0902\u091f\u0947\u0936\u0928: \u0935\u093f\u0935\u0930\u0923, \u0938\u0947\u091f\u0905\u092a, endpoints, \u0921\u093f\u092a\u094d\u0932\u0949\u092f\u092e\u0947\u0902\u091f, \u0914\u0930 \u0938\u094d\u0915\u094d\u0930\u0940\u0928\u0936\u0949\u091f\u094d\u0938 \u0915\u0947 \u0938\u093e\u0925 README\u0964  </li> <li>\u092a\u094d\u0930\u0915\u093e\u0936\u0928: GitHub \u092a\u0930 \u0913\u092a\u0928-\u0938\u094b\u0930\u094d\u0938 \u0932\u093e\u0907\u0938\u0947\u0902\u0938 (\u0909\u0926\u093e\u0939\u0930\u0923 \u0915\u0947 \u0932\u093f\u090f, MIT) \u0915\u0947 \u0938\u093e\u0925 \u0939\u094b\u0938\u094d\u091f \u0915\u0930\u0928\u093e\u0964  </li> </ul>"},{"location":"languages/hi/phase6/#_2","title":"\u0938\u0902\u0938\u093e\u0927\u0928","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/it/phase1/","title":"Fase 1 \u2013 Fondamenti e Java Essenziale (2\u20133 mesi)","text":""},{"location":"languages/it/phase1/#logica-di-programmazione-e-algoritmi","title":"Logica di Programmazione e Algoritmi","text":"<ul> <li>Decomposizione dei problemi</li> <li>Esercizi: media, pari/dispari, ordinamento</li> </ul>"},{"location":"languages/it/phase1/#configurazione-dellambiente","title":"Configurazione dell'Ambiente","text":"<ul> <li>Installazione del JDK</li> <li>IDE (IntelliJ o Eclipse)</li> <li>Debugging di base</li> </ul>"},{"location":"languages/it/phase1/#sintassi-java-di-base","title":"Sintassi Java di Base","text":"<ul> <li>Struttura del programma (class, main)</li> <li>Convenzioni di denominazione</li> <li>Commenti</li> </ul>"},{"location":"languages/it/phase1/#tipi-di-dati-e-variabili","title":"Tipi di Dati e Variabili","text":"<ul> <li>Tipi primitivi e non primitivi</li> <li>Dichiarazione, inizializzazione, costanti</li> <li>Casting e confronto (<code>==</code> vs <code>.equals()</code>)</li> </ul>"},{"location":"languages/it/phase1/#input-e-output","title":"Input e Output","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/it/phase1/#strutture-di-controllo","title":"Strutture di Controllo","text":"<ul> <li>if, else if, else, switch</li> <li>Operatori logici e relazionali</li> </ul>"},{"location":"languages/it/phase1/#cicli","title":"Cicli","text":"<ul> <li>for, while, do-while</li> <li>break, continue, cicli annidati</li> </ul>"},{"location":"languages/it/phase1/#metodi-e-ambito","title":"Metodi e Ambito","text":"<ul> <li>Dichiarazione, parametri, ritorno</li> <li>Overloading</li> <li>Variabili locali e attributi di classe</li> </ul>"},{"location":"languages/it/phase1/#array","title":"Array","text":"<ul> <li>Dichiarazione, inizializzazione e manipolazione</li> <li>Ricerca lineare e ordinamento manuale</li> <li>Arrays.toString() per il debugging</li> </ul>"},{"location":"languages/it/phase1/#stringhe-e-stringbuilder","title":"Stringhe e StringBuilder","text":"<ul> <li>Metodi comuni</li> <li>Immutabilit\u00e0 e prestazioni</li> </ul>"},{"location":"languages/it/phase1/#eccezioni","title":"Eccezioni","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw e throws</li> <li>Creazione di eccezioni personalizzate (es. throw new MyException)</li> </ul>"},{"location":"languages/it/phase1/#strumenti-essenziali","title":"Strumenti Essenziali","text":"<ul> <li>Terminal: cd, ls, mkdir</li> <li>Git: init, add, commit, push, pull, branch, merge</li> <li>GitHub: creazione di repository, pull requests, clonazione</li> </ul>"},{"location":"languages/it/phase1/#progetti-finali","title":"Progetti Finali","text":"<ul> <li>Calcolatrice semplice e Gestore di attivit\u00e0</li> <li>Requisiti:</li> <li>Usa Git</li> <li>Pubblica su GitHub</li> <li>README esplicativo</li> </ul>"},{"location":"languages/it/phase1/#risorse","title":"Risorse","text":"<ul> <li>MOOC from the University of Helsinki</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/it/phase2/","title":"Fase 2 \u2013 Programmazione Orientata agli Oggetti (2\u20133 mesi)","text":""},{"location":"languages/it/phase2/#classi-oggetti-attributi-e-metodi","title":"Classi, Oggetti, Attributi e Metodi","text":"<ul> <li>Struttura della classe</li> <li>Istanziazione degli oggetti</li> <li>Uso di this</li> <li>Migliori pratiche: denominazione, organizzazione del codice</li> </ul>"},{"location":"languages/it/phase2/#incapsulamento-ereditarieta-polimorfismo-e-astrazione","title":"Incapsulamento, Ereditariet\u00e0, Polimorfismo e Astrazione","text":"<ul> <li>Incapsulamento: private, getters/setters, validazione</li> <li>Ereditariet\u00e0: extends, overriding (@Override)</li> <li>Polimorfismo: sottotipo, sovraccarico dei metodi</li> <li>Astrazione: panoramica, preparazione per interfacce e classi astratte</li> </ul>"},{"location":"languages/it/phase2/#interfacce-e-classi-astratte","title":"Interfacce e Classi Astratte","text":"<ul> <li>Interfacce: implements, default methods</li> <li>Classi astratte: metodi astratti e concreti</li> <li>Differenze tra interfaccia e classe astratta</li> </ul>"},{"location":"languages/it/phase2/#costruttori-inizializzatori-e-blocchi-statici","title":"Costruttori, Inizializzatori e Blocchi Statici","text":"<ul> <li>Costruttori predefiniti e con parametri, chiamate con this()</li> <li>Blocchi di inizializzazione ({}) e blocchi statici (static {})</li> </ul>"},{"location":"languages/it/phase2/#enumerazioni","title":"Enumerazioni","text":"<ul> <li>Creazione e utilizzo di enum</li> <li>Metodi e attributi negli enum</li> </ul>"},{"location":"languages/it/phase2/#collezioni-di-base","title":"Collezioni di Base","text":"<ul> <li>ArrayList: aggiunta, rimozione, iterazione (for, forEach, Iterator)</li> <li>HashMap: chiave-valore, operazioni comuni</li> <li>HashSet: eliminazione dei duplicati</li> <li>Introduzione a Queue e Stack (es. LinkedList come queue/stack)</li> <li>Introduzione al Java Collections Framework</li> </ul>"},{"location":"languages/it/phase2/#algoritmi-di-base","title":"Algoritmi di Base","text":"<ul> <li>Ricerca lineare e binaria</li> <li>Ordinamento: Bubble Sort, Collections.sort()</li> <li>Ricorsione: concetti ed esempi semplici (es. fattoriale, Fibonacci)</li> <li>Introduzione alla complessit\u00e0 (O(n), O(log n))</li> </ul>"},{"location":"languages/it/phase2/#generics","title":"Generics","text":"<ul> <li>Sintassi (), collezioni generiche, metodi generici <li>Limiti (extends, super)</li>"},{"location":"languages/it/phase2/#stream-api-introduzione","title":"Stream API (Introduzione)","text":"<ul> <li>Operazioni di base: filter, map, collect</li> <li>Esempi con ArrayList</li> </ul>"},{"location":"languages/it/phase2/#test-unitari-introduzione","title":"Test Unitari (Introduzione)","text":"<ul> <li>Uso base di JUnit</li> <li>Scrittura di test cases per classi e metodi</li> <li>Introduzione a TDD (Test-Driven Development)</li> </ul>"},{"location":"languages/it/phase2/#progetto-finale","title":"Progetto Finale","text":"<ul> <li>Sistema di Biblioteca</li> <li>Classi: Book, User, Library</li> <li>Ereditariet\u00e0: DigitalBook e PhysicalBook</li> <li>Collezioni: ArrayList per i libri, HashMap per i prestiti</li> <li>Incapsulamento: validazione dei dati</li> <li>Git: commit per ogni funzionalit\u00e0 (es. <code>feature/book-management</code>)</li> <li>Pubblicazione su GitHub con README esplicativo</li> </ul>"},{"location":"languages/it/phase2/#risorse-aggiornate","title":"Risorse Aggiornate","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java (Libro)</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/it/phase3/","title":"Fase 3 \u2013 Persistenza dei Dati e Streams (2\u20133 mesi)","text":""},{"location":"languages/it/phase3/#sql-di-base","title":"SQL di Base","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Keys: chiavi primarie e chiavi esterne.  </li> <li>Normalizzazione: 1NF, 2NF, 3NF.  </li> <li>Esempio: creare tabelle per prodotti e categorie.  </li> </ul>"},{"location":"languages/it/phase3/#jdbc-e-connection-pool","title":"JDBC e Connection Pool","text":"<ul> <li>Classi: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>Uso di Connection Pool (HikariCP).  </li> <li>Migliori pratiche: <code>try-with-resources</code>, gestione di <code>SQLException</code>.  </li> </ul>"},{"location":"languages/it/phase3/#hibernate-jpa-nella-pratica","title":"Hibernate + JPA nella Pratica","text":"<ul> <li>Annotazioni: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>Configurazione: <code>persistence.xml</code> o <code>application.properties</code>.  </li> <li>Operazioni CRUD con <code>EntityManager</code>.  </li> <li>Introduzione alle migrazioni di database con Flyway o Liquibase.</li> </ul>"},{"location":"languages/it/phase3/#introduzione-ai-database-nosql","title":"Introduzione ai Database NoSQL","text":"<ul> <li>Concetti: documents, collections, scalabilit\u00e0 orizzontale.  </li> <li>MongoDB: configurazione, operazioni CRUD con MongoRepository.  </li> <li>Spring Data MongoDB: integrazione con Spring Boot.  </li> <li>Esempio: memorizzare i log delle attivit\u00e0 di sistema per i prodotti in MongoDB.</li> </ul>"},{"location":"languages/it/phase3/#streams-e-lambda-expressions","title":"Streams e Lambda Expressions","text":"<ul> <li>Operazioni: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>Esempio: filtrare i prodotti per prezzo, ordinare per nome.  </li> </ul>"},{"location":"languages/it/phase3/#optional-e-interfacce-funzionali","title":"Optional e Interfacce Funzionali","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>Interfacce funzionali: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>Esempio: utilizzare <code>Predicate</code> negli Streams per filtrare i dati.  </li> </ul>"},{"location":"languages/it/phase3/#collezioni-avanzate","title":"Collezioni Avanzate","text":"<ul> <li>LinkedList: inserimento/rimozione efficiente.  </li> <li>TreeMap: coppie chiave-valore ordinate.  </li> <li>PriorityQueue: coda di priorit\u00e0.  </li> <li>LinkedHashMap e Deque (introduzione).  </li> </ul>"},{"location":"languages/it/phase3/#logging-slf4jlogback","title":"Logging (SLF4J/Logback)","text":"<ul> <li>Configurazione di SLF4J con Logback.  </li> <li>Livelli: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>Esempio: registrare le query di Hibernate.  </li> </ul>"},{"location":"languages/it/phase3/#concetti-di-transazione-acid","title":"Concetti di Transazione (ACID)","text":"<ul> <li>Atomicit\u00e0, Consistenza, Isolamento, Durabilit\u00e0.  </li> <li>Transazioni con JDBC (<code>commit</code>, <code>rollback</code>) e Hibernate (<code>@Transactional</code>).  </li> </ul>"},{"location":"languages/it/phase3/#indici-e-piani-di-esecuzione","title":"Indici e Piani di Esecuzione","text":"<ul> <li>Indici: primari, unici, compositi.  </li> <li>Uso di EXPLAIN per ottimizzare le query.  </li> <li>Esempio: creare un indice su una colonna frequentemente ricercata.  </li> </ul>"},{"location":"languages/it/phase3/#manipolazione-dei-file-opzionale","title":"Manipolazione dei File (Opzionale)","text":"<ul> <li>Lettura e scrittura con <code>Files</code>, <code>BufferedReader</code>.  </li> <li>Esempio: esportare un report di prodotti in CSV utilizzando Streams.  </li> </ul>"},{"location":"languages/it/phase3/#test-di-database-introduzione","title":"Test di Database (Introduzione)","text":"<ul> <li>Test di integrazione con H2 e JUnit.  </li> <li>Esempio: testare le operazioni CRUD con Hibernate.  </li> </ul>"},{"location":"languages/it/phase3/#progetto-finale","title":"Progetto Finale","text":"<p>Sistema di Gestione Prodotti - Database: tabelle Product e Category (relazione 1:N). - Java: classi con JPA (<code>Product</code>, <code>Category</code>), CRUD con Hibernate. - Opzionale: memorizzare i log delle modifiche dei prodotti in MongoDB. - Opzionale: memorizzare attributi dinamici dei prodotti (es. specifiche tecniche) in MongoDB. - Streams: filtrare/ordinare i prodotti (es. per prezzo o categoria). - Logging: monitorare le operazioni sul database. - Git: commit per ogni funzionalit\u00e0 (es. <code>feature/crud</code>, <code>feature/streams</code>). - Pubblicazione su GitHub con README esplicativo.  </p>"},{"location":"languages/it/phase3/#risorse","title":"Risorse","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/it/phase4/","title":"Fase 4 \u2013 Framework e Applicazioni Web (3\u20134 mesi)","text":""},{"location":"languages/it/phase4/#spring-boot-spring-core-e-spring-data-jpa","title":"Spring Boot, Spring Core e Spring Data JPA","text":"<ul> <li>Spring Core: Dependency injection (<code>@Bean</code>, <code>@Autowired</code>), IoC container.  </li> <li>Spring Boot: Auto-configurazione, starters (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>), <code>application.yml</code>.  </li> <li>Spring Data JPA: Repositories (<code>CrudRepository</code>, <code>JpaRepository</code>), query con <code>@Query</code>, paginazione.  </li> <li>Esempio: Creare REST endpoints per la gestione delle attivit\u00e0 (CRUD) in un'app di attivit\u00e0.  </li> </ul>"},{"location":"languages/it/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>Concetti: Autenticazione, autorizzazione, filtri di sicurezza.  </li> <li>JWT: Creare e validare token, utilizzare <code>JwtAuthenticationFilter</code>.  </li> <li>OAuth2: Configurare Resource Server, integrare con un provider (es. Google).  </li> <li>Esempio: Proteggere gli endpoint delle attivit\u00e0 con JWT e ruoli (<code>ADMIN</code>, <code>USER</code>).  </li> </ul>"},{"location":"languages/it/phase4/#test-unitari-e-di-integrazione","title":"Test Unitari e di Integrazione","text":"<ul> <li>Test unitari: JUnit 5, Mockito (<code>@Mock</code>, <code>@InjectMocks</code>), test della logica di business.  </li> <li>Test di integrazione: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, database H2 per i test.  </li> <li>Testcontainers: Test con PostgreSQL in container Docker.  </li> <li>Esempio: Testare i servizi e gli endpoint dell'app di attivit\u00e0.  </li> </ul>"},{"location":"languages/it/phase4/#api-restful-e-documentazione-con-swagger","title":"API RESTful e Documentazione con Swagger","text":"<ul> <li>REST: Metodi HTTP, codici di stato, principi RESTful.  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>.  </li> <li>Swagger: Configurare springdoc-openapi, annotare con <code>@Operation</code>.  </li> <li>Esempio: Documentare gli endpoint dell'app di attivit\u00e0 con Swagger UI.  </li> </ul>"},{"location":"languages/it/phase4/#introduzione-a-graphql","title":"Introduzione a GraphQL","text":"<ul> <li>Concetti: Queries, mutations, schema.  </li> <li>Spring Boot con GraphQL: Configurazione con spring-boot-starter-graphql.  </li> <li>Esempio: Creare una query GraphQL per elencare le attivit\u00e0 per stato.  </li> </ul>"},{"location":"languages/it/phase4/#integrazione-frontend-di-base","title":"Integrazione Frontend di Base","text":"<ul> <li>Thymeleaf: Template per il rendering di pagine HTML con Spring Boot.  </li> <li>Esempio: Creare un'interfaccia web semplice per visualizzare e creare attivit\u00e0.  </li> </ul>"},{"location":"languages/it/phase4/#strumenti-di-build-maven-e-gradle","title":"Strumenti di Build: Maven e Gradle","text":"<ul> <li>Maven: Struttura di <code>pom.xml</code>, dipendenze, plugin.  </li> <li>Gradle: File <code>build.gradle</code>, attivit\u00e0, gestione delle dipendenze.  </li> <li>Esempio: Configurare l'app di attivit\u00e0 con Maven e Gradle.  </li> </ul>"},{"location":"languages/it/phase4/#distribuzione-del-progetto","title":"Distribuzione del Progetto","text":"<ul> <li>Piattaforme: Railway, Heroku, AWS (Elastic Beanstalk).  </li> <li>Passaggi: Pacchettizzare come JAR, configurare CI/CD con GitHub Actions.  </li> <li>Esempio: Distribuire l'app di attivit\u00e0 su Railway con PostgreSQL.  </li> </ul>"},{"location":"languages/it/phase4/#progetto-finale","title":"Progetto Finale","text":"<p>Sistema di Gestione delle Attivit\u00e0 - Database: Tabelle <code>Task</code> (titolo, descrizione, stato) e <code>User</code> (relazione 1:N). - Java: REST API con Spring Boot, Spring Data JPA per CRUD. - Sicurezza: Autenticazione JWT, ruoli (<code>ADMIN</code>, <code>USER</code>). - Test: Test unitari (servizi) e test di integrazione (endpoint con Testcontainers). - Documentazione: Swagger UI con descrizioni degli endpoint. - Opzionale: Aggiungere una query GraphQL per elencare le attivit\u00e0 e un'interfaccia Thymeleaf per l'interazione. - Git: Commit per ogni funzionalit\u00e0 (es. <code>feature/rest-api</code>, <code>feature/security</code>). - Pubblicazione: Su GitHub con README (configurazione, endpoint, distribuzione).  </p>"},{"location":"languages/it/phase4/#risorse","title":"Risorse","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation</li> </ul>"},{"location":"languages/it/phase5/","title":"Fase 5 \u2013 Architettura e Concorrenza (2\u20133 mesi)","text":""},{"location":"languages/it/phase5/#clean-code-e-principi-solid","title":"Clean Code e Principi SOLID","text":"<ul> <li>Clean Code: Nomenclatura chiara, funzioni brevi, commenti utili, formattazione coerente.  </li> <li>SOLID:  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>Esempio: Rifattorizzare un servizio nel Task Manager per seguire i principi SOLID.  </p>"},{"location":"languages/it/phase5/#design-patterns","title":"Design Patterns","text":"<ul> <li>Pattern: Factory (creazione), Singleton (istanza unica), Builder (costruzione oggetti), Strategy (comportamento), Observer (eventi).  </li> <li>Applicazione: Scegliere pattern adeguati al contesto del progetto.  </li> </ul> <p>Esempio: Utilizzare Strategy per diversi algoritmi di prioritizzazione delle attivit\u00e0.  </p>"},{"location":"languages/it/phase5/#thread-e-concorrenza","title":"Thread e Concorrenza","text":"<ul> <li>Concetti: Thread, Runnable, ExecutorService, ForkJoinPool.  </li> <li>Tecniche: Creare e gestire pool di thread, attivit\u00e0 asincrone.  </li> </ul> <p>Esempio: Elaborare report di attivit\u00e0 in parallelo con ExecutorService.  </p>"},{"location":"languages/it/phase5/#sincronizzazione-e-problemi-di-concorrenza","title":"Sincronizzazione e Problemi di Concorrenza","text":"<ul> <li>Meccanismi: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>.  </li> <li>Problemi: Deadlock, race condition, starvation.  </li> </ul> <p>Esempio: Implementare l'accesso sicuro a una lista di attivit\u00e0 condivisa.  </p>"},{"location":"languages/it/phase5/#introduzione-ai-microservizi","title":"Introduzione ai Microservizi","text":"<ul> <li>Concetti: Architettura dei microservizi, comunicazione REST, scoperta dei servizi.  </li> <li>Strumenti: Spring Cloud (es. Eureka per la scoperta dei servizi).  </li> </ul> <p>Esempio: Dividere il Task Manager in microservizi (attivit\u00e0 e utenti).  </p>"},{"location":"languages/it/phase5/#fondamenti-di-code-di-messaggi-opzionale","title":"Fondamenti di Code di Messaggi (Opzionale)","text":"<ul> <li>Concetti: Publisher/subscriber, code, topic.  </li> <li>RabbitMQ: Configurazione, invio e ricezione di messaggi.  </li> </ul> <p>Esempio: Notificare agli utenti gli aggiornamenti delle attivit\u00e0 tramite RabbitMQ.  </p>"},{"location":"languages/it/phase5/#ottimizzazione-delle-prestazioni","title":"Ottimizzazione delle Prestazioni","text":"<ul> <li>Caching: Spring Cache con Redis per ridurre l'accesso al database.  </li> <li>Tuning JVM: Concetti di base (heap, garbage collection).  </li> </ul> <p>Esempio: Implementare cache per query frequenti nel sistema di attivit\u00e0.  </p>"},{"location":"languages/it/phase5/#introduzione-a-devopscloud-docker-e-cicd","title":"Introduzione a DevOps/Cloud: Docker e CI/CD","text":"<ul> <li>Docker: Container, immagini, Dockerfile, Docker Compose.  </li> <li>CI/CD: Configurare pipeline con GitHub Actions per build e deploy.  </li> </ul> <p>Esempio: Creare un Dockerfile per l'app di attivit\u00e0 e distribuirla tramite GitHub Actions.  </p>"},{"location":"languages/it/phase5/#osservabilita","title":"Osservabilit\u00e0","text":"<ul> <li>Strumenti: Prometheus (metriche), Grafana (visualizzazione), ELK Stack (log).  </li> <li>Concetti: Monitoraggio delle prestazioni, log centralizzati, avvisi.  </li> </ul> <p>Esempio: Monitorare il tempo di risposta dell'API delle attivit\u00e0 con Prometheus e Grafana.  </p>"},{"location":"languages/it/phase5/#sicurezza-owasp-top-ten","title":"Sicurezza: OWASP Top Ten","text":"<ul> <li>Concetti: Injection, fallimenti di autenticazione, esposizione di dati sensibili.  </li> <li>Pratiche: Validazione dell'input, sanitizzazione, configurazione sicura.  </li> </ul> <p>Esempio: Proteggere l'API delle attivit\u00e0 da SQL injection e XSS.  </p>"},{"location":"languages/it/phase5/#progetto-finale","title":"Progetto Finale","text":"<p>Sistema Avanzato di Gestione delle Attivit\u00e0 - Backend: Migliorare l'API delle attivit\u00e0 (Fase 4) con microservizi (attivit\u00e0 e utenti). - Architettura: Rifattorizzare con Clean Code, SOLID e design patterns (es. Strategy). - Concorrenza: Elaborare report in parallelo con ExecutorService. - Opzionale: Aggiungere comunicazione tra microservizi tramite RabbitMQ e caching con Redis per query frequenti. - DevOps: Pacchettizzare in Docker, configurare CI/CD con GitHub Actions. - Osservabilit\u00e0: Aggiungere Prometheus e Grafana per le metriche. - Sicurezza: Implementare protezioni contro OWASP Top Ten. - Git: Commit per ogni funzionalit\u00e0 (es. <code>feature/microservices</code>, <code>feature/concurrency</code>). - Pubblicazione: Su GitHub con README dettagliato (configurazione, architettura, distribuzione).  </p>"},{"location":"languages/it/phase5/#risorse","title":"Risorse","text":"<ul> <li>The Pragmatic Programmer (Libro)  </li> <li>Effective Java (Libro)  </li> <li>Java Concurrency in Practice (Libro)  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation</li> </ul>"},{"location":"languages/it/phase6/","title":"Fase 6 \u2013 Progetti Finali (In Corso)","text":""},{"location":"languages/it/phase6/#progetto-1-crud-completo-con-autenticazione","title":"Progetto 1: CRUD Completo con Autenticazione","text":"<ul> <li>Obiettivo: Costruire un'API RESTful robusta con autenticazione sicura e test.  </li> <li>Tecnologie: Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers.  </li> <li>Funzionalit\u00e0: CRUD per entit\u00e0 (es. attivit\u00e0, utenti), autenticazione con ruoli (ADMIN, USER), documentazione con Swagger.  </li> <li>Opzionale: Aggiungere un'interfaccia Thymeleaf per visualizzare/gestire le attivit\u00e0.  </li> <li>Esempio: API per gestire progetti (entit\u00e0: <code>Project</code>, <code>Task</code>, <code>User</code>) con endpoint protetti.  </li> </ul>"},{"location":"languages/it/phase6/#progetto-2-caricamento-file","title":"Progetto 2: Caricamento File","text":"<ul> <li>Obiettivo: Aggiungere funzionalit\u00e0 di caricamento file all'API del Progetto 1.  </li> <li>Tecnologie: Spring Boot (<code>MultipartFile</code>), Amazon S3 o storage locale, validazione dei file.  </li> <li>Funzionalit\u00e0: Caricare immagini/documenti associati alle attivit\u00e0, validare tipo/dimensione.  </li> <li>Esempio: Consentire il caricamento di allegati (es. PDF, PNG) per le attivit\u00e0 nell'API.  </li> </ul>"},{"location":"languages/it/phase6/#progetto-3-distribuzione-su-cloud","title":"Progetto 3: Distribuzione su Cloud","text":"<ul> <li>Obiettivo: Distribuire l'API su una piattaforma cloud con CI/CD.  </li> <li>Tecnologie: Railway, Heroku o AWS (Elastic Beanstalk), GitHub Actions, Docker.  </li> <li>Funzionalit\u00e0: Pacchettizzare come JAR/Docker, configurare variabili d'ambiente, automatizzare la distribuzione.  </li> <li>Opzionale: Implementare caching con Redis per ottimizzare query frequenti.  </li> <li>Esempio: Distribuire l'API del progetto su Railway con PostgreSQL e CI/CD.  </li> </ul>"},{"location":"languages/it/phase6/#progetto-4-microservizi","title":"Progetto 4: Microservizi","text":"<ul> <li>Obiettivo: Dividere l'API del Progetto 1 in microservizi orchestrati.  </li> <li>Tecnologie: Spring Cloud (Eureka, Gateway), Docker Compose, REST per la comunicazione.  </li> <li>Funzionalit\u00e0: Microservizi per <code>Tasks</code> e <code>Users</code>, con service discovery.  </li> <li>Opzionale: Usare RabbitMQ per la comunicazione asincrona tra microservizi.  </li> <li>Esempio: Separare la logica di attivit\u00e0 e utenti in due servizi, orchestrati con Docker.  </li> </ul>"},{"location":"languages/it/phase6/#progetto-5-integrazione-con-api-esterne","title":"Progetto 5: Integrazione con API Esterne","text":"<ul> <li>Obiettivo: Consumare un'API esterna per migliorare le funzionalit\u00e0.  </li> <li>Tecnologie: Spring RestTemplate o WebClient, autenticazione API (es. OAuth2).  </li> <li>Funzionalit\u00e0: Integrare con un'API pubblica (es. inviare notifiche via email con SendGrid).  </li> <li>Opzionale: Aggiungere una query GraphQL per recuperare attivit\u00e0/utenti e memorizzare metadati in MongoDB.  </li> <li>Esempio: Aggiungere notifiche email per il completamento delle attivit\u00e0.  </li> </ul>"},{"location":"languages/it/phase6/#best-practices-per-il-portfolio","title":"Best Practices per il Portfolio","text":"<ul> <li>Git: Commit per funzionalit\u00e0 (es. <code>feature/crud</code>, <code>feature/upload</code>), branch chiari.  </li> <li>Documentazione: README con descrizione, configurazione, endpoint, distribuzione e screenshot.  </li> <li>Pubblicazione: Ospitare su GitHub con licenza open-source (es. MIT).  </li> </ul>"},{"location":"languages/it/phase6/#risorse","title":"Risorse","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/ja/phase1/","title":"\u30d5\u30a7\u30fc\u30ba 1 \u2013 \u57fa\u790e\u3068\u5fc5\u9808 Java (2\uff5e3\u30f6\u6708)","text":""},{"location":"languages/ja/phase1/#_1","title":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30ed\u30b8\u30c3\u30af\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","text":"<ul> <li>\u554f\u984c\u306e\u5206\u89e3</li> <li>\u6f14\u7fd2: \u5e73\u5747\u3001\u5076\u6570/\u5947\u6570\u3001\u30bd\u30fc\u30c8</li> </ul>"},{"location":"languages/ja/phase1/#_2","title":"\u74b0\u5883\u8a2d\u5b9a","text":"<ul> <li>JDK\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</li> <li>IDE\uff08IntelliJ\u307e\u305f\u306fEclipse\uff09</li> <li>Basic debugging</li> </ul>"},{"location":"languages/ja/phase1/#java","title":"\u57fa\u672c\u7684\u306aJava\u69cb\u6587","text":"<ul> <li>\u30d7\u30ed\u30b0\u30e9\u30e0\u69cb\u9020\uff08class\u3001main\uff09</li> <li>\u547d\u540d\u898f\u5247</li> <li>\u30b3\u30e1\u30f3\u30c8</li> </ul>"},{"location":"languages/ja/phase1/#_3","title":"\u30c7\u30fc\u30bf\u578b\u3068\u5909\u6570","text":"<ul> <li>\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3068\u975e\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b</li> <li>\u5ba3\u8a00\u3001\u521d\u671f\u5316\u3001\u5b9a\u6570</li> <li>Casting\u3068\u6bd4\u8f03\uff08<code>==</code> vs <code>.equals()</code>\uff09</li> </ul>"},{"location":"languages/ja/phase1/#_4","title":"\u5165\u51fa\u529b","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/ja/phase1/#_5","title":"\u5236\u5fa1\u69cb\u9020","text":"<ul> <li>if\u3001else if\u3001else\u3001switch</li> <li>\u8ad6\u7406\u6f14\u7b97\u5b50\u3068\u95a2\u4fc2\u6f14\u7b97\u5b50</li> </ul>"},{"location":"languages/ja/phase1/#_6","title":"\u30eb\u30fc\u30d7","text":"<ul> <li>for\u3001while\u3001do-while</li> <li>break\u3001continue\u3001\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30eb\u30fc\u30d7</li> </ul>"},{"location":"languages/ja/phase1/#_7","title":"\u30e1\u30bd\u30c3\u30c9\u3068\u30b9\u30b3\u30fc\u30d7","text":"<ul> <li>\u5ba3\u8a00\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3001return</li> <li>Overloading</li> <li>\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3068\u30af\u30e9\u30b9\u5c5e\u6027</li> </ul>"},{"location":"languages/ja/phase1/#arrays","title":"Arrays","text":"<ul> <li>\u5ba3\u8a00\u3001\u521d\u671f\u5316\u3001\u64cd\u4f5c</li> <li>\u7dda\u5f62\u63a2\u7d22\u3068\u624b\u52d5\u30bd\u30fc\u30c8</li> <li>Arrays.toString()\u306b\u3088\u308bdebugging</li> </ul>"},{"location":"languages/ja/phase1/#stringsstringbuilder","title":"Strings\u3068StringBuilder","text":"<ul> <li>\u4e00\u822c\u7684\u306a\u30e1\u30bd\u30c3\u30c9</li> <li>Immutability\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9</li> </ul>"},{"location":"languages/ja/phase1/#exceptions","title":"Exceptions","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw\u3068throws</li> <li>\u30ab\u30b9\u30bf\u30e0\u4f8b\u5916\u306e\u4f5c\u6210\uff08\u4f8b: throw new MyException\uff09</li> </ul>"},{"location":"languages/ja/phase1/#_8","title":"\u5fc5\u9808\u30c4\u30fc\u30eb","text":"<ul> <li>Terminal: cd\u3001ls\u3001mkdir</li> <li>Git: init\u3001add\u3001commit\u3001push\u3001pull\u3001branch\u3001merge</li> <li>GitHub: \u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u4f5c\u6210\u3001pull requests\u3001\u30af\u30ed\u30fc\u30cb\u30f3\u30b0</li> </ul>"},{"location":"languages/ja/phase1/#_9","title":"\u6700\u7d42\u30d7\u30ed\u30b8\u30a7\u30af\u30c8","text":"<ul> <li>\u30b7\u30f3\u30d7\u30eb\u306a\u96fb\u5353\u3068\u30bf\u30b9\u30af\u30de\u30cd\u30fc\u30b8\u30e3\u30fc</li> <li>\u8981\u4ef6:</li> <li>Git\u3092\u4f7f\u7528</li> <li>GitHub\u306b\u516c\u958b</li> <li>\u8aac\u660e\u7684\u306aREADME</li> </ul>"},{"location":"languages/ja/phase1/#_10","title":"\u30ea\u30bd\u30fc\u30b9","text":"<ul> <li>MOOC from the University of Helsinki</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/ja/phase2/","title":"\u30d5\u30a7\u30fc\u30ba 2 \u2013 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 (2\uff5e3\u30f6\u6708)","text":""},{"location":"languages/ja/phase2/#classes-objects-attributes-methods","title":"Classes, Objects, Attributes, Methods","text":"<ul> <li>\u30af\u30e9\u30b9\u69cb\u9020</li> <li>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316</li> <li>this\u306e\u4f7f\u7528</li> <li>\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\uff1a\u547d\u540d\u3001\u30b3\u30fc\u30c9\u306e\u6574\u7406</li> </ul>"},{"location":"languages/ja/phase2/#encapsulation-inheritance-polymorphism-abstraction","title":"Encapsulation, Inheritance, Polymorphism, Abstraction","text":"<ul> <li>Encapsulation: private\u3001getters/setters\u3001\u691c\u8a3c</li> <li>Inheritance: extends\u3001overriding (@Override)</li> <li>Polymorphism: \u30b5\u30d6\u30bf\u30a4\u30d7\u3001method overloading</li> <li>Abstraction: \u6982\u8981\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u62bd\u8c61\u30af\u30e9\u30b9\u306e\u6e96\u5099</li> </ul>"},{"location":"languages/ja/phase2/#interfacesabstract-classes","title":"Interfaces\u3068Abstract Classes","text":"<ul> <li>Interfaces: implements\u3001default methods</li> <li>Abstract classes: \u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068\u5177\u8c61\u30e1\u30bd\u30c3\u30c9</li> <li>\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u62bd\u8c61\u30af\u30e9\u30b9\u306e\u9055\u3044</li> </ul>"},{"location":"languages/ja/phase2/#constructors-initializers-static-blocks","title":"Constructors, Initializers, Static Blocks","text":"<ul> <li>\u30c7\u30d5\u30a9\u30eb\u30c8\u304a\u3088\u3073\u30d1\u30e9\u30e1\u30fc\u30bf\u4ed8\u304d\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3001this()\u3067\u306e\u547c\u3073\u51fa\u3057</li> <li>\u521d\u671f\u5316\u30d6\u30ed\u30c3\u30af\uff08{}\uff09\u304a\u3088\u3073static\u30d6\u30ed\u30c3\u30af\uff08static {}\uff09</li> </ul>"},{"location":"languages/ja/phase2/#enumerations","title":"Enumerations","text":"<ul> <li>enum\u306e\u4f5c\u6210\u3068\u4f7f\u7528</li> <li>enum\u5185\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u5c5e\u6027</li> </ul>"},{"location":"languages/ja/phase2/#collections","title":"\u57fa\u672c\u7684\u306aCollections","text":"<ul> <li>ArrayList: \u8ffd\u52a0\u3001\u524a\u9664\u3001\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\uff08for\u3001forEach\u3001Iterator\uff09</li> <li>HashMap: key-value\u3001\u4e00\u822c\u7684\u306a\u64cd\u4f5c</li> <li>HashSet: \u91cd\u8907\u306e\u6392\u9664</li> <li>Queue\u3068Stack\u306e\u7d39\u4ecb\uff08\u4f8b: LinkedList\u3092queue/stack\u3068\u3057\u3066\u4f7f\u7528\uff09</li> <li>Java Collections Framework\u306e\u7d39\u4ecb</li> </ul>"},{"location":"languages/ja/phase2/#_1","title":"\u57fa\u672c\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","text":"<ul> <li>\u7dda\u5f62\u63a2\u7d22\u3068\u4e8c\u5206\u63a2\u7d22</li> <li>Sorting: Bubble Sort\u3001Collections.sort()</li> <li>Recursion: \u6982\u5ff5\u3068\u7c21\u5358\u306a\u4f8b\uff08\u4f8b: \u968e\u4e57\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\uff09</li> <li>\u8907\u96d1\u5ea6\u306e\u7d39\u4ecb\uff08O(n)\u3001O(log n)\uff09</li> </ul>"},{"location":"languages/ja/phase2/#generics","title":"Generics","text":"<ul> <li>\u69cb\u6587\uff08\uff09\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30e1\u30bd\u30c3\u30c9 <li>Bounds\uff08extends\u3001super\uff09</li>"},{"location":"languages/ja/phase2/#stream-api","title":"Stream API\uff08\u5c0e\u5165\uff09","text":"<ul> <li>\u57fa\u672c\u64cd\u4f5c: filter\u3001map\u3001collect</li> <li>ArrayList\u3092\u4f7f\u7528\u3057\u305f\u4f8b</li> </ul>"},{"location":"languages/ja/phase2/#unit-testing","title":"Unit Testing\uff08\u5c0e\u5165\uff09","text":"<ul> <li>JUnit\u306e\u57fa\u672c\u7684\u306a\u4f7f\u7528</li> <li>\u30af\u30e9\u30b9\u3068\u30e1\u30bd\u30c3\u30c9\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u4f5c\u6210</li> <li>TDD\uff08Test-Driven Development\uff09\u306e\u7d39\u4ecb</li> </ul>"},{"location":"languages/ja/phase2/#_2","title":"\u6700\u7d42\u30d7\u30ed\u30b8\u30a7\u30af\u30c8","text":"<ul> <li>\u30e9\u30a4\u30d6\u30e9\u30ea\u30b7\u30b9\u30c6\u30e0</li> <li>\u30af\u30e9\u30b9: Book\u3001User\u3001Library</li> <li>\u7d99\u627f: DigitalBook\u3068PhysicalBook</li> <li>\u30b3\u30ec\u30af\u30b7\u30e7\u30f3: \u66f8\u7c4d\u7528\u306eArrayList\u3001\u8cb8\u51fa\u7528\u306eHashMap</li> <li>Encapsulation: \u30c7\u30fc\u30bf\u691c\u8a3c</li> <li>Git: \u6a5f\u80fd\u3054\u3068\u306ecommit\uff08\u4f8b: <code>feature/book-management</code>\uff09</li> <li>GitHub\u306b\u516c\u958b\u3057\u3001\u8aac\u660e\u7684\u306aREADME\u3092\u4ed8\u3051\u308b</li> </ul>"},{"location":"languages/ja/phase2/#_3","title":"\u66f4\u65b0\u3055\u308c\u305f\u30ea\u30bd\u30fc\u30b9","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java\uff08\u66f8\u7c4d\uff09</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/ja/phase3/","title":"\u30d5\u30a7\u30fc\u30ba 3 \u2013 \u30c7\u30fc\u30bf\u6301\u7d9a\u6027\u3068Streams (2\uff5e3\u30f6\u6708)","text":""},{"location":"languages/ja/phase3/#sql","title":"\u57fa\u672c\u7684\u306aSQL","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>\u3002  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>\u3002  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>\u3002  </li> <li>Keys: \u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3068\u5916\u90e8\u30ad\u30fc\u3002  </li> <li>\u6b63\u898f\u5316: 1NF\u30012NF\u30013NF\u3002  </li> <li>\u4f8b: \u88fd\u54c1\u3068\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3002  </li> </ul>"},{"location":"languages/ja/phase3/#jdbcconnection-pool","title":"JDBC\u3068Connection Pool","text":"<ul> <li>Classes: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>\u3002  </li> <li>Connection Pool\uff08HikariCP\uff09\u306e\u4f7f\u7528\u3002  </li> <li>\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9: <code>try-with-resources</code>\u3001<code>SQLException</code>\u306e\u51e6\u7406\u3002  </li> </ul>"},{"location":"languages/ja/phase3/#hibernate-jpa","title":"Hibernate + JPA\u306e\u5b9f\u8df5","text":"<ul> <li>Annotations: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>\u3002  </li> <li>\u8a2d\u5b9a: <code>persistence.xml</code>\u307e\u305f\u306f<code>application.properties</code>\u3002  </li> <li><code>EntityManager</code>\u3092\u4f7f\u7528\u3057\u305fCRUD\u64cd\u4f5c\u3002  </li> <li>Flyway\u307e\u305f\u306fLiquibase\u306b\u3088\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u79fb\u884c\u306e\u7d39\u4ecb\u3002</li> </ul>"},{"location":"languages/ja/phase3/#nosql","title":"NoSQL\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u7d39\u4ecb","text":"<ul> <li>\u6982\u5ff5: \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3001\u6c34\u5e73\u30b9\u30b1\u30fc\u30e9\u30d3\u30ea\u30c6\u30a3\u3002  </li> <li>MongoDB: \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3001MongoRepository\u3092\u4f7f\u7528\u3057\u305fCRUD\u64cd\u4f5c\u3002  </li> <li>Spring Data MongoDB: Spring Boot\u3068\u306e\u7d71\u5408\u3002  </li> <li>\u4f8b: MongoDB\u306b\u88fd\u54c1\u306e\u30b7\u30b9\u30c6\u30e0\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u30ed\u30b0\u3092\u4fdd\u5b58\u3002</li> </ul>"},{"location":"languages/ja/phase3/#streamslambda-expressions","title":"Streams\u3068Lambda Expressions","text":"<ul> <li>\u64cd\u4f5c: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>\u3002  </li> <li>\u4f8b: \u4fa1\u683c\u3067\u88fd\u54c1\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u3001\u540d\u524d\u3067\u30bd\u30fc\u30c8\u3002  </li> </ul>"},{"location":"languages/ja/phase3/#optionalfunctional-interfaces","title":"Optional\u3068Functional Interfaces","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>\u3002  </li> <li>Functional Interfaces: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>\u3002  </li> <li>\u4f8b: Streams\u3067\u30c7\u30fc\u30bf\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b<code>Predicate</code>\u3092\u4f7f\u7528\u3002  </li> </ul>"},{"location":"languages/ja/phase3/#collections","title":"\u9ad8\u5ea6\u306aCollections","text":"<ul> <li>LinkedList: \u52b9\u7387\u7684\u306a\u633f\u5165/\u524a\u9664\u3002  </li> <li>TreeMap: \u9806\u5e8f\u4ed8\u3051\u3089\u308c\u305fkey-value\u30da\u30a2\u3002  </li> <li>PriorityQueue: \u512a\u5148\u30ad\u30e5\u30fc\u3002  </li> <li>LinkedHashMap\u3068Deque\uff08\u7d39\u4ecb\uff09\u3002  </li> </ul>"},{"location":"languages/ja/phase3/#slf4jlogback","title":"\u30ed\u30ae\u30f3\u30b0\uff08SLF4J/Logback\uff09","text":"<ul> <li>SLF4J\u3068Logback\u306e\u8a2d\u5b9a\u3002  </li> <li>\u30ec\u30d9\u30eb: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>\u3002  </li> <li>\u4f8b: Hibernate\u30af\u30a8\u30ea\u3092\u30ed\u30b0\u306b\u8a18\u9332\u3002  </li> </ul>"},{"location":"languages/ja/phase3/#acid","title":"\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u6982\u5ff5\uff08ACID\uff09","text":"<ul> <li>\u539f\u5b50\u6027\u3001\u4e00\u8cab\u6027\u3001\u5206\u96e2\u6027\u3001\u8010\u4e45\u6027\u3002  </li> <li>JDBC\uff08<code>commit</code>, <code>rollback</code>\uff09\u304a\u3088\u3073Hibernate\uff08<code>@Transactional</code>\uff09\u3092\u4f7f\u7528\u3057\u305f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3002  </li> </ul>"},{"location":"languages/ja/phase3/#_1","title":"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u5b9f\u884c\u8a08\u753b","text":"<ul> <li>Indexes: \u30d7\u30e9\u30a4\u30de\u30ea\u3001\u30e6\u30cb\u30fc\u30af\u3001\u8907\u5408\u3002  </li> <li>\u30af\u30a8\u30ea\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30ba\u306e\u305f\u3081\u306eEXPLAIN\u306e\u4f7f\u7528\u3002  </li> <li>\u4f8b: \u983b\u7e41\u306b\u691c\u7d22\u3055\u308c\u308b\u5217\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3002  </li> </ul>"},{"location":"languages/ja/phase3/#_2","title":"\u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09","text":"<ul> <li><code>Files</code>, <code>BufferedReader</code>\u3092\u4f7f\u7528\u3057\u305f\u8aad\u307f\u66f8\u304d\u3002  </li> <li>\u4f8b: Streams\u3092\u4f7f\u7528\u3057\u3066\u88fd\u54c1\u30ec\u30dd\u30fc\u30c8\u3092CSV\u306b\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3002  </li> </ul>"},{"location":"languages/ja/phase3/#_3","title":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30c6\u30b9\u30c8\uff08\u7d39\u4ecb\uff09","text":"<ul> <li>H2\u3068JUnit\u3092\u4f7f\u7528\u3057\u305f\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u3002  </li> <li>\u4f8b: Hibernate\u3092\u4f7f\u7528\u3057\u305fCRUD\u64cd\u4f5c\u306e\u30c6\u30b9\u30c8\u3002  </li> </ul>"},{"location":"languages/ja/phase3/#_4","title":"\u6700\u7d42\u30d7\u30ed\u30b8\u30a7\u30af\u30c8","text":"<p>\u88fd\u54c1\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 - \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9: Product\u3068Category\u30c6\u30fc\u30d6\u30eb\uff081:N\u306e\u95a2\u4fc2\uff09\u3002 - Java: JPA\uff08<code>Product</code>, <code>Category</code>\uff09\u3092\u4f7f\u7528\u3057\u305f\u30af\u30e9\u30b9\u3001Hibernate\u306b\u3088\u308bCRUD\u3002 - \u30aa\u30d7\u30b7\u30e7\u30f3: MongoDB\u306b\u88fd\u54c1\u5909\u66f4\u30ed\u30b0\u3092\u4fdd\u5b58\u3002 - \u30aa\u30d7\u30b7\u30e7\u30f3: MongoDB\u306b\u52d5\u7684\u306a\u88fd\u54c1\u5c5e\u6027\uff08\u4f8b: \u6280\u8853\u4ed5\u69d8\uff09\u3092\u4fdd\u5b58\u3002 - Streams: \u88fd\u54c1\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0/\u30bd\u30fc\u30c8\uff08\u4f8b: \u4fa1\u683c\u307e\u305f\u306f\u30ab\u30c6\u30b4\u30ea\u30fc\u306b\u3088\u308b\uff09\u3002 - \u30ed\u30ae\u30f3\u30b0: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306e\u76e3\u8996\u3002 - Git: \u6a5f\u80fd\u3054\u3068\u306ecommit\uff08\u4f8b: <code>feature/crud</code>, <code>feature/streams</code>\uff09\u3002 - GitHub\u306b\u516c\u958b\u3057\u3001\u8aac\u660e\u7684\u306aREADME\u3092\u4ed8\u3051\u308b\u3002  </p>"},{"location":"languages/ja/phase3/#_5","title":"\u30ea\u30bd\u30fc\u30b9","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/ja/phase4/","title":"\u30d5\u30a7\u30fc\u30ba 4 \u2013 \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u30a6\u30a7\u30d6\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 (3\uff5e4\u30f6\u6708)","text":""},{"location":"languages/ja/phase4/#spring-boot-spring-core-spring-data-jpa","title":"Spring Boot, Spring Core, Spring Data JPA","text":"<ul> <li>Spring Core: Dependency Injection (<code>@Bean</code>, <code>@Autowired</code>), IoC Container.  </li> <li>Spring Boot: Auto-Configuration, Starters (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>), <code>application.yml</code>.  </li> <li>Spring Data JPA: Repositories (<code>CrudRepository</code>, <code>JpaRepository</code>), <code>@Query</code>\u3092\u4f7f\u7528\u3057\u305f\u30af\u30a8\u30ea\u3001\u30da\u30fc\u30b8\u30cd\u30fc\u30b7\u30e7\u30f3\u3002  </li> <li>\u4f8b: \u30bf\u30b9\u30af\u30a2\u30d7\u30ea\u3067\u30bf\u30b9\u30af\u3092\u7ba1\u7406\u3059\u308bREST endpoints\u306e\u4f5c\u6210\uff08CRUD\uff09\u3002  </li> </ul>"},{"location":"languages/ja/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>\u6982\u5ff5: Authentication\u3001Authorization\u3001Security Filters\u3002  </li> <li>JWT: \u30c8\u30fc\u30af\u30f3\u306e\u4f5c\u6210\u3068\u691c\u8a3c\u3001<code>JwtAuthenticationFilter</code>\u306e\u4f7f\u7528\u3002  </li> <li>OAuth2: Resource Server\u306e\u8a2d\u5b9a\u3001\u30d7\u30ed\u30d0\u30a4\u30c0\uff08\u4f8b: Google\uff09\u3068\u306e\u7d71\u5408\u3002  </li> <li>\u4f8b: JWT\u3068\u30ed\u30fc\u30eb\uff08<code>ADMIN</code>, <code>USER</code>\uff09\u3067\u30bf\u30b9\u30af\u306eendpoints\u3092\u4fdd\u8b77\u3002  </li> </ul>"},{"location":"languages/ja/phase4/#_1","title":"\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3068\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8","text":"<ul> <li>Unit Tests: JUnit 5\u3001Mockito\uff08<code>@Mock</code>, <code>@InjectMocks</code>\uff09\u3001\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u306e\u30c6\u30b9\u30c8\u3002  </li> <li>Integration Tests: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, \u30c6\u30b9\u30c8\u7528\u306eH2\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3002  </li> <li>Testcontainers: Docker\u30b3\u30f3\u30c6\u30ca\u3067\u306ePostgreSQL\u3092\u4f7f\u7528\u3057\u305f\u30c6\u30b9\u30c8\u3002  </li> <li>\u4f8b: \u30bf\u30b9\u30af\u30a2\u30d7\u30ea\u306e\u30b5\u30fc\u30d3\u30b9\u3068endpoints\u306e\u30c6\u30b9\u30c8\u3002  </li> </ul>"},{"location":"languages/ja/phase4/#restful-apisswagger","title":"RESTful APIs\u3068Swagger\u306b\u3088\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3","text":"<ul> <li>REST: HTTP\u30e1\u30bd\u30c3\u30c9\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3001RESTful\u539f\u5247\u3002  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>\u3002  </li> <li>Swagger: springdoc-openapi\u306e\u8a2d\u5b9a\u3001<code>@Operation</code>\u306b\u3088\u308b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3002  </li> <li>\u4f8b: Swagger UI\u3067\u30bf\u30b9\u30af\u30a2\u30d7\u30ea\u306eendpoints\u3092\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5316\u3002  </li> </ul>"},{"location":"languages/ja/phase4/#graphql","title":"GraphQL\u306e\u7d39\u4ecb","text":"<ul> <li>\u6982\u5ff5: Queries\u3001Mutations\u3001Schema\u3002  </li> <li>Spring Boot with GraphQL: spring-boot-starter-graphql\u3092\u4f7f\u7528\u3057\u305f\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3002  </li> <li>\u4f8b: \u30b9\u30c6\u30fc\u30bf\u30b9\u3054\u3068\u306e\u30bf\u30b9\u30af\u3092\u30ea\u30b9\u30c8\u3059\u308bGraphQL Query\u306e\u4f5c\u6210\u3002  </li> </ul>"},{"location":"languages/ja/phase4/#_2","title":"\u57fa\u672c\u7684\u306a\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u7d71\u5408","text":"<ul> <li>Thymeleaf: Spring Boot\u3067HTML\u30da\u30fc\u30b8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3002  </li> <li>\u4f8b: \u30bf\u30b9\u30af\u306e\u8868\u793a\u3068\u4f5c\u6210\u306e\u305f\u3081\u306e\u30b7\u30f3\u30d7\u30eb\u306a\u30a6\u30a7\u30d6\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u4f5c\u6210\u3002  </li> </ul>"},{"location":"languages/ja/phase4/#mavengradle","title":"\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb: Maven\u3068Gradle","text":"<ul> <li>Maven: <code>pom.xml</code>\u306e\u69cb\u9020\u3001\u4f9d\u5b58\u95a2\u4fc2\u3001\u30d7\u30e9\u30b0\u30a4\u30f3\u3002  </li> <li>Gradle: <code>build.gradle</code>\u30d5\u30a1\u30a4\u30eb\u3001\u30bf\u30b9\u30af\u3001\u4f9d\u5b58\u95a2\u4fc2\u7ba1\u7406\u3002  </li> <li>\u4f8b: Maven\u3068Gradle\u3067\u30bf\u30b9\u30af\u30a2\u30d7\u30ea\u3092\u8a2d\u5b9a\u3002  </li> </ul>"},{"location":"languages/ja/phase4/#_3","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c7\u30d7\u30ed\u30a4","text":"<ul> <li>\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0: Railway\u3001Heroku\u3001AWS\uff08Elastic Beanstalk\uff09\u3002  </li> <li>\u624b\u9806: JAR\u3068\u3057\u3066\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u3001GitHub Actions\u3067CI/CD\u3092\u8a2d\u5b9a\u3002  </li> <li>\u4f8b: PostgreSQL\u3092\u4f7f\u7528\u3057\u3066Railway\u306b\u30bf\u30b9\u30af\u30a2\u30d7\u30ea\u3092\u30c7\u30d7\u30ed\u30a4\u3002  </li> </ul>"},{"location":"languages/ja/phase4/#_4","title":"\u6700\u7d42\u30d7\u30ed\u30b8\u30a7\u30af\u30c8","text":"<p>\u30bf\u30b9\u30af\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 - \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9: <code>Task</code>\uff08\u30bf\u30a4\u30c8\u30eb\u3001\u8aac\u660e\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\uff09\u3068<code>User</code>\u30c6\u30fc\u30d6\u30eb\uff081:N\u306e\u95a2\u4fc2\uff09\u3002 - Java: Spring Boot\u3001Spring Data JPA\u3092\u4f7f\u7528\u3057\u305fREST API\u3067CRUD\u3002 - \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3: JWT Authentication\u3001\u30ed\u30fc\u30eb\uff08<code>ADMIN</code>, <code>USER</code>\uff09\u3002 - \u30c6\u30b9\u30c8: \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\uff08\u30b5\u30fc\u30d3\u30b9\uff09\u3068\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\uff08Testcontainers\u3092\u4f7f\u7528\u3057\u305fendpoints\uff09\u3002 - \u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3: endpoints\u306e\u8aac\u660e\u4ed8\u304d\u306eSwagger UI\u3002 - \u30aa\u30d7\u30b7\u30e7\u30f3: \u30bf\u30b9\u30af\u3092\u30ea\u30b9\u30c8\u3059\u308bGraphQL Query\u3068\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u7528\u306eThymeleaf\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u8ffd\u52a0\u3002 - Git: \u6a5f\u80fd\u3054\u3068\u306ecommit\uff08\u4f8b: <code>feature/rest-api</code>, <code>feature/security</code>\uff09\u3002 - \u516c\u958b: GitHub\u306bREADME\uff08\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3001endpoints\u3001\u30c7\u30d7\u30ed\u30a4\uff09\u3068\u3068\u3082\u306b\u516c\u958b\u3002  </p>"},{"location":"languages/ja/phase4/#_5","title":"\u30ea\u30bd\u30fc\u30b9","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/ja/phase5/","title":"\u30d5\u30a7\u30fc\u30ba 5 \u2013 \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3068\u4e26\u884c\u51e6\u7406 (2\uff5e3\u30f6\u6708)","text":""},{"location":"languages/ja/phase5/#clean-codesolid","title":"Clean Code\u3068SOLID\u539f\u5247","text":"<ul> <li>Clean Code: \u660e\u78ba\u306a\u547d\u540d\u3001\u77ed\u3044\u95a2\u6570\u3001\u6709\u7528\u306a\u30b3\u30e1\u30f3\u30c8\u3001\u4e00\u8cab\u3057\u305f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3002  </li> <li>SOLID:  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>\u4f8b: \u30bf\u30b9\u30af\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306e\u30b5\u30fc\u30d3\u30b9\u3092SOLID\u539f\u5247\u306b\u5f93\u3063\u3066\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3002  </p>"},{"location":"languages/ja/phase5/#_1","title":"\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3","text":"<ul> <li>\u30d1\u30bf\u30fc\u30f3: Factory\uff08\u4f5c\u6210\uff09\u3001Singleton\uff08\u5358\u4e00\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\uff09\u3001Builder\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u69cb\u7bc9\uff09\u3001Strategy\uff08\u632f\u308b\u821e\u3044\uff09\u3001Observer\uff08\u30a4\u30d9\u30f3\u30c8\uff09\u3002  </li> <li>\u9069\u7528: \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u9069\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u306e\u9078\u629e\u3002  </li> </ul> <p>\u4f8b: \u7570\u306a\u308b\u30bf\u30b9\u30af\u512a\u5148\u9806\u4f4d\u4ed8\u3051\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306bStrategy\u3092\u4f7f\u7528\u3002  </p>"},{"location":"languages/ja/phase5/#_2","title":"\u30b9\u30ec\u30c3\u30c9\u3068\u4e26\u884c\u51e6\u7406","text":"<ul> <li>\u6982\u5ff5: Thread\u3001Runnable\u3001ExecutorService\u3001ForkJoinPool\u3002  </li> <li>\u6280\u8853: \u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u306e\u4f5c\u6210\u3068\u7ba1\u7406\u3001\u975e\u540c\u671f\u30bf\u30b9\u30af\u3002  </li> </ul> <p>\u4f8b: ExecutorService\u3067\u30bf\u30b9\u30af\u30ec\u30dd\u30fc\u30c8\u3092\u4e26\u884c\u51e6\u7406\u3002  </p>"},{"location":"languages/ja/phase5/#_3","title":"\u540c\u671f\u3068\u4e26\u884c\u51e6\u7406\u306e\u554f\u984c","text":"<ul> <li>\u30e1\u30ab\u30cb\u30ba\u30e0: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>\u3002  </li> <li>\u554f\u984c: Deadlock\u3001Race Condition\u3001Starvation\u3002  </li> </ul> <p>\u4f8b: \u5171\u6709\u30bf\u30b9\u30af\u30ea\u30b9\u30c8\u3078\u306e\u5b89\u5168\u306a\u30a2\u30af\u30bb\u30b9\u3092\u5b9f\u88c5\u3002  </p>"},{"location":"languages/ja/phase5/#_4","title":"\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u5165\u9580","text":"<ul> <li>\u6982\u5ff5: \u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3001REST\u901a\u4fe1\u3001\u30b5\u30fc\u30d3\u30b9\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u3002  </li> <li>\u30c4\u30fc\u30eb: Spring Cloud\uff08\u4f8b: Eureka for service discovery\uff09\u3002  </li> </ul> <p>\u4f8b: \u30bf\u30b9\u30af\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\uff08\u30bf\u30b9\u30af\u3068\u30e6\u30fc\u30b6\u30fc\uff09\u306b\u5206\u5272\u3002  </p>"},{"location":"languages/ja/phase5/#_5","title":"\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u306e\u57fa\u790e\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09","text":"<ul> <li>\u6982\u5ff5: Publisher/Subscriber\u3001\u30ad\u30e5\u30fc\u3001\u30c8\u30d4\u30c3\u30af\u3002  </li> <li>RabbitMQ: \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1\u3068\u53d7\u4fe1\u3002  </li> </ul> <p>\u4f8b: RabbitMQ\u3092\u4ecb\u3057\u3066\u30bf\u30b9\u30af\u66f4\u65b0\u3092\u30e6\u30fc\u30b6\u30fc\u306b\u901a\u77e5\u3002  </p>"},{"location":"languages/ja/phase5/#_6","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316","text":"<ul> <li>Caching: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\u3092\u6e1b\u3089\u3059\u305f\u3081\u306bRedis\u3092\u4f7f\u7528\u3057\u305fSpring Cache\u3002  </li> <li>JVM Tuning: \u57fa\u672c\u6982\u5ff5\uff08\u30d2\u30fc\u30d7\u3001\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\uff09\u3002  </li> </ul> <p>\u4f8b: \u30bf\u30b9\u30af\u30b7\u30b9\u30c6\u30e0\u306e\u983b\u7e41\u306a\u30af\u30a8\u30ea\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5b9f\u88c5\u3002  </p>"},{"location":"languages/ja/phase5/#devops-dockercicd","title":"DevOps/\u30af\u30e9\u30a6\u30c9\u5165\u9580: Docker\u3068CI/CD","text":"<ul> <li>Docker: \u30b3\u30f3\u30c6\u30ca\u3001\u30a4\u30e1\u30fc\u30b8\u3001Dockerfile\u3001Docker Compose\u3002  </li> <li>CI/CD: GitHub Actions\u3067\u30d3\u30eb\u30c9\u3068\u30c7\u30d7\u30ed\u30a4\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u8a2d\u5b9a\u3002  </li> </ul> <p>\u4f8b: \u30bf\u30b9\u30af\u30a2\u30d7\u30ea\u306eDockerfile\u3092\u4f5c\u6210\u3057\u3001GitHub Actions\u3067\u30c7\u30d7\u30ed\u30a4\u3002  </p>"},{"location":"languages/ja/phase5/#_7","title":"\u30aa\u30d6\u30b6\u30fc\u30d0\u30d3\u30ea\u30c6\u30a3","text":"<ul> <li>\u30c4\u30fc\u30eb: Prometheus\uff08\u30e1\u30c8\u30ea\u30af\u30b9\uff09\u3001Grafana\uff08\u53ef\u8996\u5316\uff09\u3001ELK Stack\uff08\u30ed\u30b0\uff09\u3002  </li> <li>\u6982\u5ff5: \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u76e3\u8996\u3001\u96c6\u4e2d\u30ed\u30b0\u3001\u30a2\u30e9\u30fc\u30c8\u3002  </li> </ul> <p>\u4f8b: Prometheus\u3068Grafana\u3067\u30bf\u30b9\u30af\u306eAPI\u5fdc\u7b54\u6642\u9593\u3092\u76e3\u8996\u3002  </p>"},{"location":"languages/ja/phase5/#owasp-top-ten","title":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3: OWASP Top Ten","text":"<ul> <li>\u6982\u5ff5: Injection\u3001\u8a8d\u8a3c\u30a8\u30e9\u30fc\u3001\u6a5f\u5bc6\u30c7\u30fc\u30bf\u306e\u9732\u51fa\u3002  </li> <li>\u5b9f\u8df5: \u5165\u529b\u691c\u8a3c\u3001\u30b5\u30cb\u30bf\u30a4\u30ba\u3001\u5b89\u5168\u306a\u8a2d\u5b9a\u3002  </li> </ul> <p>\u4f8b: \u30bf\u30b9\u30afAPI\u3092SQL Injection\u3068XSS\u304b\u3089\u4fdd\u8b77\u3002  </p>"},{"location":"languages/ja/phase5/#_8","title":"\u6700\u7d42\u30d7\u30ed\u30b8\u30a7\u30af\u30c8","text":"<p>\u9ad8\u5ea6\u306a\u30bf\u30b9\u30af\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 - \u30d0\u30c3\u30af\u30a8\u30f3\u30c9: \u30d5\u30a7\u30fc\u30ba4\u306e\u30bf\u30b9\u30afAPI\u3092\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\uff08\u30bf\u30b9\u30af\u3068\u30e6\u30fc\u30b6\u30fc\uff09\u3067\u5f37\u5316\u3002 - \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3: Clean Code\u3001SOLID\u3001\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\uff08\u4f8b: Strategy\uff09\u3067\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3002 - \u4e26\u884c\u51e6\u7406: ExecutorService\u3067\u30ec\u30dd\u30fc\u30c8\u3092\u4e26\u884c\u51e6\u7406\u3002 - \u30aa\u30d7\u30b7\u30e7\u30f3: RabbitMQ\u3092\u4ecb\u3057\u305f\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u9593\u306e\u901a\u4fe1\u3068\u3001\u983b\u7e41\u306a\u30af\u30a8\u30ea\u306e\u305f\u3081\u306eRedis\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u8ffd\u52a0\u3002 - DevOps: Docker\u3067\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u3001GitHub Actions\u3067CI/CD\u3092\u8a2d\u5b9a\u3002 - \u30aa\u30d6\u30b6\u30fc\u30d0\u30d3\u30ea\u30c6\u30a3: \u30e1\u30c8\u30ea\u30af\u30b9\u306e\u305f\u3081\u306bPrometheus\u3068Grafana\u3092\u8ffd\u52a0\u3002 - \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3: OWASP Top Ten\u306b\u5bfe\u3059\u308b\u4fdd\u8b77\u3092\u5b9f\u88c5\u3002 - Git: \u6a5f\u80fd\u3054\u3068\u306ecommit\uff08\u4f8b: <code>feature/microservices</code>, <code>feature/concurrency</code>\uff09\u3002 - \u516c\u958b: GitHub\u306b\u8a73\u7d30\u306aREADME\uff08\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3001\u30c7\u30d7\u30ed\u30a4\uff09\u3068\u3068\u3082\u306b\u516c\u958b\u3002  </p>"},{"location":"languages/ja/phase5/#_9","title":"\u30ea\u30bd\u30fc\u30b9","text":"<ul> <li>The Pragmatic Programmer\uff08\u66f8\u7c4d\uff09  </li> <li>Effective Java\uff08\u66f8\u7c4d\uff09  </li> <li>Java Concurrency in Practice\uff08\u66f8\u7c4d\uff09  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/ja/phase6/","title":"\u30d5\u30a7\u30fc\u30ba 6 \u2013 \u6700\u7d42\u30d7\u30ed\u30b8\u30a7\u30af\u30c8 (\u7d99\u7d9a\u4e2d)","text":""},{"location":"languages/ja/phase6/#1-crud","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8 1: \u8a8d\u8a3c\u4ed8\u304d\u5b8c\u5168\u306aCRUD","text":"<ul> <li>\u76ee\u7684: \u5b89\u5168\u306a\u8a8d\u8a3c\u3068\u30c6\u30b9\u30c8\u3092\u5099\u3048\u305f\u5805\u7262\u306aRESTful API\u3092\u69cb\u7bc9\u3059\u308b\u3002  </li> <li>\u6280\u8853: Spring Boot\u3001Spring Data JPA (PostgreSQL)\u3001Spring Security (JWT)\u3001JUnit 5\u3001Testcontainers\u3002  </li> <li>\u6a5f\u80fd: \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff08\u4f8b: \u30bf\u30b9\u30af\u3001\u30e6\u30fc\u30b6\u30fc\uff09\u306eCRUD\u3001\u30ed\u30fc\u30eb\uff08ADMIN\u3001USER\uff09\u306b\u3088\u308b\u8a8d\u8a3c\u3001Swagger\u306b\u3088\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3002  </li> <li>\u30aa\u30d7\u30b7\u30e7\u30f3: \u30bf\u30b9\u30af\u306e\u8868\u793a/\u7ba1\u7406\u306e\u305f\u3081\u306eThymeleaf\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u8ffd\u52a0\u3002  </li> <li>\u4f8b: \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u7ba1\u7406\u3059\u308bAPI\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3: <code>Project</code>, <code>Task</code>, <code>User</code>\uff09\u3092\u4fdd\u8b77\u3055\u308c\u305fendpoints\u3067\u69cb\u7bc9\u3002  </li> </ul>"},{"location":"languages/ja/phase6/#2","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8 2: \u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9","text":"<ul> <li>\u76ee\u7684: \u30d7\u30ed\u30b8\u30a7\u30af\u30c81\u306eAPI\u306b\u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u3002  </li> <li>\u6280\u8853: Spring Boot\uff08<code>MultipartFile</code>\uff09\u3001Amazon S3\u307e\u305f\u306f\u30ed\u30fc\u30ab\u30eb\u30b9\u30c8\u30ec\u30fc\u30b8\u3001\u30d5\u30a1\u30a4\u30eb\u691c\u8a3c\u3002  </li> <li>\u6a5f\u80fd: \u30bf\u30b9\u30af\u306b\u95a2\u9023\u3059\u308b\u753b\u50cf/\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3001\u30bf\u30a4\u30d7/\u30b5\u30a4\u30ba\u306e\u691c\u8a3c\u3002  </li> <li>\u4f8b: API\u3067\u30bf\u30b9\u30af\u306e\u305f\u3081\u306e\u6dfb\u4ed8\u30d5\u30a1\u30a4\u30eb\uff08\u4f8b: PDF\u3001PNG\uff09\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3092\u8a31\u53ef\u3002  </li> </ul>"},{"location":"languages/ja/phase6/#3","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8 3: \u30af\u30e9\u30a6\u30c9\u30c7\u30d7\u30ed\u30a4","text":"<ul> <li>\u76ee\u7684: CI/CD\u3092\u4f7f\u7528\u3057\u3066\u30af\u30e9\u30a6\u30c9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306bAPI\u3092\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u3002  </li> <li>\u6280\u8853: Railway\u3001Heroku\u3001\u307e\u305f\u306fAWS (Elastic Beanstalk)\u3001GitHub Actions\u3001Docker\u3002  </li> <li>\u6a5f\u80fd: JAR/Docker\u3068\u3057\u3066\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u3001\u74b0\u5883\u5909\u6570\u306e\u8a2d\u5b9a\u3001\u81ea\u52d5\u30c7\u30d7\u30ed\u30a4\u3002  </li> <li>\u30aa\u30d7\u30b7\u30e7\u30f3: \u983b\u7e41\u306a\u30af\u30a8\u30ea\u3092\u6700\u9069\u5316\u3059\u308b\u305f\u3081\u306bRedis\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5b9f\u88c5\u3002  </li> <li>\u4f8b: PostgreSQL\u3068CI/CD\u3092\u4f7f\u7528\u3057\u3066Railway\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8API\u3092\u30c7\u30d7\u30ed\u30a4\u3002  </li> </ul>"},{"location":"languages/ja/phase6/#4","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8 4: \u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9","text":"<ul> <li>\u76ee\u7684: \u30d7\u30ed\u30b8\u30a7\u30af\u30c81\u306eAPI\u3092\u30aa\u30fc\u30b1\u30b9\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3\u3055\u308c\u305f\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u306b\u5206\u5272\u3059\u308b\u3002  </li> <li>\u6280\u8853: Spring Cloud (Eureka, Gateway)\u3001Docker Compose\u3001REST\u306b\u3088\u308b\u901a\u4fe1\u3002  </li> <li>\u6a5f\u80fd: <code>Tasks</code>\u3068<code>Users</code>\u306e\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u3001\u30b5\u30fc\u30d3\u30b9\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u4ed8\u304d\u3002  </li> <li>\u30aa\u30d7\u30b7\u30e7\u30f3: \u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u9593\u306e\u975e\u540c\u671f\u901a\u4fe1\u306bRabbitMQ\u3092\u4f7f\u7528\u3002  </li> <li>\u4f8b: \u30bf\u30b9\u30af\u3068\u30e6\u30fc\u30b6\u30fc\u30ed\u30b8\u30c3\u30af\u30922\u3064\u306e\u30b5\u30fc\u30d3\u30b9\u306b\u5206\u3051\u3001Docker\u3067\u30aa\u30fc\u30b1\u30b9\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3\u3002  </li> </ul>"},{"location":"languages/ja/phase6/#5-api","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8 5: \u5916\u90e8API\u7d71\u5408","text":"<ul> <li>\u76ee\u7684: \u5916\u90e8API\u3092\u5229\u7528\u3057\u3066\u6a5f\u80fd\u3092\u5f37\u5316\u3059\u308b\u3002  </li> <li>\u6280\u8853: Spring RestTemplate\u307e\u305f\u306fWebClient\u3001API\u8a8d\u8a3c\uff08\u4f8b: OAuth2\uff09\u3002  </li> <li>\u6a5f\u80fd: \u516c\u958bAPI\u3068\u306e\u7d71\u5408\uff08\u4f8b: SendGrid\u3092\u4ecb\u3057\u3066\u30e1\u30fc\u30eb\u901a\u77e5\u3092\u9001\u4fe1\uff09\u3002  </li> <li>\u30aa\u30d7\u30b7\u30e7\u30f3: \u30bf\u30b9\u30af/\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\u3059\u308bGraphQL Query\u3092\u8ffd\u52a0\u3057\u3001MongoDB\u306b\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3002  </li> <li>\u4f8b: \u30bf\u30b9\u30af\u5b8c\u4e86\u306e\u305f\u3081\u306e\u30e1\u30fc\u30eb\u901a\u77e5\u3092\u8ffd\u52a0\u3002  </li> </ul>"},{"location":"languages/ja/phase6/#_1","title":"\u30dd\u30fc\u30c8\u30d5\u30a9\u30ea\u30aa\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":"<ul> <li>Git: \u6a5f\u80fd\u3054\u3068\u306ecommit\uff08\u4f8b: <code>feature/crud</code>, <code>feature/upload</code>\uff09\u3001\u660e\u78ba\u306a\u30d6\u30e9\u30f3\u30c1\u3002  </li> <li>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3: \u8aac\u660e\u3001\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3001endpoints\u3001\u30c7\u30d7\u30ed\u30a4\u3001\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3092\u542b\u3080README\u3002  </li> <li>\u516c\u958b: GitHub\u306b\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30e9\u30a4\u30bb\u30f3\u30b9\uff08\u4f8b: MIT\uff09\u3067\u30db\u30b9\u30c8\u3002  </li> </ul>"},{"location":"languages/ja/phase6/#_2","title":"\u30ea\u30bd\u30fc\u30b9","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/ko/phase1/","title":"1\ub2e8\uacc4 \u2013 \uae30\ucd08 \ubc0f \ud544\uc218 Java (2~3\uac1c\uc6d4)","text":""},{"location":"languages/ko/phase1/#_1","title":"\ud504\ub85c\uadf8\ub798\ubc0d \ub85c\uc9c1\uacfc \uc54c\uace0\ub9ac\uc998","text":"<ul> <li>\ubb38\uc81c \ubd84\ud574</li> <li>\uc5f0\uc2b5 \ubb38\uc81c: \ud3c9\uade0, \ud640\uc218/\uc9dd\uc218, \uc815\ub82c</li> </ul>"},{"location":"languages/ko/phase1/#_2","title":"\ud658\uacbd \uc124\uc815","text":"<ul> <li>JDK \uc124\uce58</li> <li>IDE (IntelliJ \ub610\ub294 Eclipse)</li> <li>Basic debugging</li> </ul>"},{"location":"languages/ko/phase1/#java","title":"\uae30\ubcf8 Java \uad6c\ubb38","text":"<ul> <li>\ud504\ub85c\uadf8\ub7a8 \uad6c\uc870 (class, main)</li> <li>\uba85\uba85 \uaddc\uce59</li> <li>\uc8fc\uc11d</li> </ul>"},{"location":"languages/ko/phase1/#_3","title":"\ub370\uc774\ud130 \ud0c0\uc785\uacfc \ubcc0\uc218","text":"<ul> <li>Primitive \ubc0f Non-primitive \ud0c0\uc785</li> <li>\uc120\uc5b8, \ucd08\uae30\ud654, \uc0c1\uc218</li> <li>Casting \ubc0f \ube44\uad50 (<code>==</code> vs <code>.equals()</code>)</li> </ul>"},{"location":"languages/ko/phase1/#_4","title":"\uc785\ub825\uacfc \ucd9c\ub825","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/ko/phase1/#_5","title":"\uc81c\uc5b4 \uad6c\uc870","text":"<ul> <li>if, else if, else, switch</li> <li>\ub17c\ub9ac \ubc0f \uad00\uacc4 \uc5f0\uc0b0\uc790</li> </ul>"},{"location":"languages/ko/phase1/#_6","title":"\ub8e8\ud504","text":"<ul> <li>for, while, do-while</li> <li>break, continue, \uc911\ucca9 \ub8e8\ud504</li> </ul>"},{"location":"languages/ko/phase1/#_7","title":"\uba54\uc11c\ub4dc\uc640 \uc2a4\ucf54\ud504","text":"<ul> <li>\uc120\uc5b8, \ud30c\ub77c\ubbf8\ud130, return</li> <li>Overloading</li> <li>\ub85c\uceec \ubcc0\uc218\uc640 \ud074\ub798\uc2a4 \uc18d\uc131</li> </ul>"},{"location":"languages/ko/phase1/#arrays","title":"Arrays","text":"<ul> <li>\uc120\uc5b8, \ucd08\uae30\ud654, \uc870\uc791</li> <li>\uc120\ud615 \uac80\uc0c9 \ubc0f \uc218\ub3d9 \uc815\ub82c</li> <li>Arrays.toString()\uc744 \uc0ac\uc6a9\ud55c debugging</li> </ul>"},{"location":"languages/ko/phase1/#strings-stringbuilder","title":"Strings\uc640 StringBuilder","text":"<ul> <li>\uc77c\ubc18\uc801\uc778 \uba54\uc11c\ub4dc</li> <li>Immutability\uc640 \uc131\ub2a5</li> </ul>"},{"location":"languages/ko/phase1/#exceptions","title":"Exceptions","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw\uc640 throws</li> <li>\ucee4\uc2a4\ud140 \uc608\uc678 \uc0dd\uc131 (\uc608: throw new MyException)</li> </ul>"},{"location":"languages/ko/phase1/#_8","title":"\ud544\uc218 \ub3c4\uad6c","text":"<ul> <li>Terminal: cd, ls, mkdir</li> <li>Git: init, add, commit, push, pull, branch, merge</li> <li>GitHub: \ub9ac\ud3ec\uc9c0\ud1a0\ub9ac \uc0dd\uc131, pull requests, \ud074\ub860</li> </ul>"},{"location":"languages/ko/phase1/#_9","title":"\ucd5c\uc885 \ud504\ub85c\uc81d\ud2b8","text":"<ul> <li>\uac04\ub2e8\ud55c \uacc4\uc0b0\uae30 \ubc0f \ud0dc\uc2a4\ud06c \ub9e4\ub2c8\uc800</li> <li>\uc694\uad6c \uc0ac\ud56d:</li> <li>Git \uc0ac\uc6a9</li> <li>GitHub\uc5d0 \uacf5\uac1c</li> <li>\uc124\uba85\uc774 \ud3ec\ud568\ub41c README</li> </ul>"},{"location":"languages/ko/phase1/#_10","title":"\ub9ac\uc18c\uc2a4","text":"<ul> <li>MOOC from the University of Helsinki</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/ko/phase2/","title":"2\ub2e8\uacc4 \u2013 \uac1d\uccb4 \uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d (2~3\uac1c\uc6d4)","text":""},{"location":"languages/ko/phase2/#classes-objects-attributes-methods","title":"Classes, Objects, Attributes, Methods","text":"<ul> <li>\ud074\ub798\uc2a4 \uad6c\uc870</li> <li>\uac1d\uccb4 \uc778\uc2a4\ud134\uc2a4\ud654</li> <li>this \uc0ac\uc6a9</li> <li>\ubaa8\ubc94 \uc0ac\ub840: \uba85\uba85, \ucf54\ub4dc \uc815\ub9ac</li> </ul>"},{"location":"languages/ko/phase2/#encapsulation-inheritance-polymorphism-abstraction","title":"Encapsulation, Inheritance, Polymorphism, Abstraction","text":"<ul> <li>Encapsulation: private, getters/setters, \uac80\uc99d</li> <li>Inheritance: extends, overriding (@Override)</li> <li>Polymorphism: \uc11c\ube0c\ud0c0\uc785, method overloading</li> <li>Abstraction: \uac1c\uc694, \uc778\ud130\ud398\uc774\uc2a4 \ubc0f \ucd94\uc0c1 \ud074\ub798\uc2a4 \uc900\ube44</li> </ul>"},{"location":"languages/ko/phase2/#interfaces-abstract-classes","title":"Interfaces\uc640 Abstract Classes","text":"<ul> <li>Interfaces: implements, default methods</li> <li>Abstract classes: \ucd94\uc0c1 \uba54\uc11c\ub4dc\uc640 \uad6c\uccb4\uc801 \uba54\uc11c\ub4dc</li> <li>\uc778\ud130\ud398\uc774\uc2a4\uc640 \ucd94\uc0c1 \ud074\ub798\uc2a4\uc758 \ucc28\uc774\uc810</li> </ul>"},{"location":"languages/ko/phase2/#constructors-initializers-static-blocks","title":"Constructors, Initializers, Static Blocks","text":"<ul> <li>\uae30\ubcf8 \ubc0f \ud30c\ub77c\ubbf8\ud130\ud654\ub41c \uc0dd\uc131\uc790, this() \ud638\ucd9c</li> <li>\ucd08\uae30\ud654 \ube14\ub85d ({}) \ubc0f static \ube14\ub85d (static {})</li> </ul>"},{"location":"languages/ko/phase2/#enumerations","title":"Enumerations","text":"<ul> <li>enum \uc0dd\uc131 \ubc0f \uc0ac\uc6a9</li> <li>enum \ub0b4\uc758 \uba54\uc11c\ub4dc\uc640 \uc18d\uc131</li> </ul>"},{"location":"languages/ko/phase2/#collections","title":"\uae30\ubcf8 Collections","text":"<ul> <li>ArrayList: \ucd94\uac00, \uc81c\uac70, \ubc18\ubcf5 (for, forEach, Iterator)</li> <li>HashMap: key-value, \uc77c\ubc18\uc801\uc778 \uc791\uc5c5</li> <li>HashSet: \uc911\ubcf5 \uc81c\uac70</li> <li>Queue \ubc0f Stack \uc18c\uac1c (\uc608: LinkedList\ub97c queue/stack\uc73c\ub85c \uc0ac\uc6a9)</li> <li>Java Collections Framework \uc18c\uac1c</li> </ul>"},{"location":"languages/ko/phase2/#_1","title":"\uae30\ubcf8 \uc54c\uace0\ub9ac\uc998","text":"<ul> <li>\uc120\ud615 \uac80\uc0c9 \ubc0f \uc774\uc9c4 \uac80\uc0c9</li> <li>Sorting: Bubble Sort, Collections.sort()</li> <li>Recursion: \uac1c\ub150 \ubc0f \uac04\ub2e8\ud55c \uc608\uc81c (\uc608: \ud329\ud1a0\ub9ac\uc5bc, \ud53c\ubcf4\ub098\uce58)</li> <li>\ubcf5\uc7a1\ub3c4 \uc18c\uac1c (O(n), O(log n))</li> </ul>"},{"location":"languages/ko/phase2/#generics","title":"Generics","text":"<ul> <li>\uad6c\ubb38 (), \uc81c\ub124\ub9ad \uceec\ub809\uc158, \uc81c\ub124\ub9ad \uba54\uc11c\ub4dc <li>Bounds (extends, super)</li>"},{"location":"languages/ko/phase2/#stream-api","title":"Stream API (\uc18c\uac1c)","text":"<ul> <li>\uae30\ubcf8 \uc791\uc5c5: filter, map, collect</li> <li>ArrayList\ub97c \uc0ac\uc6a9\ud55c \uc608\uc81c</li> </ul>"},{"location":"languages/ko/phase2/#unit-testing","title":"Unit Testing (\uc18c\uac1c)","text":"<ul> <li>JUnit\uc758 \uae30\ubcf8 \uc0ac\uc6a9</li> <li>\ud074\ub798\uc2a4 \ubc0f \uba54\uc11c\ub4dc\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uc791\uc131</li> <li>TDD (Test-Driven Development) \uc18c\uac1c</li> </ul>"},{"location":"languages/ko/phase2/#_2","title":"\ucd5c\uc885 \ud504\ub85c\uc81d\ud2b8","text":"<ul> <li>\ub3c4\uc11c\uad00 \uc2dc\uc2a4\ud15c</li> <li>\ud074\ub798\uc2a4: Book, User, Library</li> <li>\uc0c1\uc18d: DigitalBook \ubc0f PhysicalBook</li> <li>\uceec\ub809\uc158: \ucc45\uc744 \uc704\ud55c ArrayList, \ub300\ucd9c\uc744 \uc704\ud55c HashMap</li> <li>Encapsulation: \ub370\uc774\ud130 \uac80\uc99d</li> <li>Git: \uae30\ub2a5\ubcc4 commit (\uc608: <code>feature/book-management</code>)</li> <li>\uc124\uba85\uc774 \ud3ec\ud568\ub41c README\uc640 \ud568\uaed8 GitHub\uc5d0 \uacf5\uac1c</li> </ul>"},{"location":"languages/ko/phase2/#_3","title":"\uc5c5\ub370\uc774\ud2b8\ub41c \ub9ac\uc18c\uc2a4","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java (\ucc45)</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/ko/phase3/","title":"3\ub2e8\uacc4 \u2013 \ub370\uc774\ud130 \uc9c0\uc18d\uc131\uacfc Streams (2~3\uac1c\uc6d4)","text":""},{"location":"languages/ko/phase3/#sql","title":"\uae30\ubcf8 SQL","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Keys: Primary Key\uc640 Foreign Key.  </li> <li>\uc815\uaddc\ud654: 1NF, 2NF, 3NF.  </li> <li>\uc608\uc81c: \uc81c\ud488 \ubc0f \uce74\ud14c\uace0\ub9ac \ud14c\uc774\ube14 \uc0dd\uc131.  </li> </ul>"},{"location":"languages/ko/phase3/#jdbc-connection-pool","title":"JDBC\uc640 Connection Pool","text":"<ul> <li>Classes: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>Connection Pool (HikariCP) \uc0ac\uc6a9.  </li> <li>\ubaa8\ubc94 \uc0ac\ub840: <code>try-with-resources</code>, <code>SQLException</code> \ucc98\ub9ac.  </li> </ul>"},{"location":"languages/ko/phase3/#hibernate-jpa","title":"Hibernate + JPA \uc2e4\uc2b5","text":"<ul> <li>Annotations: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>\uc124\uc815: <code>persistence.xml</code> \ub610\ub294 <code>application.properties</code>.  </li> <li><code>EntityManager</code>\ub97c \uc0ac\uc6a9\ud55c CRUD \uc791\uc5c5.  </li> <li>Flyway \ub610\ub294 Liquibase\ub97c \uc0ac\uc6a9\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc18c\uac1c.</li> </ul>"},{"location":"languages/ko/phase3/#nosql","title":"NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc18c\uac1c","text":"<ul> <li>\uac1c\ub150: \ubb38\uc11c, \uceec\ub809\uc158, \uc218\ud3c9\uc801 \ud655\uc7a5\uc131.  </li> <li>MongoDB: \uc124\uc815, MongoRepository\ub97c \uc0ac\uc6a9\ud55c CRUD \uc791\uc5c5.  </li> <li>Spring Data MongoDB: Spring Boot\uc640\uc758 \ud1b5\ud569.  </li> <li>\uc608\uc81c: MongoDB\uc5d0 \uc81c\ud488\uc758 \uc2dc\uc2a4\ud15c \ud65c\ub3d9 \ub85c\uadf8 \uc800\uc7a5.  </li> </ul>"},{"location":"languages/ko/phase3/#streams-lambda-expressions","title":"Streams\uc640 Lambda Expressions","text":"<ul> <li>\uc791\uc5c5: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>\uc608\uc81c: \uac00\uaca9\uc73c\ub85c \uc81c\ud488 \ud544\ud130\ub9c1, \uc774\ub984\uc73c\ub85c \uc815\ub82c.  </li> </ul>"},{"location":"languages/ko/phase3/#optional-functional-interfaces","title":"Optional\uacfc Functional Interfaces","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>Functional Interfaces: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>\uc608\uc81c: Streams\uc5d0\uc11c \ub370\uc774\ud130\ub97c \ud544\ud130\ub9c1\ud558\uae30 \uc704\ud574 <code>Predicate</code> \uc0ac\uc6a9.  </li> </ul>"},{"location":"languages/ko/phase3/#collections","title":"\uace0\uae09 Collections","text":"<ul> <li>LinkedList: \ud6a8\uc728\uc801\uc778 \uc0bd\uc785/\uc0ad\uc81c.  </li> <li>TreeMap: \uc815\ub82c\ub41c key-value \uc30d.  </li> <li>PriorityQueue: \uc6b0\uc120\uc21c\uc704 \ud050.  </li> <li>LinkedHashMap \ubc0f Deque (\uc18c\uac1c).  </li> </ul>"},{"location":"languages/ko/phase3/#slf4jlogback","title":"\ub85c\uae45 (SLF4J/Logback)","text":"<ul> <li>SLF4J\uc640 Logback \uc124\uc815.  </li> <li>\ub808\ubca8: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>\uc608\uc81c: Hibernate \ucffc\ub9ac \ub85c\uae45.  </li> </ul>"},{"location":"languages/ko/phase3/#acid","title":"\ud2b8\ub79c\uc7ad\uc158 \uac1c\ub150 (ACID)","text":"<ul> <li>\uc6d0\uc790\uc131, \uc77c\uad00\uc131, \uaca9\ub9ac\uc131, \uc9c0\uc18d\uc131.  </li> <li>JDBC (<code>commit</code>, <code>rollback</code>) \ubc0f Hibernate (<code>@Transactional</code>)\ub97c \uc0ac\uc6a9\ud55c \ud2b8\ub79c\uc7ad\uc158.  </li> </ul>"},{"location":"languages/ko/phase3/#_1","title":"\uc778\ub371\uc2a4\uc640 \uc2e4\ud589 \uacc4\ud68d","text":"<ul> <li>Indexes: Primary, Unique, Composite.  </li> <li>\ucffc\ub9ac \ucd5c\uc801\ud654\ub97c \uc704\ud55c EXPLAIN \uc0ac\uc6a9.  </li> <li>\uc608\uc81c: \uc790\uc8fc \uac80\uc0c9\ub418\ub294 \uceec\ub7fc\uc5d0 \uc778\ub371\uc2a4 \uc0dd\uc131.  </li> </ul>"},{"location":"languages/ko/phase3/#_2","title":"\ud30c\uc77c \uc870\uc791 (\uc120\ud0dd \uc0ac\ud56d)","text":"<ul> <li><code>Files</code>, <code>BufferedReader</code>\ub97c \uc0ac\uc6a9\ud55c \uc77d\uae30 \ubc0f \uc4f0\uae30.  </li> <li>\uc608\uc81c: Streams\ub97c \uc0ac\uc6a9\ud558\uc5ec CSV\ub85c \uc81c\ud488 \ubcf4\uace0\uc11c \ub0b4\ubcf4\ub0b4\uae30.  </li> </ul>"},{"location":"languages/ko/phase3/#_3","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc2a4\ud2b8 (\uc18c\uac1c)","text":"<ul> <li>H2 \ubc0f JUnit\ub97c \uc0ac\uc6a9\ud55c \ud1b5\ud569 \ud14c\uc2a4\ud2b8.  </li> <li>\uc608\uc81c: Hibernate\ub97c \uc0ac\uc6a9\ud55c CRUD \uc791\uc5c5 \ud14c\uc2a4\ud2b8.  </li> </ul>"},{"location":"languages/ko/phase3/#_4","title":"\ucd5c\uc885 \ud504\ub85c\uc81d\ud2b8","text":"<p>\uc81c\ud488 \uad00\ub9ac \uc2dc\uc2a4\ud15c - \ub370\uc774\ud130\ubca0\uc774\uc2a4: Product \ubc0f Category \ud14c\uc774\ube14 (1:N \uad00\uacc4). - Java: JPA (<code>Product</code>, <code>Category</code>)\ub97c \uc0ac\uc6a9\ud55c \ud074\ub798\uc2a4, Hibernate\ub85c CRUD. - \uc120\ud0dd \uc0ac\ud56d: MongoDB\uc5d0 \uc81c\ud488 \ubcc0\uacbd \ub85c\uadf8 \uc800\uc7a5. - \uc120\ud0dd \uc0ac\ud56d: MongoDB\uc5d0 \ub3d9\uc801 \uc81c\ud488 \uc18d\uc131 (\uc608: \uae30\uc220 \uc0ac\uc591) \uc800\uc7a5. - Streams: \uc81c\ud488 \ud544\ud130\ub9c1/\uc815\ub82c (\uc608: \uac00\uaca9 \ub610\ub294 \uce74\ud14c\uace0\ub9ac \uae30\uc900). - \ub85c\uae45: \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5 \ubaa8\ub2c8\ud130\ub9c1. - Git: \uae30\ub2a5\ubcc4 commit (\uc608: <code>feature/crud</code>, <code>feature/streams</code>). - \uc124\uba85\uc774 \ud3ec\ud568\ub41c README\uc640 \ud568\uaed8 GitHub\uc5d0 \uacf5\uac1c.  </p>"},{"location":"languages/ko/phase3/#_5","title":"\ub9ac\uc18c\uc2a4","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/ko/phase4/","title":"4\ub2e8\uacc4 \u2013 \ud504\ub808\uc784\uc6cc\ud06c\uc640 \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 (3~4\uac1c\uc6d4)","text":""},{"location":"languages/ko/phase4/#spring-boot-spring-core-spring-data-jpa","title":"Spring Boot, Spring Core, Spring Data JPA","text":"<ul> <li>Spring Core: Dependency Injection (<code>@Bean</code>, <code>@Autowired</code>), IoC Container.  </li> <li>Spring Boot: Auto-Configuration, Starters (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>), <code>application.yml</code>.  </li> <li>Spring Data JPA: Repositories (<code>CrudRepository</code>, <code>JpaRepository</code>), <code>@Query</code>\ub97c \uc0ac\uc6a9\ud55c \ucffc\ub9ac, \ud398\uc774\uc9c0\ub124\uc774\uc158.  </li> <li>\uc608\uc81c: \ud0dc\uc2a4\ud06c \uc571\uc5d0\uc11c \ud0dc\uc2a4\ud06c\ub97c \uad00\ub9ac\ud558\uae30 \uc704\ud55c REST endpoints \uc0dd\uc131 (CRUD).  </li> </ul>"},{"location":"languages/ko/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>\uac1c\ub150: Authentication, Authorization, Security Filters.  </li> <li>JWT: \ud1a0\ud070 \uc0dd\uc131 \ubc0f \uac80\uc99d, <code>JwtAuthenticationFilter</code> \uc0ac\uc6a9.  </li> <li>OAuth2: Resource Server \uc124\uc815, \uacf5\uae09\uc790(\uc608: Google)\uc640 \ud1b5\ud569.  </li> <li>\uc608\uc81c: JWT\uc640 \ub864(<code>ADMIN</code>, <code>USER</code>)\ub85c \ud0dc\uc2a4\ud06c endpoints \ubcf4\ud638.  </li> </ul>"},{"location":"languages/ko/phase4/#_1","title":"\uc720\ub2db \ubc0f \ud1b5\ud569 \ud14c\uc2a4\ud2b8","text":"<ul> <li>Unit Tests: JUnit 5, Mockito (<code>@Mock</code>, <code>@InjectMocks</code>), \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1 \ud14c\uc2a4\ud2b8.  </li> <li>Integration Tests: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, \ud14c\uc2a4\ud2b8\uc6a9 H2 \ub370\uc774\ud130\ubca0\uc774\uc2a4.  </li> <li>Testcontainers: Docker \ucee8\ud14c\uc774\ub108\uc5d0\uc11c PostgreSQL\ub85c \ud14c\uc2a4\ud2b8.  </li> <li>\uc608\uc81c: \ud0dc\uc2a4\ud06c \uc571\uc758 \uc11c\ube44\uc2a4\uc640 endpoints \ud14c\uc2a4\ud2b8.  </li> </ul>"},{"location":"languages/ko/phase4/#restful-apis-swagger","title":"RESTful APIs\uc640 Swagger\ub97c \uc0ac\uc6a9\ud55c \ubb38\uc11c\ud654","text":"<ul> <li>REST: HTTP \uba54\uc11c\ub4dc, \uc0c1\ud0dc \ucf54\ub4dc, RESTful \uc6d0\uce59.  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>.  </li> <li>Swagger: springdoc-openapi \uc124\uc815, <code>@Operation</code>\uc73c\ub85c \uc8fc\uc11d \ucd94\uac00.  </li> <li>\uc608\uc81c: Swagger UI\ub85c \ud0dc\uc2a4\ud06c \uc571 endpoints \ubb38\uc11c\ud654.  </li> </ul>"},{"location":"languages/ko/phase4/#graphql","title":"GraphQL \uc18c\uac1c","text":"<ul> <li>\uac1c\ub150: Queries, Mutations, Schema.  </li> <li>Spring Boot with GraphQL: spring-boot-starter-graphql\ub85c \uc124\uc815.  </li> <li>\uc608\uc81c: \uc0c1\ud0dc\ubcc4 \ud0dc\uc2a4\ud06c\ub97c \ub098\uc5f4\ud558\ub294 GraphQL Query \uc0dd\uc131.  </li> </ul>"},{"location":"languages/ko/phase4/#_2","title":"\uae30\ubcf8 \ud504\ub860\ud2b8\uc5d4\ub4dc \ud1b5\ud569","text":"<ul> <li>Thymeleaf: Spring Boot\ub85c HTML \ud398\uc774\uc9c0\ub97c \ub80c\ub354\ub9c1\ud558\ub294 \ud15c\ud50c\ub9bf.  </li> <li>\uc608\uc81c: \ud0dc\uc2a4\ud06c\ub97c \ubcf4\uace0 \uc0dd\uc131\ud558\ub294 \uac04\ub2e8\ud55c \uc6f9 \uc778\ud130\ud398\uc774\uc2a4 \uc0dd\uc131.  </li> </ul>"},{"location":"languages/ko/phase4/#maven-gradle","title":"\ube4c\ub4dc \ub3c4\uad6c: Maven\uacfc Gradle","text":"<ul> <li>Maven: <code>pom.xml</code> \uad6c\uc870, \uc758\uc874\uc131, \ud50c\ub7ec\uadf8\uc778.  </li> <li>Gradle: <code>build.gradle</code> \ud30c\uc77c, \ud0dc\uc2a4\ud06c, \uc758\uc874\uc131 \uad00\ub9ac.  </li> <li>\uc608\uc81c: Maven\uacfc Gradle\ub85c \ud0dc\uc2a4\ud06c \uc571 \uc124\uc815.  </li> </ul>"},{"location":"languages/ko/phase4/#_3","title":"\ud504\ub85c\uc81d\ud2b8 \ubc30\ud3ec","text":"<ul> <li>\ud50c\ub7ab\ud3fc: Railway, Heroku, AWS (Elastic Beanstalk).  </li> <li>\ub2e8\uacc4: JAR\ub85c \ud328\ud0a4\uc9d5, GitHub Actions\ub85c CI/CD \uc124\uc815.  </li> <li>\uc608\uc81c: PostgreSQL\uc744 \uc0ac\uc6a9\ud558\uc5ec Railway\uc5d0 \ud0dc\uc2a4\ud06c \uc571 \ubc30\ud3ec.  </li> </ul>"},{"location":"languages/ko/phase4/#_4","title":"\ucd5c\uc885 \ud504\ub85c\uc81d\ud2b8","text":"<p>\ud0dc\uc2a4\ud06c \uad00\ub9ac \uc2dc\uc2a4\ud15c - \ub370\uc774\ud130\ubca0\uc774\uc2a4: <code>Task</code> (\uc81c\ubaa9, \uc124\uba85, \uc0c1\ud0dc) \ubc0f <code>User</code> \ud14c\uc774\ube14 (1:N \uad00\uacc4). - Java: Spring Boot, Spring Data JPA\ub97c \uc0ac\uc6a9\ud55c REST API\ub85c CRUD. - \ubcf4\uc548: JWT Authentication, \ub864(<code>ADMIN</code>, <code>USER</code>). - \ud14c\uc2a4\ud2b8: \uc720\ub2db \ud14c\uc2a4\ud2b8(\uc11c\ube44\uc2a4) \ubc0f \ud1b5\ud569 \ud14c\uc2a4\ud2b8(Testcontainers\ub97c \uc0ac\uc6a9\ud55c endpoints). - \ubb38\uc11c\ud654: endpoints \uc124\uba85\uc774 \ud3ec\ud568\ub41c Swagger UI. - \uc120\ud0dd \uc0ac\ud56d: \ud0dc\uc2a4\ud06c \ub098\uc5f4\uc744 \uc704\ud55c GraphQL Query\uc640 \uc0c1\ud638\uc791\uc6a9\uc744 \uc704\ud55c Thymeleaf \uc778\ud130\ud398\uc774\uc2a4 \ucd94\uac00. - Git: \uae30\ub2a5\ubcc4 commit (\uc608: <code>feature/rest-api</code>, <code>feature/security</code>). - \uacf5\uac1c: GitHub\uc5d0 README(\uc124\uc815, endpoints, \ubc30\ud3ec)\uc640 \ud568\uaed8 \uacf5\uac1c.  </p>"},{"location":"languages/ko/phase4/#_5","title":"\ub9ac\uc18c\uc2a4","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/ko/phase5/","title":"5\ub2e8\uacc4 \u2013 \uc544\ud0a4\ud14d\ucc98\uc640 \ub3d9\uc2dc\uc131 (2~3\uac1c\uc6d4)","text":""},{"location":"languages/ko/phase5/#clean-code-solid","title":"Clean Code\uc640 SOLID \uc6d0\uce59","text":"<ul> <li>Clean Code: \uba85\ud655\ud55c \uba85\uba85, \uc9e7\uc740 \ud568\uc218, \uc720\uc6a9\ud55c \uc8fc\uc11d, \uc77c\uad00\ub41c \ud3ec\ub9f7\ud305.  </li> <li>SOLID:  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>\uc608\uc81c: \ud0dc\uc2a4\ud06c \ub9e4\ub2c8\uc800\uc758 \uc11c\ube44\uc2a4\ub97c SOLID \uc6d0\uce59\uc5d0 \ub530\ub77c \ub9ac\ud329\ud1a0\ub9c1.  </p>"},{"location":"languages/ko/phase5/#design-patterns","title":"Design Patterns","text":"<ul> <li>\ud328\ud134: Factory (\uc0dd\uc131), Singleton (\ub2e8\uc77c \uc778\uc2a4\ud134\uc2a4), Builder (\uac1d\uccb4 \uad6c\uc131), Strategy (\ud589\ub3d9), Observer (\uc774\ubca4\ud2b8).  </li> <li>\uc801\uc6a9: \ud504\ub85c\uc81d\ud2b8 \ucee8\ud14d\uc2a4\ud2b8\uc5d0 \uc801\ud569\ud55c \ud328\ud134 \uc120\ud0dd.  </li> </ul> <p>\uc608\uc81c: \ub2e4\uc591\ud55c \ud0dc\uc2a4\ud06c \uc6b0\uc120\uc21c\uc704 \uc54c\uace0\ub9ac\uc998\uc5d0 Strategy \uc0ac\uc6a9.  </p>"},{"location":"languages/ko/phase5/#threads","title":"Threads\uc640 \ub3d9\uc2dc\uc131","text":"<ul> <li>\uac1c\ub150: Thread, Runnable, ExecutorService, ForkJoinPool.  </li> <li>\uae30\uc220: \uc2a4\ub808\ub4dc \ud480 \uc0dd\uc131 \ubc0f \uad00\ub9ac, \ube44\ub3d9\uae30 \ud0dc\uc2a4\ud06c.  </li> </ul> <p>\uc608\uc81c: ExecutorService\ub85c \ud0dc\uc2a4\ud06c \ubcf4\uace0\uc11c\ub97c \ubcd1\ub82c \ucc98\ub9ac.  </p>"},{"location":"languages/ko/phase5/#_1","title":"\ub3d9\uae30\ud654\uc640 \ub3d9\uc2dc\uc131 \ubb38\uc81c","text":"<ul> <li>\uba54\ucee4\ub2c8\uc998: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>.  </li> <li>\ubb38\uc81c: Deadlock, Race Condition, Starvation.  </li> </ul> <p>\uc608\uc81c: \uacf5\uc720 \ud0dc\uc2a4\ud06c \ub9ac\uc2a4\ud2b8\uc5d0 \uc548\uc804\ud55c \uc811\uadfc \uad6c\ud604.  </p>"},{"location":"languages/ko/phase5/#_2","title":"\ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uc18c\uac1c","text":"<ul> <li>\uac1c\ub150: \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uc544\ud0a4\ud14d\ucc98, REST \ud1b5\uc2e0, \uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac.  </li> <li>\ub3c4\uad6c: Spring Cloud (\uc608: Eureka for service discovery).  </li> </ul> <p>\uc608\uc81c: \ud0dc\uc2a4\ud06c \ub9e4\ub2c8\uc800\ub97c \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4(\ud0dc\uc2a4\ud06c\uc640 \uc0ac\uc6a9\uc790)\ub85c \ubd84\ud560.  </p>"},{"location":"languages/ko/phase5/#_3","title":"\uba54\uc2dc\uc9c0 \ud050 \uae30\ucd08 (\uc120\ud0dd \uc0ac\ud56d)","text":"<ul> <li>\uac1c\ub150: Publisher/Subscriber, \ud050, \ud1a0\ud53d.  </li> <li>RabbitMQ: \uc124\uc815, \uba54\uc2dc\uc9c0 \uc1a1\uc218\uc2e0.  </li> </ul> <p>\uc608\uc81c: RabbitMQ\ub97c \ud1b5\ud574 \uc0ac\uc6a9\uc790\uc5d0\uac8c \ud0dc\uc2a4\ud06c \uc5c5\ub370\uc774\ud2b8 \uc54c\ub9bc.  </p>"},{"location":"languages/ko/phase5/#_4","title":"\uc131\ub2a5 \ucd5c\uc801\ud654","text":"<ul> <li>Caching: \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc811\uadfc\uc744 \uc904\uc774\uae30 \uc704\ud574 Redis\ub97c \uc0ac\uc6a9\ud55c Spring Cache.  </li> <li>JVM Tuning: \uae30\ubcf8 \uac1c\ub150 (Heap, Garbage Collection).  </li> </ul> <p>\uc608\uc81c: \ud0dc\uc2a4\ud06c \uc2dc\uc2a4\ud15c\uc758 \ube48\ubc88\ud55c \ucffc\ub9ac\uc5d0 \uce90\uc2dc \uad6c\ud604.  </p>"},{"location":"languages/ko/phase5/#devops-docker-cicd","title":"DevOps/\ud074\ub77c\uc6b0\ub4dc \uc18c\uac1c: Docker\uc640 CI/CD","text":"<ul> <li>Docker: \ucee8\ud14c\uc774\ub108, \uc774\ubbf8\uc9c0, Dockerfile, Docker Compose.  </li> <li>CI/CD: GitHub Actions\ub85c \ube4c\ub4dc \ubc0f \ubc30\ud3ec \ud30c\uc774\ud504\ub77c\uc778 \uc124\uc815.  </li> </ul> <p>\uc608\uc81c: \ud0dc\uc2a4\ud06c \uc571\uc758 Dockerfile \uc0dd\uc131 \ubc0f GitHub Actions\ub85c \ubc30\ud3ec.  </p>"},{"location":"languages/ko/phase5/#_5","title":"\uad00\ucc30 \uac00\ub2a5\uc131","text":"<ul> <li>\ub3c4\uad6c: Prometheus (\uba54\ud2b8\ub9ad), Grafana (\uc2dc\uac01\ud654), ELK Stack (\ub85c\uadf8).  </li> <li>\uac1c\ub150: \uc131\ub2a5 \ubaa8\ub2c8\ud130\ub9c1, \uc911\uc559\ud654\ub41c \ub85c\uadf8, \uc54c\ub9bc.  </li> </ul> <p>\uc608\uc81c: Prometheus\uc640 Grafana\ub85c \ud0dc\uc2a4\ud06c\uc758 API \uc751\ub2f5 \uc2dc\uac04 \ubaa8\ub2c8\ud130\ub9c1.  </p>"},{"location":"languages/ko/phase5/#owasp-top-ten","title":"\ubcf4\uc548: OWASP Top Ten","text":"<ul> <li>\uac1c\ub150: Injection, \uc778\uc99d \uc2e4\ud328, \ubbfc\uac10 \ub370\uc774\ud130 \ub178\ucd9c.  </li> <li>\uc2e4\uc2b5: \uc785\ub825 \uac80\uc99d, \uc815\ud654, \uc548\uc804\ud55c \uc124\uc815.  </li> </ul> <p>\uc608\uc81c: \ud0dc\uc2a4\ud06c API\ub97c SQL Injection\uacfc XSS\ub85c\ubd80\ud130 \ubcf4\ud638.  </p>"},{"location":"languages/ko/phase5/#_6","title":"\ucd5c\uc885 \ud504\ub85c\uc81d\ud2b8","text":"<p>\uace0\uae09 \ud0dc\uc2a4\ud06c \uad00\ub9ac \uc2dc\uc2a4\ud15c - \ubc31\uc5d4\ub4dc: 4\ub2e8\uacc4 \ud0dc\uc2a4\ud06c API\ub97c \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4(\ud0dc\uc2a4\ud06c\uc640 \uc0ac\uc6a9\uc790)\ub85c \uac15\ud654. - \uc544\ud0a4\ud14d\ucc98: Clean Code, SOLID, Design Patterns(\uc608: Strategy)\ub85c \ub9ac\ud329\ud1a0\ub9c1. - \ub3d9\uc2dc\uc131: ExecutorService\ub85c \ubcf4\uace0\uc11c\ub97c \ubcd1\ub82c \ucc98\ub9ac. - \uc120\ud0dd \uc0ac\ud56d: RabbitMQ\ub97c \ud1b5\ud55c \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uac04 \ud1b5\uc2e0 \ubc0f \ube48\ubc88\ud55c \ucffc\ub9ac\ub97c \uc704\ud55c Redis \uce90\uc2f1 \ucd94\uac00. - DevOps: Docker\ub85c \ud328\ud0a4\uc9d5, GitHub Actions\ub85c CI/CD \uc124\uc815. - \uad00\ucc30 \uac00\ub2a5\uc131: \uba54\ud2b8\ub9ad\uc744 \uc704\ud574 Prometheus\uc640 Grafana \ucd94\uac00. - \ubcf4\uc548: OWASP Top Ten\uc5d0 \ub300\ud55c \ubcf4\ud638 \uad6c\ud604. - Git: \uae30\ub2a5\ubcc4 commit (\uc608: <code>feature/microservices</code>, <code>feature/concurrency</code>). - \uacf5\uac1c: GitHub\uc5d0 \uc790\uc138\ud55c README(\uc124\uc815, \uc544\ud0a4\ud14d\ucc98, \ubc30\ud3ec)\uc640 \ud568\uaed8 \uacf5\uac1c.  </p>"},{"location":"languages/ko/phase5/#_7","title":"\ub9ac\uc18c\uc2a4","text":"<ul> <li>The Pragmatic Programmer (\ucc45)  </li> <li>Effective Java (\ucc45)  </li> <li>Java Concurrency in Practice (\ucc45)  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/ko/phase6/","title":"6\ub2e8\uacc4 \u2013 \ucd5c\uc885 \ud504\ub85c\uc81d\ud2b8 (\uc9c4\ud589 \uc911)","text":""},{"location":"languages/ko/phase6/#1-crud","title":"\ud504\ub85c\uc81d\ud2b8 1: \uc778\uc99d\uc744 \ud3ec\ud568\ud55c \uc644\uc804\ud55c CRUD","text":"<ul> <li>\ubaa9\ud45c: \uc548\uc804\ud55c \uc778\uc99d\uacfc \ud14c\uc2a4\ud2b8\ub97c \ud3ec\ud568\ud55c \uacac\uace0\ud55c RESTful API \uad6c\ucd95.  </li> <li>\uae30\uc220: Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers.  </li> <li>\uae30\ub2a5: \uc5d4\ud2f0\ud2f0(\uc608: \ud0dc\uc2a4\ud06c, \uc0ac\uc6a9\uc790)\uc5d0 \ub300\ud55c CRUD, \ub864(ADMIN, USER)\uc744 \uc0ac\uc6a9\ud55c \uc778\uc99d, Swagger\ub85c \ubb38\uc11c\ud654.  </li> <li>\uc120\ud0dd \uc0ac\ud56d: \ud0dc\uc2a4\ud06c \ubcf4\uae30/\uad00\ub9ac\ub97c \uc704\ud55c Thymeleaf \uc778\ud130\ud398\uc774\uc2a4 \ucd94\uac00.  </li> <li>\uc608\uc81c: \ud504\ub85c\uc81d\ud2b8 \uad00\ub9ac API (\uc5d4\ud2f0\ud2f0: <code>Project</code>, <code>Task</code>, <code>User</code>)\ub97c \ubcf4\ud638\ub41c endpoints\ub85c \uad6c\ucd95.  </li> </ul>"},{"location":"languages/ko/phase6/#2","title":"\ud504\ub85c\uc81d\ud2b8 2: \ud30c\uc77c \uc5c5\ub85c\ub4dc","text":"<ul> <li>\ubaa9\ud45c: \ud504\ub85c\uc81d\ud2b8 1\uc758 API\uc5d0 \ud30c\uc77c \uc5c5\ub85c\ub4dc \uae30\ub2a5 \ucd94\uac00.  </li> <li>\uae30\uc220: Spring Boot (<code>MultipartFile</code>), Amazon S3 \ub610\ub294 \ub85c\uceec \uc2a4\ud1a0\ub9ac\uc9c0, \ud30c\uc77c \uac80\uc99d.  </li> <li>\uae30\ub2a5: \ud0dc\uc2a4\ud06c\uc640 \uad00\ub828\ub41c \uc774\ubbf8\uc9c0/\ubb38\uc11c \uc5c5\ub85c\ub4dc, \ud0c0\uc785/\ud06c\uae30 \uac80\uc99d.  </li> <li>\uc608\uc81c: API\uc5d0\uc11c \ud0dc\uc2a4\ud06c\ub97c \uc704\ud55c \ucca8\ubd80 \ud30c\uc77c(\uc608: PDF, PNG) \uc5c5\ub85c\ub4dc \ud5c8\uc6a9.  </li> </ul>"},{"location":"languages/ko/phase6/#3","title":"\ud504\ub85c\uc81d\ud2b8 3: \ud074\ub77c\uc6b0\ub4dc \ubc30\ud3ec","text":"<ul> <li>\ubaa9\ud45c: CI/CD\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud074\ub77c\uc6b0\ub4dc \ud50c\ub7ab\ud3fc\uc5d0 API \ubc30\ud3ec.  </li> <li>\uae30\uc220: Railway, Heroku, \ub610\ub294 AWS (Elastic Beanstalk), GitHub Actions, Docker.  </li> <li>\uae30\ub2a5: JAR/Docker\ub85c \ud328\ud0a4\uc9d5, \ud658\uacbd \ubcc0\uc218 \uc124\uc815, \ubc30\ud3ec \uc790\ub3d9\ud654.  </li> <li>\uc120\ud0dd \uc0ac\ud56d: \ube48\ubc88\ud55c \ucffc\ub9ac \ucd5c\uc801\ud654\ub97c \uc704\ud574 Redis\ub85c \uce90\uc2f1 \uad6c\ud604.  </li> <li>\uc608\uc81c: PostgreSQL\uacfc CI/CD\ub97c \uc0ac\uc6a9\ud558\uc5ec Railway\uc5d0 \ud504\ub85c\uc81d\ud2b8 API \ubc30\ud3ec.  </li> </ul>"},{"location":"languages/ko/phase6/#4","title":"\ud504\ub85c\uc81d\ud2b8 4: \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4","text":"<ul> <li>\ubaa9\ud45c: \ud504\ub85c\uc81d\ud2b8 1\uc758 API\ub97c \uc624\ucf00\uc2a4\ud2b8\ub808\uc774\uc158\ub41c \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4\ub85c \ubd84\ud560.  </li> <li>\uae30\uc220: Spring Cloud (Eureka, Gateway), Docker Compose, REST \ud1b5\uc2e0.  </li> <li>\uae30\ub2a5: <code>Tasks</code>\uc640 <code>Users</code>\ub97c \uc704\ud55c \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4, \uc11c\ube44\uc2a4 \ub514\uc2a4\ucee4\ubc84\ub9ac \ud3ec\ud568.  </li> <li>\uc120\ud0dd \uc0ac\ud56d: \ub9c8\uc774\ud06c\ub85c\uc11c\ube44\uc2a4 \uac04 \ube44\ub3d9\uae30 \ud1b5\uc2e0\uc744 \uc704\ud574 RabbitMQ \uc0ac\uc6a9.  </li> <li>\uc608\uc81c: \ud0dc\uc2a4\ud06c\uc640 \uc0ac\uc6a9\uc790 \ub85c\uc9c1\uc744 \ub450 \uac1c\uc758 \uc11c\ube44\uc2a4\ub85c \ubd84\ub9ac\ud558\uace0 Docker\ub85c \uc624\ucf00\uc2a4\ud2b8\ub808\uc774\uc158.  </li> </ul>"},{"location":"languages/ko/phase6/#5-api","title":"\ud504\ub85c\uc81d\ud2b8 5: \uc678\ubd80 API \ud1b5\ud569","text":"<ul> <li>\ubaa9\ud45c: \uc678\ubd80 API\ub97c \uc18c\ube44\ud558\uc5ec \uae30\ub2a5 \uac15\ud654.  </li> <li>\uae30\uc220: Spring RestTemplate \ub610\ub294 WebClient, API \uc778\uc99d(\uc608: OAuth2).  </li> <li>\uae30\ub2a5: \uacf5\uac1c API\uc640 \ud1b5\ud569(\uc608: SendGrid\ub97c \ud1b5\ud574 \uc774\uba54\uc77c \uc54c\ub9bc \uc804\uc1a1).  </li> <li>\uc120\ud0dd \uc0ac\ud56d: \ud0dc\uc2a4\ud06c/\uc0ac\uc6a9\uc790\ub97c \uac80\uc0c9\ud558\ub294 GraphQL Query \ucd94\uac00 \ubc0f MongoDB\uc5d0 \uba54\ud0c0\ub370\uc774\ud130 \uc800\uc7a5.  </li> <li>\uc608\uc81c: \ud0dc\uc2a4\ud06c \uc644\ub8cc\ub97c \uc704\ud55c \uc774\uba54\uc77c \uc54c\ub9bc \ucd94\uac00.  </li> </ul>"},{"location":"languages/ko/phase6/#_1","title":"\ud3ec\ud2b8\ud3f4\ub9ac\uc624 \ubaa8\ubc94 \uc0ac\ub840","text":"<ul> <li>Git: \uae30\ub2a5\ubcc4 commit (\uc608: <code>feature/crud</code>, <code>feature/upload</code>), \uba85\ud655\ud55c \ube0c\ub79c\uce58.  </li> <li>\ubb38\uc11c\ud654: \uc124\uba85, \uc124\uc815, endpoints, \ubc30\ud3ec, \uc2a4\ud06c\ub9b0\uc0f7\uc774 \ud3ec\ud568\ub41c README.  </li> <li>\uacf5\uac1c: GitHub\uc5d0 \uc624\ud508\uc18c\uc2a4 \ub77c\uc774\uc120\uc2a4(\uc608: MIT)\ub85c \ud638\uc2a4\ud305.  </li> </ul>"},{"location":"languages/ko/phase6/#_2","title":"\ub9ac\uc18c\uc2a4","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/pt-br/phase1/","title":"Fase 1 \u2013 Fundamentos e Java Essencial (2\u20133 meses)","text":""},{"location":"languages/pt-br/phase1/#logica-de-programacao-e-algoritmos","title":"L\u00f3gica de Programa\u00e7\u00e3o e Algoritmos","text":"<ul> <li>Decomposi\u00e7\u00e3o de problemas</li> <li>Exerc\u00edcios: m\u00e9dia, par/impar, ordena\u00e7\u00e3o</li> </ul>"},{"location":"languages/pt-br/phase1/#configuracao-do-ambiente","title":"Configura\u00e7\u00e3o do Ambiente","text":"<ul> <li>Instala\u00e7\u00e3o do JDK</li> <li>IDE (IntelliJ ou Eclipse)</li> <li>Debugging b\u00e1sico</li> </ul>"},{"location":"languages/pt-br/phase1/#sintaxe-basica-do-java","title":"Sintaxe B\u00e1sica do Java","text":"<ul> <li>Estrutura de um programa (classe, main)</li> <li>Conven\u00e7\u00f5es de nomenclatura</li> <li>Coment\u00e1rios</li> </ul>"},{"location":"languages/pt-br/phase1/#tipos-de-dados-e-variaveis","title":"Tipos de Dados e Vari\u00e1veis","text":"<ul> <li>Primitivos e n\u00e3o primitivos</li> <li>Declara\u00e7\u00e3o, inicializa\u00e7\u00e3o, constantes</li> <li>Casting e compara\u00e7\u00e3o (<code>==</code> vs <code>.equals()</code>)</li> </ul>"},{"location":"languages/pt-br/phase1/#entrada-e-saida","title":"Entrada e Sa\u00edda","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/pt-br/phase1/#estruturas-de-controle","title":"Estruturas de Controle","text":"<ul> <li>if, else if, else, switch</li> <li>Operadores l\u00f3gicos e relacionais</li> </ul>"},{"location":"languages/pt-br/phase1/#lacos-de-repeticao","title":"La\u00e7os de Repeti\u00e7\u00e3o","text":"<ul> <li>for, while, do-while</li> <li>break, continue, la\u00e7os aninhados</li> </ul>"},{"location":"languages/pt-br/phase1/#metodos-e-escopo","title":"M\u00e9todos e Escopo","text":"<ul> <li>Declara\u00e7\u00e3o, par\u00e2metros, return</li> <li>Sobrecarga</li> <li>Vari\u00e1veis locais e atributos de classe</li> </ul>"},{"location":"languages/pt-br/phase1/#arrays","title":"Arrays","text":"<ul> <li>Declara\u00e7\u00e3o, inicializa\u00e7\u00e3o e manipula\u00e7\u00e3o</li> <li>Busca linear e ordena\u00e7\u00e3o manual</li> <li>Arrays.toString() para depura\u00e7\u00e3o</li> </ul>"},{"location":"languages/pt-br/phase1/#strings-e-stringbuilder","title":"Strings e StringBuilder","text":"<ul> <li>M\u00e9todos comuns</li> <li>Imutabilidade e performance</li> </ul>"},{"location":"languages/pt-br/phase1/#excecoes","title":"Exce\u00e7\u00f5es","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw e throws</li> <li>Cria\u00e7\u00e3o de exce\u00e7\u00f5es personalizadas (ex.: throw new MinhaExcecao)</li> </ul>"},{"location":"languages/pt-br/phase1/#ferramentas-essenciais","title":"Ferramentas Essenciais","text":"<ul> <li>Terminal: cd, ls, mkdir</li> <li>Git: init, add, commit, push, pull, branch, merge</li> <li>GitHub: criar reposit\u00f3rios, pull requests, clonar</li> </ul>"},{"location":"languages/pt-br/phase1/#projetos-finais","title":"Projetos Finais","text":"<ul> <li>Calculadora simples e um Gerenciador de tarefas</li> <li>Requisitos:</li> <li>Usar Git</li> <li>Publicar no GitHub</li> <li>README explicativo</li> </ul>"},{"location":"languages/pt-br/phase1/#recursos","title":"Recursos","text":"<ul> <li>MOOC da Universidade de Helsinque</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/pt-br/phase2/","title":"Fase 2 \u2013 Programa\u00e7\u00e3o Orientada a Objetos (2\u20133 meses)","text":""},{"location":"languages/pt-br/phase2/#classes-objetos-atributos-e-metodos","title":"Classes, Objetos, Atributos e M\u00e9todos","text":"<ul> <li>Estrutura de classes</li> <li>Instanciamento de objetos</li> <li>Uso de this</li> <li>Boas pr\u00e1ticas: nomenclatura, organiza\u00e7\u00e3o de c\u00f3digo</li> </ul>"},{"location":"languages/pt-br/phase2/#encapsulamento-heranca-polimorfismo-e-abstracao","title":"Encapsulamento, Heran\u00e7a, Polimorfismo e Abstra\u00e7\u00e3o","text":"<ul> <li>Encapsulamento: private, getters/setters, valida\u00e7\u00e3o</li> <li>Heran\u00e7a: extends, sobrescrita (@Override)</li> <li>Polimorfismo: Subtipo, sobrecarga de m\u00e9todos</li> <li>Abstra\u00e7\u00e3o: vis\u00e3o geral, prepara\u00e7\u00e3o para interfaces e classes abstratas</li> </ul>"},{"location":"languages/pt-br/phase2/#interfaces-e-classes-abstratas","title":"Interfaces e Classes Abstratas","text":"<ul> <li>Interfaces: implements, m\u00e9todos default</li> <li>Classes abstratas: m\u00e9todos abstratos e concretos</li> <li>Diferen\u00e7as entre interface e classe abstrata</li> </ul>"},{"location":"languages/pt-br/phase2/#construtores-inicializadores-e-blocos-estaticos","title":"Construtores, Inicializadores e Blocos Est\u00e1ticos","text":"<ul> <li>Construtores padr\u00e3o e parametrizados, chamadas com this()</li> <li>Blocos de inicializa\u00e7\u00e3o ({}) e est\u00e1ticos (static {})</li> </ul>"},{"location":"languages/pt-br/phase2/#enumeracoes","title":"Enumera\u00e7\u00f5es","text":"<ul> <li>Cria\u00e7\u00e3o e uso de enum</li> <li>M\u00e9todos e atributos em enums</li> </ul>"},{"location":"languages/pt-br/phase2/#colecoes-basicas","title":"Cole\u00e7\u00f5es B\u00e1sicas","text":"<ul> <li>ArrayList: adi\u00e7\u00e3o, remo\u00e7\u00e3o, itera\u00e7\u00e3o (for, forEach, Iterator)</li> <li>HashMap: chave-valor, opera\u00e7\u00f5es comuns</li> <li>HashSet: elimina\u00e7\u00e3o de duplicatas</li> <li>Introdu\u00e7\u00e3o a Queue e Stack (ex.: LinkedList como fila/pilha)</li> <li>Introdu\u00e7\u00e3o ao Java Collections Framework</li> </ul>"},{"location":"languages/pt-br/phase2/#algoritmos-basicos","title":"Algoritmos B\u00e1sicos","text":"<ul> <li>Busca linear e bin\u00e1ria</li> <li>Ordena\u00e7\u00e3o: Bubble Sort, Collections.sort()</li> <li>Recurs\u00e3o: conceitos e exemplos simples (ex.: fatorial, Fibonacci)</li> <li>Introdu\u00e7\u00e3o \u00e0 complexidade (O(n), O(log n))</li> </ul>"},{"location":"languages/pt-br/phase2/#generics","title":"Generics","text":"<ul> <li>Sintaxe (), cole\u00e7\u00f5es gen\u00e9ricas, m\u00e9todos gen\u00e9ricos <li>Limites (extends, super)</li>"},{"location":"languages/pt-br/phase2/#stream-api-introducao","title":"Stream API (Introdu\u00e7\u00e3o)","text":"<ul> <li>Opera\u00e7\u00f5es b\u00e1sicas: filter, map, collect</li> <li>Exemplos com ArrayList</li> </ul>"},{"location":"languages/pt-br/phase2/#testes-unitarios-introducao","title":"Testes Unit\u00e1rios (Introdu\u00e7\u00e3o)","text":"<ul> <li>Uso b\u00e1sico do JUnit</li> <li>Escrever casos de teste para classes e m\u00e9todos</li> <li>Introdu\u00e7\u00e3o a TDD (Test-Driven Development)</li> </ul>"},{"location":"languages/pt-br/phase2/#projeto-final","title":"Projeto Final","text":"<ul> <li>Sistema de Biblioteca</li> <li>Classes: Livro, Usuario, Biblioteca</li> <li>Heran\u00e7a: LivroDigital e LivroFisico</li> <li>Cole\u00e7\u00f5es: ArrayList para livros, HashMap para empr\u00e9stimos</li> <li>Encapsulamento: valida\u00e7\u00e3o de dados</li> <li>Git: commit por funcionalidade (ex.: <code>feature/book-management</code>)</li> <li>Publicar no GitHub com README explicativo</li> </ul>"},{"location":"languages/pt-br/phase2/#recursos-atualizados","title":"Recursos Atualizados","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java (Livro)</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/pt-br/phase3/","title":"Fase 3 \u2013 Persist\u00eancia de Dados e Streams (2\u20133 meses)","text":""},{"location":"languages/pt-br/phase3/#sql-basico","title":"SQL B\u00e1sico","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Chaves: prim\u00e1rias e estrangeiras.  </li> <li>Normaliza\u00e7\u00e3o: 1NF, 2NF, 3NF.  </li> <li>Exemplo: criar tabelas para produtos e categorias.  </li> </ul>"},{"location":"languages/pt-br/phase3/#jdbc-e-connection-pool","title":"JDBC e Connection Pool","text":"<ul> <li>Classes: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>Uso de Connection Pool (HikariCP).  </li> <li>Boas pr\u00e1ticas: <code>try-with-resources</code>, tratamento de <code>SQLException</code>.  </li> </ul>"},{"location":"languages/pt-br/phase3/#hibernate-jpa-na-pratica","title":"Hibernate + JPA na Pr\u00e1tica","text":"<ul> <li>Anota\u00e7\u00f5es: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>Configura\u00e7\u00e3o: <code>persistence.xml</code> ou <code>application.properties</code>.  </li> <li>Opera\u00e7\u00f5es CRUD com <code>EntityManager</code>.  </li> <li>Introdu\u00e7\u00e3o a migra\u00e7\u00f5es de banco com Flyway ou Liquibase</li> </ul>"},{"location":"languages/pt-br/phase3/#introducao-a-bancos-nosql","title":"Introdu\u00e7\u00e3o a Bancos NoSQL","text":"<ul> <li>Conceitos: documentos, cole\u00e7\u00f5es, escalabilidade horizontal.</li> <li>MongoDB: configura\u00e7\u00e3o, opera\u00e7\u00f5es CRUD com MongoRepository.</li> <li>Spring Data MongoDB: integra\u00e7\u00e3o com Spring Boot.</li> <li>Exemplo: armazenar logs de atividades do sistema de produtos em MongoDB.</li> </ul>"},{"location":"languages/pt-br/phase3/#streams-e-lambda-expressions","title":"Streams e Lambda Expressions","text":"<ul> <li>Opera\u00e7\u00f5es: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>Exemplo: filtrar produtos por pre\u00e7o, ordenar por nome.  </li> </ul>"},{"location":"languages/pt-br/phase3/#optional-e-functional-interfaces","title":"Optional e Functional Interfaces","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>Interfaces funcionais: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>Exemplo: usar <code>Predicate</code> em Streams para filtrar dados.  </li> </ul>"},{"location":"languages/pt-br/phase3/#collections-avancadas","title":"Collections Avan\u00e7adas","text":"<ul> <li>LinkedList: inser\u00e7\u00e3o/remo\u00e7\u00e3o eficiente.  </li> <li>TreeMap: chave-valor ordenado.  </li> <li>PriorityQueue: fila de prioridade.  </li> <li>LinkedHashMap e Deque (introdu\u00e7\u00e3o).  </li> </ul>"},{"location":"languages/pt-br/phase3/#logging-slf4jlogback","title":"Logging (SLF4J/Logback)","text":"<ul> <li>Configura\u00e7\u00e3o de SLF4J com Logback.  </li> <li>N\u00edveis: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>Exemplo: log de queries do Hibernate.  </li> </ul>"},{"location":"languages/pt-br/phase3/#conceitos-de-transacoes-acid","title":"Conceitos de Transa\u00e7\u00f5es (ACID)","text":"<ul> <li>Atomicidade, Consist\u00eancia, Isolamento, Durabilidade.  </li> <li>Transa\u00e7\u00f5es com JDBC (<code>commit</code>, <code>rollback</code>) e Hibernate (<code>@Transactional</code>).  </li> </ul>"},{"location":"languages/pt-br/phase3/#indices-e-planos-de-execucao","title":"\u00cdndices e Planos de Execu\u00e7\u00e3o","text":"<ul> <li>\u00cdndices: prim\u00e1rios, \u00fanicos, compostos.  </li> <li>Uso de EXPLAIN para otimizar queries.  </li> <li>Exemplo: criar \u00edndice em coluna de busca frequente.  </li> </ul>"},{"location":"languages/pt-br/phase3/#manipulacao-de-arquivos-opcional","title":"Manipula\u00e7\u00e3o de Arquivos (Opcional)","text":"<ul> <li>Leitura e escrita com <code>Files</code>, <code>BufferedReader</code>.  </li> <li>Exemplo: exportar relat\u00f3rio de produtos para CSV usando Streams.  </li> </ul>"},{"location":"languages/pt-br/phase3/#testes-com-banco-de-dados-introducao","title":"Testes com Banco de Dados (Introdu\u00e7\u00e3o)","text":"<ul> <li>Testes de integra\u00e7\u00e3o com H2 e JUnit.  </li> <li>Exemplo: testar opera\u00e7\u00e3o CRUD com Hibernate.  </li> </ul>"},{"location":"languages/pt-br/phase3/#projeto-final","title":"Projeto Final","text":"<p>Sistema de Gerenciamento de Produtos - Banco: tabelas Produto e Categoria (relacionamento 1:N). - Java: classes com JPA (<code>Produto</code>, <code>Categoria</code>), CRUD com Hibernate.  - Opcional: armazenar logs de altera\u00e7\u00f5es de produtos em MongoDB.  - Opcional: armazenar atributos din\u00e2micos de produtos (ex.: especifica\u00e7\u00f5es t\u00e9cnicas) em MongoDB. - Streams: filtrar/ordenar produtos (ex.: por pre\u00e7o ou categoria). - Logging: monitorar opera\u00e7\u00f5es no banco. - Git: commit por funcionalidade (ex.: <code>feature/crud</code>, <code>feature/streams</code>). - Publicar no GitHub com README explicativo.  </p>"},{"location":"languages/pt-br/phase3/#recursos","title":"Recursos","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging com SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/pt-br/phase4/","title":"Fase 4 \u2013 Frameworks e Aplica\u00e7\u00f5es Web (3\u20134 meses)","text":""},{"location":"languages/pt-br/phase4/#spring-boot-spring-core-e-spring-data-jpa","title":"Spring Boot, Spring Core e Spring Data JPA","text":"<ul> <li>Spring Core: Inje\u00e7\u00e3o de depend\u00eancia (<code>@Bean</code>, <code>@Autowired</code>), cont\u00eainer IoC.  </li> <li>Spring Boot: Autoconfigura\u00e7\u00e3o, starters (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>), <code>application.yml</code>.  </li> <li>Spring Data JPA: Reposit\u00f3rios (<code>CrudRepository</code>, <code>JpaRepository</code>), consultas com <code>@Query</code>, pagina\u00e7\u00e3o.  </li> <li>Exemplo: Criar endpoints REST para gerenciar tarefas (CRUD) em um app de tarefas.  </li> </ul>"},{"location":"languages/pt-br/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>Conceitos: autentica\u00e7\u00e3o, autoriza\u00e7\u00e3o, filtros de seguran\u00e7a.  </li> <li>JWT: criar e validar tokens, usar <code>JwtAuthenticationFilter</code>.  </li> <li>OAuth2: configurar Resource Server, integrar com provedor (ex.: Google).  </li> <li>Exemplo: proteger endpoints de tarefas com JWT e pap\u00e9is (<code>ADMIN</code>, <code>USER</code>).  </li> </ul>"},{"location":"languages/pt-br/phase4/#testes-unitarios-e-de-integracao","title":"Testes Unit\u00e1rios e de Integra\u00e7\u00e3o","text":"<ul> <li>Unit\u00e1rios: JUnit 5, Mockito (<code>@Mock</code>, <code>@InjectMocks</code>), testar l\u00f3gica de neg\u00f3cio.  </li> <li>Integra\u00e7\u00e3o: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, banco H2 para testes.  </li> <li>Testcontainers: testar com PostgreSQL em cont\u00eaineres Docker.  </li> <li>Exemplo: testar servi\u00e7os e endpoints do app de tarefas.  </li> </ul>"},{"location":"languages/pt-br/phase4/#apis-restful-e-documentacao-com-swagger","title":"APIs RESTful e Documenta\u00e7\u00e3o com Swagger","text":"<ul> <li>REST: m\u00e9todos HTTP, c\u00f3digos de status, princ\u00edpios RESTful.  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>.  </li> <li>Swagger: configurar springdoc-openapi, anotar com <code>@Operation</code>.  </li> <li>Exemplo: documentar endpoints do app de tarefas com Swagger UI.  </li> </ul>"},{"location":"languages/pt-br/phase4/#introducao-ao-graphql","title":"Introdu\u00e7\u00e3o ao GraphQL","text":"<ul> <li>Conceitos: queries, mutations, schema.</li> <li>Spring Boot com GraphQL: configura\u00e7\u00e3o com spring-boot-starter-graphql.</li> <li>Exemplo: criar uma query GraphQL para listar tarefas por status.</li> </ul>"},{"location":"languages/pt-br/phase4/#integracao-basica-com-frontend","title":"Integra\u00e7\u00e3o B\u00e1sica com Frontend","text":"<ul> <li>Thymeleaf: templates para renderizar p\u00e1ginas HTML com Spring Boot.</li> <li>Exemplo: criar uma interface web simples para visualizar e criar tarefas.</li> </ul>"},{"location":"languages/pt-br/phase4/#ferramentas-de-build-maven-e-gradle","title":"Ferramentas de Build: Maven e Gradle","text":"<ul> <li>Maven: estrutura do <code>pom.xml</code>, depend\u00eancias, plugins.  </li> <li>Gradle: arquivo <code>build.gradle</code>, tarefas, gerenciamento de depend\u00eancias.  </li> <li>Exemplo: configurar o app de tarefas com Maven e Gradle.  </li> </ul>"},{"location":"languages/pt-br/phase4/#deploy-de-projeto","title":"Deploy de Projeto","text":"<ul> <li>Plataformas: Railway, Heroku, AWS (Elastic Beanstalk).  </li> <li>Passos: empacotar como JAR, configurar CI/CD com GitHub Actions.  </li> <li>Exemplo: fazer deploy do app de tarefas no Railway com PostgreSQL.  </li> </ul>"},{"location":"languages/pt-br/phase4/#projeto-final","title":"Projeto Final","text":"<p>Sistema de Gerenciamento de Tarefas - Banco: tabelas <code>Task</code> (t\u00edtulo, descri\u00e7\u00e3o, status) e <code>User</code> (relacionamento 1:N). - Java: API REST com Spring Boot, Spring Data JPA para CRUD. - Seguran\u00e7a: autentica\u00e7\u00e3o JWT, pap\u00e9is (<code>ADMIN</code>, <code>USER</code>). - Testes: unit\u00e1rios (servi\u00e7os) e integra\u00e7\u00e3o (endpoints com Testcontainers). - Documenta\u00e7\u00e3o: Swagger UI com descri\u00e7\u00e3o de endpoints. - Opcional: adicionar uma query GraphQL para listar tarefas e uma interface Thymeleaf para intera\u00e7\u00e3o. - Git: commits por funcionalidade (ex.: <code>feature/rest-api</code>, <code>feature/security</code>). - Publicar: no GitHub com README (setup, endpoints, deploy).  </p>"},{"location":"languages/pt-br/phase4/#recursos","title":"Recursos","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official</li> <li>Spring Boot with Thymeleaf</li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/pt-br/phase5/","title":"Fase 5 \u2013 Arquitetura e Concorr\u00eancia (2\u20133 meses)","text":""},{"location":"languages/pt-br/phase5/#clean-code-e-principios-solid","title":"Clean Code e Princ\u00edpios SOLID","text":"<ul> <li>Clean Code: Nomenclatura clara, fun\u00e7\u00f5es curtas, coment\u00e1rios \u00fateis, formata\u00e7\u00e3o consistente.  </li> <li>SOLID:  </li> <li>SRP (Responsabilidade \u00danica)  </li> <li>OCP (Aberto/Fechado)  </li> <li>LSP (Substitui\u00e7\u00e3o de Liskov)  </li> <li>ISP (Segrega\u00e7\u00e3o de Interfaces)  </li> <li>DIP (Invers\u00e3o de Depend\u00eancia)  </li> </ul> <p>Exemplo: Refatorar um servi\u00e7o do Gerenciador de Tarefas para seguir SOLID.  </p>"},{"location":"languages/pt-br/phase5/#design-patterns","title":"Design Patterns","text":"<ul> <li>Padr\u00f5es: Factory (cria\u00e7\u00e3o), Singleton (inst\u00e2ncia \u00fanica), Builder (constru\u00e7\u00e3o de objetos), Strategy (comportamento), Observer (eventos).  </li> <li>Aplica\u00e7\u00e3o: Escolher padr\u00f5es adequados ao contexto do projeto.  </li> </ul> <p>Exemplo: Usar Strategy para diferentes algoritmos de prioriza\u00e7\u00e3o de tarefas.  </p>"},{"location":"languages/pt-br/phase5/#threads-e-concorrencia","title":"Threads e Concorr\u00eancia","text":"<ul> <li>Conceitos: Thread, Runnable, ExecutorService, ForkJoinPool.  </li> <li>T\u00e9cnicas: Criar e gerenciar pools de threads, tarefas ass\u00edncronas.  </li> </ul> <p>Exemplo: Processar relat\u00f3rios de tarefas em paralelo com ExecutorService.  </p>"},{"location":"languages/pt-br/phase5/#sincronizacao-e-problemas-de-concorrencia","title":"Sincroniza\u00e7\u00e3o e Problemas de Concorr\u00eancia","text":"<ul> <li>Mecanismos: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>.  </li> <li>Problemas: Deadlock, race condition, starvation.  </li> </ul> <p>Exemplo: Implementar acesso seguro a uma lista de tarefas compartilhada.  </p>"},{"location":"languages/pt-br/phase5/#introducao-a-microsservicos","title":"Introdu\u00e7\u00e3o a Microsservi\u00e7os","text":"<ul> <li>Conceitos: Arquitetura de microsservi\u00e7os, comunica\u00e7\u00e3o via REST, descoberta de servi\u00e7os.  </li> <li>Ferramentas: Spring Cloud (ex.: Eureka para descoberta de servi\u00e7os).  </li> </ul> <p>Exemplo: Dividir o Gerenciador de Tarefas em microsservi\u00e7os (tarefas e usu\u00e1rios).  </p>"},{"location":"languages/pt-br/phase5/#fundamentos-de-filas-de-mensagens-opcional","title":"Fundamentos de Filas de Mensagens (Opcional)","text":"<ul> <li>Conceitos: publicador/subscriber, filas, t\u00f3picos.</li> <li> <p>RabbitMQ: configura\u00e7\u00e3o, envio e consumo de mensagens.</p> </li> <li> <p>Exemplo: notificar usu\u00e1rios sobre atualiza\u00e7\u00f5es de tarefas via RabbitMQ.</p> </li> </ul>"},{"location":"languages/pt-br/phase5/#otimizacao-de-performance","title":"Otimiza\u00e7\u00e3o de Performance","text":"<ul> <li>Caching: Spring Cache com Redis para reduzir acesso ao banco.</li> <li> <p>JVM Tuning: conceitos b\u00e1sicos (heap, garbage collection).</p> </li> <li> <p>Exemplo: implementar cache para consultas frequentes no sistema de tarefas.</p> </li> </ul>"},{"location":"languages/pt-br/phase5/#introducao-a-devopscloud-docker-e-cicd","title":"Introdu\u00e7\u00e3o a DevOps/Cloud: Docker e CI/CD","text":"<ul> <li>Docker: Containers, imagens, Dockerfile, Docker Compose.  </li> <li>CI/CD: Configurar pipelines com GitHub Actions para build e deploy.  </li> </ul> <p>Exemplo: Criar um Dockerfile para o app de tarefas e deploy via GitHub Actions.  </p>"},{"location":"languages/pt-br/phase5/#observabilidade","title":"Observabilidade","text":"<ul> <li>Ferramentas: Prometheus (m\u00e9tricas), Grafana (visualiza\u00e7\u00e3o), ELK Stack (logs).  </li> <li>Conceitos: Monitoramento de performance, logs centralizados, alertas.  </li> </ul> <p>Exemplo: Monitorar tempo de resposta da API de tarefas com Prometheus e Grafana.  </p>"},{"location":"languages/pt-br/phase5/#seguranca-owasp-top-ten","title":"Seguran\u00e7a: OWASP Top Ten","text":"<ul> <li>Conceitos: Inje\u00e7\u00e3o, falhas de autentica\u00e7\u00e3o, exposi\u00e7\u00e3o de dados sens\u00edveis.  </li> <li>Pr\u00e1ticas: Valida\u00e7\u00e3o de entrada, sanitiza\u00e7\u00e3o, configura\u00e7\u00e3o segura.  </li> </ul> <p>Exemplo: Proteger a API de tarefas contra inje\u00e7\u00e3o SQL e XSS.  </p>"},{"location":"languages/pt-br/phase5/#projeto-final","title":"Projeto Final","text":"<p>Sistema de Gerenciamento de Tarefas Avan\u00e7ado - Backend: Melhorar a API de tarefas (Fase 4) com microsservi\u00e7os (tarefas e usu\u00e1rios). - Arquitetura: Refatorar com Clean Code, SOLID e padr\u00f5es de design (ex.: Strategy). - Concorr\u00eancia: Processar relat\u00f3rios em paralelo com ExecutorService. - Opcional: adicionar comunica\u00e7\u00e3o entre microsservi\u00e7os via RabbitMQ e caching com Redis para consultas frequentes. - DevOps: Empacotar em Docker, configurar CI/CD com GitHub Actions. - Observabilidade: Adicionar Prometheus e Grafana para m\u00e9tricas. - Seguran\u00e7a: Implementar prote\u00e7\u00f5es contra OWASP Top Ten. - Git: Commits por funcionalidade (ex.: feature/microservices, feature/concurrency). - Publicar: No GitHub com README detalhado (setup, arquitetura, deploy).  </p>"},{"location":"languages/pt-br/phase5/#recursos","title":"Recursos","text":"<ul> <li>The Pragmatic Programmer (Livro)</li> <li>Effective Java (Livro)</li> <li>Java Concurrency in Practice (Livro) </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials</li> <li>Redis University</li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/pt-br/phase6/","title":"Fase 6 \u2013 Projetos Finais (Cont\u00ednuo)","text":""},{"location":"languages/pt-br/phase6/#projeto-1-crud-completo-com-autenticacao","title":"Projeto 1: CRUD Completo com Autentica\u00e7\u00e3o","text":"<ul> <li>Objetivo: Criar uma API RESTful robusta com autentica\u00e7\u00e3o segura e testes.  </li> <li>Tecnologias: Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers.  </li> <li>Funcionalidades: CRUD para entidades (ex.: tarefas, usu\u00e1rios), autentica\u00e7\u00e3o com pap\u00e9is (ADMIN, USER), documenta\u00e7\u00e3o com Swagger.  </li> <li>Opcional: adicionar uma interface Thymeleaf para visualizar/gerenciar tarefas.</li> <li>Exemplo: API para gerenciar projetos (entidades: <code>Project</code>, <code>Task</code>, <code>User</code>) com endpoints protegidos.  </li> </ul>"},{"location":"languages/pt-br/phase6/#projeto-2-upload-de-arquivos","title":"Projeto 2: Upload de Arquivos","text":"<ul> <li>Objetivo: Adicionar funcionalidade de upload de arquivos \u00e0 API do Projeto 1.  </li> <li>Tecnologias: Spring Boot (<code>MultipartFile</code>), Amazon S3 ou armazenamento local, valida\u00e7\u00e3o de arquivos.  </li> <li>Funcionalidades: Upload de imagens/documentos associados a tarefas, valida\u00e7\u00e3o de tipo/tamanho.  </li> <li>Exemplo: Permitir upload de anexos (ex.: PDF, PNG) para tarefas na API.  </li> </ul>"},{"location":"languages/pt-br/phase6/#projeto-3-deploy-em-nuvem","title":"Projeto 3: Deploy em Nuvem","text":"<ul> <li>Objetivo: Publicar a API em uma plataforma de nuvem com CI/CD.  </li> <li>Tecnologias: Railway, Heroku ou AWS (Elastic Beanstalk), GitHub Actions, Docker.  </li> <li>Funcionalidades: Empacotar como JAR/Docker, configurar vari\u00e1veis de ambiente, automatizar deploy. </li> <li>Opcional: implementar caching com Redis para otimizar consultas frequentes. </li> <li>Exemplo: Deploy da API de projetos no Railway com PostgreSQL e CI/CD.  </li> </ul>"},{"location":"languages/pt-br/phase6/#projeto-4-microsservicos","title":"Projeto 4: Microsservi\u00e7os","text":"<ul> <li>Objetivo: Dividir a API do Projeto 1 em microsservi\u00e7os orquestrados.  </li> <li>Tecnologias: Spring Cloud (Eureka, Gateway), Docker Compose, REST para comunica\u00e7\u00e3o.  </li> <li>Funcionalidades: Microsservi\u00e7os para <code>Tasks</code> e <code>Users</code>, com descoberta de servi\u00e7os.  </li> <li>Opcional: usar RabbitMQ para comunica\u00e7\u00e3o ass\u00edncrona entre microsservi\u00e7os.</li> <li>Exemplo: Separar a l\u00f3gica de tarefas e usu\u00e1rios em dois servi\u00e7os, orquestrados com Docker.  </li> </ul>"},{"location":"languages/pt-br/phase6/#projeto-5-integracao-com-api-externa","title":"Projeto 5: Integra\u00e7\u00e3o com API Externa","text":"<ul> <li>Objetivo: Consumir uma API externa para enriquecer a funcionalidade.  </li> <li>Tecnologias: Spring RestTemplate ou WebClient, autentica\u00e7\u00e3o de API (ex.: OAuth2).  </li> <li>Funcionalidades: Integrar com API p\u00fablica (ex.: enviar notifica\u00e7\u00f5es via e-mail com SendGrid). </li> <li>Opcional: adicionar uma query GraphQL para consultar tarefas/usu\u00e1rios e armazenar metadados em MongoDB. </li> <li>Exemplo: Adicionar envio de e-mails para notificar conclus\u00e3o de tarefas.  </li> </ul>"},{"location":"languages/pt-br/phase6/#boas-praticas-de-portfolio","title":"Boas Pr\u00e1ticas de Portf\u00f3lio","text":"<ul> <li>Git: Commits por funcionalidade (ex.: <code>feature/crud</code>, <code>feature/upload</code>), branches claras.  </li> <li>Documenta\u00e7\u00e3o: README com descri\u00e7\u00e3o, setup, endpoints, deploy e capturas de tela.  </li> <li>Publicar: Hospedar no GitHub com licen\u00e7a open-source (ex.: MIT).  </li> </ul>"},{"location":"languages/pt-br/phase6/#recursos","title":"Recursos","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/ru/phase1/","title":"\u0424\u0430\u0437\u0430 1 \u2013 \u041e\u0441\u043d\u043e\u0432\u044b \u0438 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 Java (2\u20133 \u043c\u0435\u0441\u044f\u0446\u0430)","text":""},{"location":"languages/ru/phase1/#_1","title":"\u041b\u043e\u0433\u0438\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b","text":"<ul> <li>\u0414\u0435\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u0447</li> <li>\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f: \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0447\u0435\u0442\u043d\u043e\u0435/\u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0435, \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430</li> </ul>"},{"location":"languages/ru/phase1/#_2","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f","text":"<ul> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 JDK</li> <li>IDE (IntelliJ \u0438\u043b\u0438 Eclipse)</li> <li>Basic debugging</li> </ul>"},{"location":"languages/ru/phase1/#java","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 Java","text":"<ul> <li>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b (class, main)</li> <li>\u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f</li> <li>\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438</li> </ul>"},{"location":"languages/ru/phase1/#_3","title":"\u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","text":"<ul> <li>Primitive \u0438 non-primitive \u0442\u0438\u043f\u044b</li> <li>\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435, \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f, \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b</li> <li>Casting \u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 (<code>==</code> vs <code>.equals()</code>)</li> </ul>"},{"location":"languages/ru/phase1/#_4","title":"\u0412\u0432\u043e\u0434 \u0438 \u0432\u044b\u0432\u043e\u0434","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/ru/phase1/#_5","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438","text":"<ul> <li>if, else if, else, switch</li> <li>\u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0438 \u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b</li> </ul>"},{"location":"languages/ru/phase1/#_6","title":"\u0426\u0438\u043a\u043b\u044b","text":"<ul> <li>for, while, do-while</li> <li>break, continue, \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0446\u0438\u043a\u043b\u044b</li> </ul>"},{"location":"languages/ru/phase1/#_7","title":"\u041c\u0435\u0442\u043e\u0434\u044b \u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u0438","text":"<ul> <li>\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, return</li> <li>Overloading</li> <li>\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043a\u043b\u0430\u0441\u0441\u0430</li> </ul>"},{"location":"languages/ru/phase1/#arrays","title":"Arrays","text":"<ul> <li>\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435, \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f, \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u044f\u0446\u0438\u044f</li> <li>\u041b\u0438\u043d\u0435\u0439\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0438 \u0440\u0443\u0447\u043d\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430</li> <li>Arrays.toString() \u0434\u043b\u044f debugging</li> </ul>"},{"location":"languages/ru/phase1/#strings-stringbuilder","title":"Strings \u0438 StringBuilder","text":"<ul> <li>\u041e\u0431\u0449\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b</li> <li>Immutability \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c</li> </ul>"},{"location":"languages/ru/phase1/#exceptions","title":"Exceptions","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw \u0438 throws</li> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, throw new MyException)</li> </ul>"},{"location":"languages/ru/phase1/#_8","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b","text":"<ul> <li>Terminal: cd, ls, mkdir</li> <li>Git: init, add, commit, push, pull, branch, merge</li> <li>GitHub: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432, pull requests, \u043a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435</li> </ul>"},{"location":"languages/ru/phase1/#_9","title":"\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b","text":"<ul> <li>\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440 \u0438 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0437\u0430\u0434\u0430\u0447</li> <li>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Git</li> <li>\u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043d\u0430 GitHub</li> <li>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 README</li> </ul>"},{"location":"languages/ru/phase1/#_10","title":"\u0420\u0435\u0441\u0443\u0440\u0441\u044b","text":"<ul> <li>MOOC from the University of Helsinki</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/ru/phase2/","title":"\u0424\u0430\u0437\u0430 2 \u2013 \u041e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (2\u20133 \u043c\u0435\u0441\u044f\u0446\u0430)","text":""},{"location":"languages/ru/phase2/#classes-objects-attributes-methods","title":"Classes, Objects, Attributes, Methods","text":"<ul> <li>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043a\u043b\u0430\u0441\u0441\u0430</li> <li>\u0418\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 this</li> <li>\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438: \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435, \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u0434\u0430</li> </ul>"},{"location":"languages/ru/phase2/#encapsulation-inheritance-polymorphism-abstraction","title":"Encapsulation, Inheritance, Polymorphism, Abstraction","text":"<ul> <li>Encapsulation: private, getters/setters, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f</li> <li>Inheritance: extends, overriding (@Override)</li> <li>Polymorphism: \u043f\u043e\u0434\u0442\u0438\u043f\u044b, method overloading</li> <li>Abstraction: \u043e\u0431\u0437\u043e\u0440, \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u043c \u0438 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u043c \u043a\u043b\u0430\u0441\u0441\u0430\u043c</li> </ul>"},{"location":"languages/ru/phase2/#interfaces-abstract-classes","title":"Interfaces \u0438 Abstract Classes","text":"<ul> <li>Interfaces: implements, default methods</li> <li>Abstract classes: \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0435 \u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b</li> <li>\u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u043c \u0438 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u043c</li> </ul>"},{"location":"languages/ru/phase2/#constructors-initializers-static-blocks","title":"Constructors, Initializers, Static Blocks","text":"<ul> <li>\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u044b \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u0432\u044b\u0437\u043e\u0432\u044b \u0447\u0435\u0440\u0435\u0437 this()</li> <li>\u0411\u043b\u043e\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 ({}) \u0438 static \u0431\u043b\u043e\u043a\u0438 (static {})</li> </ul>"},{"location":"languages/ru/phase2/#enumerations","title":"Enumerations","text":"<ul> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 enum</li> <li>\u041c\u0435\u0442\u043e\u0434\u044b \u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0432 enum</li> </ul>"},{"location":"languages/ru/phase2/#collections","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 Collections","text":"<ul> <li>ArrayList: \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435, \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f (for, forEach, Iterator)</li> <li>HashMap: key-value, \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438</li> <li>HashSet: \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432</li> <li>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Queue \u0438 Stack (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, LinkedList \u043a\u0430\u043a queue/stack)</li> <li>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Java Collections Framework</li> </ul>"},{"location":"languages/ru/phase2/#_1","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b","text":"<ul> <li>\u041b\u0438\u043d\u0435\u0439\u043d\u044b\u0439 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a</li> <li>Sorting: Bubble Sort, Collections.sort()</li> <li>Recursion: \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0430\u043b, \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438)</li> <li>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c (O(n), O(log n))</li> </ul>"},{"location":"languages/ru/phase2/#generics","title":"Generics","text":"<ul> <li>\u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 (), generic collections, generic methods <li>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f (extends, super)</li>"},{"location":"languages/ru/phase2/#stream-api","title":"Stream API (\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435)","text":"<ul> <li>\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: filter, map, collect</li> <li>\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0441 ArrayList</li> </ul>"},{"location":"languages/ru/phase2/#unit-testing","title":"Unit Testing (\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435)","text":"<ul> <li>\u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 JUnit</li> <li>\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432</li> <li>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 TDD (Test-Driven Development)</li> </ul>"},{"location":"languages/ru/phase2/#_2","title":"\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442","text":"<ul> <li>\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438</li> <li>\u041a\u043b\u0430\u0441\u0441\u044b: Book, User, Library</li> <li>\u041d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435: DigitalBook \u0438 PhysicalBook</li> <li>\u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438: ArrayList \u0434\u043b\u044f \u043a\u043d\u0438\u0433, HashMap \u0434\u043b\u044f \u0437\u0430\u0439\u043c\u043e\u0432</li> <li>Encapsulation: \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>Git: \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u043f\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>feature/book-management</code>)</li> <li>\u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043d\u0430 GitHub \u0441 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u043c README</li> </ul>"},{"location":"languages/ru/phase2/#_3","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java (\u041a\u043d\u0438\u0433\u0430)</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/ru/phase3/","title":"\u0424\u0430\u0437\u0430 3 \u2013 \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u043e\u0442\u043e\u043a\u0438 (2\u20133 \u043c\u0435\u0441\u044f\u0446\u0430)","text":""},{"location":"languages/ru/phase3/#sql","title":"\u041e\u0441\u043d\u043e\u0432\u044b SQL","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Keys: \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0435 \u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0438.  </li> <li>\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: 1NF, 2NF, 3NF.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446 \u0434\u043b\u044f \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439.  </li> </ul>"},{"location":"languages/ru/phase3/#jdbc","title":"JDBC \u0438 \u043f\u0443\u043b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439","text":"<ul> <li>\u041a\u043b\u0430\u0441\u0441\u044b: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0443\u043b\u0430 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 (HikariCP).  </li> <li>\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438: <code>try-with-resources</code>, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 <code>SQLException</code>.  </li> </ul>"},{"location":"languages/ru/phase3/#hibernate-jpa","title":"Hibernate + JPA \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435","text":"<ul> <li>\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f: <code>persistence.xml</code> \u0438\u043b\u0438 <code>application.properties</code>.  </li> <li>CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 <code>EntityManager</code>.  </li> <li>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 Flyway \u0438\u043b\u0438 Liquibase.</li> </ul>"},{"location":"languages/ru/phase3/#nosql","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 NoSQL \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":"<ul> <li>\u041a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438: \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b, \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438, \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c.  </li> <li>MongoDB: \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430, CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 MongoRepository.  </li> <li>Spring Data MongoDB: \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 Spring Boot.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u043e\u0432 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0432 MongoDB.</li> </ul>"},{"location":"languages/ru/phase3/#-","title":"\u041f\u043e\u0442\u043e\u043a\u0438 \u0438 \u043b\u044f\u043c\u0431\u0434\u0430-\u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f","text":"<ul> <li>\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u043f\u043e \u0446\u0435\u043d\u0435, \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e.  </li> </ul>"},{"location":"languages/ru/phase3/#optional","title":"Optional \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>Predicate</code> \u0432 Streams \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.  </li> </ul>"},{"location":"languages/ru/phase3/#_1","title":"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438","text":"<ul> <li>LinkedList: \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0430/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435.  </li> <li>TreeMap: \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u044b \u043a\u043b\u044e\u0447-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.  </li> <li>PriorityQueue: \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u043c.  </li> <li>LinkedHashMap \u0438 Deque (\u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435).  </li> </ul>"},{"location":"languages/ru/phase3/#slf4jlogback","title":"\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (SLF4J/Logback)","text":"<ul> <li>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f SLF4J \u0441 Logback.  </li> <li>\u0423\u0440\u043e\u0432\u043d\u0438: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 Hibernate.  </li> </ul>"},{"location":"languages/ru/phase3/#acid","title":"\u041a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 (ACID)","text":"<ul> <li>\u0410\u0442\u043e\u043c\u0430\u0440\u043d\u043e\u0441\u0442\u044c, \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c, \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c, \u0434\u043e\u043b\u0433\u043e\u0432\u0435\u0447\u043d\u043e\u0441\u0442\u044c.  </li> <li>\u0422\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0441 JDBC (<code>commit</code>, <code>rollback</code>) \u0438 Hibernate (<code>@Transactional</code>).  </li> </ul>"},{"location":"languages/ru/phase3/#_2","title":"\u0418\u043d\u0434\u0435\u043a\u0441\u044b \u0438 \u043f\u043b\u0430\u043d\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","text":"<ul> <li>\u0418\u043d\u0434\u0435\u043a\u0441\u044b: \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0435, \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435, \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u0435.  </li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 EXPLAIN \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u0434\u043b\u044f \u0447\u0430\u0441\u0442\u043e \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430.  </li> </ul>"},{"location":"languages/ru/phase3/#_3","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e)","text":"<ul> <li>\u0427\u0442\u0435\u043d\u0438\u0435 \u0438 \u0437\u0430\u043f\u0438\u0441\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>Files</code>, <code>BufferedReader</code>.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u044d\u043a\u0441\u043f\u043e\u0440\u0442 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\u0445 \u0432 CSV \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Streams.  </li> </ul>"},{"location":"languages/ru/phase3/#_4","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435)","text":"<ul> <li>\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b \u0441 H2 \u0438 JUnit.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 Hibernate.  </li> </ul>"},{"location":"languages/ru/phase3/#_5","title":"\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442","text":"<p>\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\u043c\u0438 - \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0442\u0430\u0431\u043b\u0438\u0446\u044b Product \u0438 Category (\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 1:N). - Java: \u043a\u043b\u0430\u0441\u0441\u044b \u0441 JPA (<code>Product</code>, <code>Category</code>), CRUD \u0441 Hibernate. - \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e: \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u043e\u0432 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0432 MongoDB. - \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e: \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a) \u0432 MongoDB. - Streams: \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f/\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e \u0446\u0435\u043d\u0435 \u0438\u043b\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438). - \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445. - Git: \u043a\u043e\u043c\u043c\u0438\u0442 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>feature/crud</code>, <code>feature/streams</code>). - \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043d\u0430 GitHub \u0441 \u043f\u043e\u044f\u0441\u043d\u044f\u044e\u0449\u0438\u043c README.  </p>"},{"location":"languages/ru/phase3/#_6","title":"\u0420\u0435\u0441\u0443\u0440\u0441\u044b","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/ru/phase4/","title":"\u0424\u0430\u0437\u0430 4 \u2013 \u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0438 \u0438 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (3\u20134 \u043c\u0435\u0441\u044f\u0446\u0430)","text":""},{"location":"languages/ru/phase4/#spring-boot-spring-core-spring-data-jpa","title":"Spring Boot, Spring Core \u0438 Spring Data JPA","text":"<ul> <li>Spring Core: \u0412\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 (<code>@Bean</code>, <code>@Autowired</code>), IoC-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440.  </li> <li>Spring Boot: \u0410\u0432\u0442\u043e\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f, \u0441\u0442\u0430\u0440\u0442\u0435\u0440\u044b (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>), <code>application.yml</code>.  </li> <li>Spring Data JPA: \u0420\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 (<code>CrudRepository</code>, <code>JpaRepository</code>), \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 <code>@Query</code>, \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 REST-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 (CRUD) \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447.  </li> </ul>"},{"location":"languages/ru/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>\u041a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438: \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f, \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438.  </li> <li>JWT: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>JwtAuthenticationFilter</code>.  </li> <li>OAuth2: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Resource Server, \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u043c (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Google).  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0417\u0430\u0449\u0438\u0442\u0430 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u0437\u0430\u0434\u0430\u0447 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e JWT \u0438 \u0440\u043e\u043b\u0435\u0439 (<code>ADMIN</code>, <code>USER</code>).  </li> </ul>"},{"location":"languages/ru/phase4/#-","title":"\u042e\u043d\u0438\u0442- \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<ul> <li>\u042e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b: JUnit 5, Mockito (<code>@Mock</code>, <code>@InjectMocks</code>), \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438.  </li> <li>\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 H2 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.  </li> <li>Testcontainers: \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 PostgreSQL \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\u0445 Docker.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447.  </li> </ul>"},{"location":"languages/ru/phase4/#restful-api-swagger","title":"RESTful API \u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0441 Swagger","text":"<ul> <li>REST: HTTP-\u043c\u0435\u0442\u043e\u0434\u044b, \u043a\u043e\u0434\u044b \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b RESTful.  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>.  </li> <li>Swagger: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 springdoc-openapi, \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0441 <code>@Operation</code>.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Swagger UI.  </li> </ul>"},{"location":"languages/ru/phase4/#graphql","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 GraphQL","text":"<ul> <li>\u041a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438: \u0417\u0430\u043f\u0440\u043e\u0441\u044b, \u043c\u0443\u0442\u0430\u0446\u0438\u0438, \u0441\u0445\u0435\u043c\u0430.  </li> <li>Spring Boot \u0441 GraphQL: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0441 spring-boot-starter-graphql.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GraphQL-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u0434\u0430\u0447 \u043f\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0443.  </li> </ul>"},{"location":"languages/ru/phase4/#_1","title":"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430","text":"<ul> <li>Thymeleaf: \u0428\u0430\u0431\u043b\u043e\u043d\u044b \u0434\u043b\u044f \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433\u0430 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 Spring Boot.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447.  </li> </ul>"},{"location":"languages/ru/phase4/#maven-gradle","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0441\u0431\u043e\u0440\u043a\u0438: Maven \u0438 Gradle","text":"<ul> <li>Maven: \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 <code>pom.xml</code>, \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u043f\u043b\u0430\u0433\u0438\u043d\u044b.  </li> <li>Gradle: \u0424\u0430\u0439\u043b <code>build.gradle</code>, \u0437\u0430\u0434\u0430\u0447\u0438, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0441 Maven \u0438 Gradle.  </li> </ul>"},{"location":"languages/ru/phase4/#_2","title":"\u0420\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<ul> <li>\u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b: Railway, Heroku, AWS (Elastic Beanstalk).  </li> <li>\u0428\u0430\u0433\u0438: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 \u0432 JAR, \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 CI/CD \u0441 GitHub Actions.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0420\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u043d\u0430 Railway \u0441 PostgreSQL.  </li> </ul>"},{"location":"languages/ru/phase4/#_3","title":"\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442","text":"<p>\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 - \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0422\u0430\u0431\u043b\u0438\u0446\u044b <code>Task</code> (\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0441\u0442\u0430\u0442\u0443\u0441) \u0438 <code>User</code> (\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 1:N). - Java: REST API \u0441 Spring Boot, Spring Data JPA \u0434\u043b\u044f CRUD. - \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c: JWT-\u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f, \u0440\u043e\u043b\u0438 (<code>ADMIN</code>, <code>USER</code>). - \u0422\u0435\u0441\u0442\u044b: \u042e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b (\u0441\u0435\u0440\u0432\u0438\u0441\u044b) \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b (\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0441 Testcontainers). - \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f: Swagger UI \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432. - \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GraphQL-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 Thymeleaf \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. - Git: \u041a\u043e\u043c\u043c\u0438\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>feature/rest-api</code>, <code>feature/security</code>). - \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f: \u041d\u0430 GitHub \u0441 README (\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430, \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b, \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435).  </p>"},{"location":"languages/ru/phase4/#_4","title":"\u0420\u0435\u0441\u0443\u0440\u0441\u044b","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation</li> </ul>"},{"location":"languages/ru/phase5/","title":"\u0424\u0430\u0437\u0430 5 \u2013 \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0438 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c (2\u20133 \u043c\u0435\u0441\u044f\u0446\u0430)","text":""},{"location":"languages/ru/phase5/#solid","title":"\u0427\u0438\u0441\u0442\u044b\u0439 \u043a\u043e\u0434 \u0438 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b SOLID","text":"<ul> <li>\u0427\u0438\u0441\u0442\u044b\u0439 \u043a\u043e\u0434: \u041f\u043e\u043d\u044f\u0442\u043d\u044b\u0435 \u0438\u043c\u0435\u043d\u0430, \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u0435\u0434\u0438\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.  </li> <li>SOLID:  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440: \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0432 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0435 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430\u043c SOLID.  </p>"},{"location":"languages/ru/phase5/#_1","title":"\u0428\u0430\u0431\u043b\u043e\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ul> <li>\u0428\u0430\u0431\u043b\u043e\u043d\u044b: Factory (\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435), Singleton (\u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440), Builder (\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432), Strategy (\u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435), Observer (\u0441\u043e\u0431\u044b\u0442\u0438\u044f).  </li> <li>\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435: \u0412\u044b\u0431\u043e\u0440 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430.  </li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Strategy \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.  </p>"},{"location":"languages/ru/phase5/#_2","title":"\u041f\u043e\u0442\u043e\u043a\u0438 \u0438 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c","text":"<ul> <li>\u041a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438: Thread, Runnable, ExecutorService, ForkJoinPool.  </li> <li>\u0422\u0435\u0445\u043d\u0438\u043a\u0438: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0443\u043b\u0430\u043c\u0438 \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.  </li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440: \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0442\u0447\u0435\u0442\u043e\u0432 \u043f\u043e \u0437\u0430\u0434\u0430\u0447\u0430\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ExecutorService.  </p>"},{"location":"languages/ru/phase5/#_3","title":"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>\u041c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>.  </li> <li>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b: Deadlock, race condition, starvation.  </li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043e\u0431\u0449\u0435\u043c\u0443 \u0441\u043f\u0438\u0441\u043a\u0443 \u0437\u0430\u0434\u0430\u0447.  </p>"},{"location":"languages/ru/phase5/#_4","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u044b","text":"<ul> <li>\u041a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438: \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, REST-\u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435, \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432.  </li> <li>\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b: Spring Cloud (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Eureka \u0434\u043b\u044f \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432).  </li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0437\u0430\u0434\u0430\u0447 \u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u044b (\u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438).  </p>"},{"location":"languages/ru/phase5/#_5","title":"\u041e\u0441\u043d\u043e\u0432\u044b \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e)","text":"<ul> <li>\u041a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438: \u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c/\u043f\u043e\u0434\u043f\u0438\u0441\u0447\u0438\u043a, \u043e\u0447\u0435\u0440\u0435\u0434\u0438, \u0442\u043e\u043f\u0438\u043a\u0438.  </li> <li>RabbitMQ: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.  </li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440: \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043e\u0431 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u0445 \u0437\u0430\u0434\u0430\u0447 \u0447\u0435\u0440\u0435\u0437 RabbitMQ.  </p>"},{"location":"languages/ru/phase5/#_6","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>\u041a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: Spring Cache \u0441 Redis \u0434\u043b\u044f \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0439 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.  </li> <li>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 JVM: \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 (heap, garbage collection).  </li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0447\u0430\u0441\u0442\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0437\u0430\u0434\u0430\u0447.  </p>"},{"location":"languages/ru/phase5/#devopscloud-docker-cicd","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 DevOps/Cloud: Docker \u0438 CI/CD","text":"<ul> <li>Docker: \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b, \u043e\u0431\u0440\u0430\u0437\u044b, Dockerfile, Docker Compose.  </li> <li>CI/CD: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043e\u0432 \u0441 GitHub Actions \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u043a\u0438 \u0438 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f.  </li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Dockerfile \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0438 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 GitHub Actions.  </p>"},{"location":"languages/ru/phase5/#_7","title":"\u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u043e\u0441\u0442\u044c","text":"<ul> <li>\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b: Prometheus (\u043c\u0435\u0442\u0440\u0438\u043a\u0438), Grafana (\u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f), ELK Stack (\u043b\u043e\u0433\u0438).  </li> <li>\u041a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438: \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043b\u043e\u0433\u0438, \u043e\u043f\u043e\u0432\u0435\u0449\u0435\u043d\u0438\u044f.  </li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440: \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0442\u0432\u0435\u0442\u0430 API \u0437\u0430\u0434\u0430\u0447 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Prometheus \u0438 Grafana.  </p>"},{"location":"languages/ru/phase5/#owasp-top-ten","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c: OWASP Top Ten","text":"<ul> <li>\u041a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438: \u0418\u043d\u044a\u0435\u043a\u0446\u0438\u0438, \u0441\u0431\u043e\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0443\u0442\u0435\u0447\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.  </li> <li>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0438: \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0432\u0432\u043e\u0434\u0430, \u0441\u0430\u043d\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f, \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f.  </li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440: \u0417\u0430\u0449\u0438\u0442\u0430 API \u0437\u0430\u0434\u0430\u0447 \u043e\u0442 SQL-\u0438\u043d\u044a\u0435\u043a\u0446\u0438\u0439 \u0438 XSS.  </p>"},{"location":"languages/ru/phase5/#_8","title":"\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442","text":"<p>\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 - Backend: \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 API \u0437\u0430\u0434\u0430\u0447 (\u0424\u0430\u0437\u0430 4) \u0441 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (\u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438). - \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430: \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0447\u0438\u0441\u0442\u043e\u0433\u043e \u043a\u043e\u0434\u0430, SOLID \u0438 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Strategy). - \u041a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c: \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0442\u0447\u0435\u0442\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ExecutorService. - \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 RabbitMQ \u0438 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 Redis \u0434\u043b\u044f \u0447\u0430\u0441\u0442\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. - DevOps: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 \u0432 Docker, \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 CI/CD \u0441 GitHub Actions. - \u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u043e\u0441\u0442\u044c: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Prometheus \u0438 Grafana \u0434\u043b\u044f \u043c\u0435\u0442\u0440\u0438\u043a. - \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0449\u0438\u0442\u044b \u043e\u0442 OWASP Top Ten. - Git: \u041a\u043e\u043c\u043c\u0438\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>feature/microservices</code>, <code>feature/concurrency</code>). - \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f: \u041d\u0430 GitHub \u0441 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u043c README (\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430, \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430, \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435).  </p>"},{"location":"languages/ru/phase5/#_9","title":"\u0420\u0435\u0441\u0443\u0440\u0441\u044b","text":"<ul> <li>The Pragmatic Programmer (\u041a\u043d\u0438\u0433\u0430)  </li> <li>Effective Java (\u041a\u043d\u0438\u0433\u0430)  </li> <li>Java Concurrency in Practice (\u041a\u043d\u0438\u0433\u0430)  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation</li> </ul>"},{"location":"languages/ru/phase6/","title":"\u0424\u0430\u0437\u0430 6 \u2013 \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b (\u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e)","text":""},{"location":"languages/ru/phase6/#1-crud","title":"\u041f\u0440\u043e\u0435\u043a\u0442 1: \u041f\u043e\u043b\u043d\u044b\u0439 CRUD \u0441 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439","text":"<ul> <li>\u0426\u0435\u043b\u044c: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0433\u043e RESTful API \u0441 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0439 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.  </li> <li>\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438: Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers.  </li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u0438: CRUD \u0434\u043b\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0437\u0430\u0434\u0430\u0447\u0438, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438), \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0441 \u0440\u043e\u043b\u044f\u043c\u0438 (ADMIN, USER), \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0441 Swagger.  </li> <li>\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 Thymeleaf \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430/\u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: API \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 (\u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438: <code>Project</code>, <code>Task</code>, <code>User</code>) \u0441 \u0437\u0430\u0449\u0438\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u043c\u0438.  </li> </ul>"},{"location":"languages/ru/phase6/#2","title":"\u041f\u0440\u043e\u0435\u043a\u0442 2: \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432","text":"<ul> <li>\u0426\u0435\u043b\u044c: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 API \u0438\u0437 \u041f\u0440\u043e\u0435\u043a\u0442\u0430 1.  </li> <li>\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438: Spring Boot (<code>MultipartFile</code>), Amazon S3 \u0438\u043b\u0438 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432.  </li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u0438: \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439/\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0442\u0438\u043f\u0430/\u0440\u0430\u0437\u043c\u0435\u0440\u0430.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, PDF, PNG) \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432 API.  </li> </ul>"},{"location":"languages/ru/phase6/#3","title":"\u041f\u0440\u043e\u0435\u043a\u0442 3: \u0420\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0432 \u043e\u0431\u043b\u0430\u043a\u0435","text":"<ul> <li>\u0426\u0435\u043b\u044c: \u0420\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 API \u043d\u0430 \u043e\u0431\u043b\u0430\u0447\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 \u0441 CI/CD.  </li> <li>\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438: Railway, Heroku \u0438\u043b\u0438 AWS (Elastic Beanstalk), GitHub Actions, Docker.  </li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u0438: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 \u0432 JAR/Docker, \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f.  </li> <li>\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441 Redis \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0447\u0430\u0441\u0442\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0420\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 API \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430 Railway \u0441 PostgreSQL \u0438 CI/CD.  </li> </ul>"},{"location":"languages/ru/phase6/#4","title":"\u041f\u0440\u043e\u0435\u043a\u0442 4: \u041c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u044b","text":"<ul> <li>\u0426\u0435\u043b\u044c: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 API \u0438\u0437 \u041f\u0440\u043e\u0435\u043a\u0442\u0430 1 \u043d\u0430 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u044b.  </li> <li>\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438: Spring Cloud (Eureka, Gateway), Docker Compose, REST \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f.  </li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u0438: \u041c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f <code>Tasks</code> \u0438 <code>Users</code> \u0441 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432.  </li> <li>\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 RabbitMQ \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u0438\u043a\u0438 \u0437\u0430\u0434\u0430\u0447 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 \u0434\u0432\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u0430, \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441 Docker.  </li> </ul>"},{"location":"languages/ru/phase6/#5-api","title":"\u041f\u0440\u043e\u0435\u043a\u0442 5: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c API","text":"<ul> <li>\u0426\u0435\u043b\u044c: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e API \u0434\u043b\u044f \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438.  </li> <li>\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438: Spring RestTemplate \u0438\u043b\u0438 WebClient, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f API (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, OAuth2).  </li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u0438: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u043c API (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u043f\u043e email \u0447\u0435\u0440\u0435\u0437 SendGrid).  </li> <li>\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GraphQL-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447/\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0432 MongoDB.  </li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 email-\u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.  </li> </ul>"},{"location":"languages/ru/phase6/#_1","title":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u043f\u043e\u0440\u0442\u0444\u043e\u043b\u0438\u043e","text":"<ul> <li>Git: \u041a\u043e\u043c\u043c\u0438\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>feature/crud</code>, <code>feature/upload</code>), \u0447\u0435\u0442\u043a\u0438\u0435 \u0432\u0435\u0442\u043a\u0438.  </li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f: README \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u043e\u0439, \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u043c\u0438, \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0430\u043c\u0438.  </li> <li>\u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f: \u0420\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043d\u0430 GitHub \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0439 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0435\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, MIT).  </li> </ul>"},{"location":"languages/ru/phase6/#_2","title":"\u0420\u0435\u0441\u0443\u0440\u0441\u044b","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/tr/phase1/","title":"Faz 1 \u2013 Temeller ve Temel Java (2\u20133 ay)","text":""},{"location":"languages/tr/phase1/#programlama-mantg-ve-algoritmalar","title":"Programlama Mant\u0131\u011f\u0131 ve Algoritmalar","text":"<ul> <li>Problem ayr\u0131\u015ft\u0131rma</li> <li>Egzersizler: ortalama, tek/\u00e7ift, s\u0131ralama</li> </ul>"},{"location":"languages/tr/phase1/#ortam-kurulumu","title":"Ortam Kurulumu","text":"<ul> <li>JDK kurulumu</li> <li>IDE (IntelliJ veya Eclipse)</li> <li>Temel hata ay\u0131klama</li> </ul>"},{"location":"languages/tr/phase1/#temel-java-sintaksi","title":"Temel Java Sintaksi","text":"<ul> <li>Program yap\u0131s\u0131 (class, main)</li> <li>\u0130simlendirme kurallar\u0131</li> <li>Yorumlar</li> </ul>"},{"location":"languages/tr/phase1/#veri-tipleri-ve-degiskenler","title":"Veri Tipleri ve De\u011fi\u015fkenler","text":"<ul> <li>Primitive ve non-primitive tipler</li> <li>Bildirim, ba\u015flatma, sabitler</li> <li>Casting ve kar\u015f\u0131la\u015ft\u0131rma (<code>==</code> vs <code>.equals()</code>)</li> </ul>"},{"location":"languages/tr/phase1/#giris-ve-cks","title":"Giri\u015f ve \u00c7\u0131k\u0131\u015f","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/tr/phase1/#kontrol-yaplar","title":"Kontrol Yap\u0131lar\u0131","text":"<ul> <li>if, else if, else, switch</li> <li>Mant\u0131ksal ve ili\u015fkisel operat\u00f6rler</li> </ul>"},{"location":"languages/tr/phase1/#donguler","title":"D\u00f6ng\u00fcler","text":"<ul> <li>for, while, do-while</li> <li>break, continue, i\u00e7 i\u00e7e d\u00f6ng\u00fcler</li> </ul>"},{"location":"languages/tr/phase1/#metotlar-ve-kapsam","title":"Metotlar ve Kapsam","text":"<ul> <li>Bildirim, parametreler, geri d\u00f6n\u00fc\u015f</li> <li>Overloading</li> <li>Yerel de\u011fi\u015fkenler ve s\u0131n\u0131f \u00f6znitelikleri</li> </ul>"},{"location":"languages/tr/phase1/#diziler","title":"Diziler","text":"<ul> <li>Bildirim, ba\u015flatma ve manip\u00fclasyon</li> <li>Do\u011frusal arama ve manuel s\u0131ralama</li> <li>Arrays.toString() ile hata ay\u0131klama</li> </ul>"},{"location":"languages/tr/phase1/#stringler-ve-stringbuilder","title":"Stringler ve StringBuilder","text":"<ul> <li>Yayg\u0131n metotlar</li> <li>De\u011fi\u015fmezlik ve performans</li> </ul>"},{"location":"languages/tr/phase1/#istisnalar","title":"\u0130stisnalar","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw ve throws</li> <li>\u00d6zel istisnalar olu\u015fturma (\u00f6r. throw new MyException)</li> </ul>"},{"location":"languages/tr/phase1/#temel-araclar","title":"Temel Ara\u00e7lar","text":"<ul> <li>Terminal: cd, ls, mkdir</li> <li>Git: init, add, commit, push, pull, branch, merge</li> <li>GitHub: depo olu\u015fturma, pull requests, klonlama</li> </ul>"},{"location":"languages/tr/phase1/#final-projeleri","title":"Final Projeleri","text":"<ul> <li>Basit hesap makinesi ve bir Task manager</li> <li>Gereksinimler:</li> <li>Git kullan</li> <li>GitHub\u2019da yay\u0131nla</li> <li>A\u00e7\u0131klay\u0131c\u0131 README</li> </ul>"},{"location":"languages/tr/phase1/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Helsinki \u00dcniversitesi MOOC</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/tr/phase2/","title":"Faz 2 \u2013 Programlama Nesne Y\u00f6nelimli (2\u20133 ay)","text":""},{"location":"languages/tr/phase2/#snflar-nesneler-oznitelikler-ve-metotlar","title":"S\u0131n\u0131flar, Nesneler, \u00d6znitelikler ve Metotlar","text":"<ul> <li>S\u0131n\u0131f yap\u0131s\u0131</li> <li>Nesne olu\u015fturma</li> <li>this kullan\u0131m\u0131</li> <li>En iyi uygulamalar: isimlendirme, kod organizasyonu</li> </ul>"},{"location":"languages/tr/phase2/#kapsulleme-kaltm-cok-bicimlilik-ve-soyutlama","title":"Kaps\u00fclleme, Kal\u0131t\u0131m, \u00c7ok Bi\u00e7imlilik ve Soyutlama","text":"<ul> <li>Encapsulation: private, getters/setters, do\u011frulama</li> <li>Inheritance: extends, overriding (@Override)</li> <li>Polymorphism: alt tip, method overloading</li> <li>Abstraction: genel bak\u0131\u015f, aray\u00fczler ve soyut s\u0131n\u0131flar i\u00e7in haz\u0131rl\u0131k</li> </ul>"},{"location":"languages/tr/phase2/#arayuzler-ve-soyut-snflar","title":"Aray\u00fczler ve Soyut S\u0131n\u0131flar","text":"<ul> <li>Interfaces: implements, default methods</li> <li>Abstract classes: soyut ve somut metotlar</li> <li>Aray\u00fcz ve soyut s\u0131n\u0131f aras\u0131ndaki farklar</li> </ul>"},{"location":"languages/tr/phase2/#kurucular-baslatclar-ve-statik-bloklar","title":"Kurucular, Ba\u015flat\u0131c\u0131lar ve Statik Bloklar","text":"<ul> <li>Varsay\u0131lan ve parametreli kurucular, this() ile \u00e7a\u011fr\u0131lar</li> <li>Ba\u015flatma bloklar\u0131 ({}) ve statik bloklar (static {})</li> </ul>"},{"location":"languages/tr/phase2/#sabitler-enumerations","title":"Sabitler (Enumerations)","text":"<ul> <li>enum olu\u015fturma ve kullanma</li> <li>Enum\u2019larda metotlar ve \u00f6znitelikler</li> </ul>"},{"location":"languages/tr/phase2/#temel-koleksiyonlar","title":"Temel Koleksiyonlar","text":"<ul> <li>ArrayList: ekleme, kald\u0131rma, yineleme (for, forEach, Iterator)</li> <li>HashMap: anahtar-de\u011fer, yayg\u0131n i\u015flemler</li> <li>HashSet: yinelenenleri eleme</li> <li>Queue ve Stack\u2019e giri\u015f (\u00f6r. LinkedList queue/stack olarak)</li> <li>Java Collections Framework\u2019e giri\u015f</li> </ul>"},{"location":"languages/tr/phase2/#temel-algoritmalar","title":"Temel Algoritmalar","text":"<ul> <li>Do\u011frusal ve ikili arama</li> <li>Sorting: Bubble Sort, Collections.sort()</li> <li>Recursion: kavramlar ve basit \u00f6rnekler (\u00f6r. fakt\u00f6riyel, Fibonacci)</li> <li>Karma\u015f\u0131kl\u0131\u011fa giri\u015f (O(n), O(log n))</li> </ul>"},{"location":"languages/tr/phase2/#jenerikler-generics","title":"Jenerikler (Generics)","text":"<ul> <li>S\u00f6zdizimi (), jenerik koleksiyonlar, jenerik metotlar <li>S\u0131n\u0131rlar (extends, super)</li>"},{"location":"languages/tr/phase2/#stream-api-giris","title":"Stream API (Giri\u015f)","text":"<ul> <li>Temel i\u015flemler: filter, map, collect</li> <li>ArrayList ile \u00f6rnekler</li> </ul>"},{"location":"languages/tr/phase2/#birim-testi-giris","title":"Birim Testi (Giri\u015f)","text":"<ul> <li>JUnit\u2019in temel kullan\u0131m\u0131</li> <li>S\u0131n\u0131flar ve metotlar i\u00e7in test senaryolar\u0131 yazma</li> <li>TDD\u2019ye giri\u015f (Test-Driven Development)</li> </ul>"},{"location":"languages/tr/phase2/#final-projesi","title":"Final Projesi","text":"<ul> <li>K\u00fct\u00fcphane Sistemi</li> <li>S\u0131n\u0131flar: Book, User, Library</li> <li>Kal\u0131t\u0131m: DigitalBook ve PhysicalBook</li> <li>Koleksiyonlar: Kitaplar i\u00e7in ArrayList, \u00f6d\u00fcn\u00e7ler i\u00e7in HashMap</li> <li>Kaps\u00fclleme: veri do\u011frulama</li> <li>Git: \u00f6zellik ba\u015f\u0131na commit (\u00f6r. <code>feature/book-management</code>)</li> <li>A\u00e7\u0131klay\u0131c\u0131 README ile GitHub\u2019da yay\u0131nla</li> </ul>"},{"location":"languages/tr/phase2/#guncellenmis-kaynaklar","title":"G\u00fcncellenmi\u015f Kaynaklar","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java (Kitap)</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/tr/phase3/","title":"Faz 3 \u2013 Veri Kal\u0131c\u0131l\u0131\u011f\u0131 ve Ak\u0131\u015flar (2\u20133 ay)","text":""},{"location":"languages/tr/phase3/#temel-sql","title":"Temel SQL","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Keys: primary ve foreign keys.  </li> <li>Normalization: 1NF, 2NF, 3NF.  </li> <li>\u00d6rnek: \u00fcr\u00fcnler ve kategoriler i\u00e7in tablolar olu\u015fturma.  </li> </ul>"},{"location":"languages/tr/phase3/#jdbc-ve-connection-pool","title":"JDBC ve Connection Pool","text":"<ul> <li>S\u0131n\u0131flar: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>Connection Pool kullan\u0131m\u0131 (HikariCP).  </li> <li>En iyi uygulamalar: <code>try-with-resources</code>, <code>SQLException</code> y\u00f6netimi.  </li> </ul>"},{"location":"languages/tr/phase3/#hibernate-jpa-uygulamada","title":"Hibernate + JPA Uygulamada","text":"<ul> <li>Annotations: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>Konfig\u00fcrasyon: <code>persistence.xml</code> veya <code>application.properties</code>.  </li> <li>CRUD i\u015flemleri <code>EntityManager</code> ile.  </li> <li>Flyway veya Liquibase ile veritaban\u0131 g\u00f6\u00e7lerine giri\u015f.</li> </ul>"},{"location":"languages/tr/phase3/#nosql-veritabanlarna-giris","title":"NoSQL Veritabanlar\u0131na Giri\u015f","text":"<ul> <li>Kavramlar: belgeler, koleksiyonlar, yatay \u00f6l\u00e7eklenebilirlik.  </li> <li>MongoDB: kurulum, MongoRepository ile CRUD i\u015flemleri.  </li> <li>Spring Data MongoDB: Spring Boot ile entegrasyon.  </li> <li>\u00d6rnek: \u00fcr\u00fcnlerle ilgili sistem etkinlik g\u00fcnl\u00fcklerini MongoDB\u2019de saklama.</li> </ul>"},{"location":"languages/tr/phase3/#akslar-ve-lambda-ifadeleri","title":"Ak\u0131\u015flar ve Lambda \u0130fadeleri","text":"<ul> <li>\u0130\u015flemler: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>\u00d6rnek: \u00fcr\u00fcnleri fiyata g\u00f6re filtreleme, isme g\u00f6re s\u0131ralama.  </li> </ul>"},{"location":"languages/tr/phase3/#optional-ve-fonksiyonel-arayuzler","title":"Optional ve Fonksiyonel Aray\u00fczler","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>Fonksiyonel aray\u00fczler: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>\u00d6rnek: verileri filtrelemek i\u00e7in Streams\u2019te <code>Predicate</code> kullanma.  </li> </ul>"},{"location":"languages/tr/phase3/#gelismis-koleksiyonlar","title":"Geli\u015fmi\u015f Koleksiyonlar","text":"<ul> <li>LinkedList: verimli ekleme/\u00e7\u0131karma.  </li> <li>TreeMap: s\u0131ral\u0131 anahtar-de\u011fer \u00e7iftleri.  </li> <li>PriorityQueue: \u00f6ncelik kuyru\u011fu.  </li> <li>LinkedHashMap ve Deque (giri\u015f).  </li> </ul>"},{"location":"languages/tr/phase3/#gunluk-kayd-slf4jlogback","title":"G\u00fcnl\u00fck Kayd\u0131 (SLF4J/Logback)","text":"<ul> <li>SLF4J ve Logback konfig\u00fcrasyonu.  </li> <li>Seviyeler: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>\u00d6rnek: Hibernate sorgular\u0131n\u0131 g\u00fcnl\u00fc\u011fe kaydetme.  </li> </ul>"},{"location":"languages/tr/phase3/#islem-kavramlar-acid","title":"\u0130\u015flem Kavramlar\u0131 (ACID)","text":"<ul> <li>Atomiklik, Tutarl\u0131l\u0131k, \u0130zolasyon, Dayan\u0131kl\u0131l\u0131k.  </li> <li>JDBC ile i\u015flemler (<code>commit</code>, <code>rollback</code>) ve Hibernate ile (<code>@Transactional</code>).  </li> </ul>"},{"location":"languages/tr/phase3/#indeksler-ve-yurutme-planlar","title":"\u0130ndeksler ve Y\u00fcr\u00fctme Planlar\u0131","text":"<ul> <li>\u0130ndeksler: primary, unique, composite.  </li> <li>Sorgular\u0131 optimize etmek i\u00e7in EXPLAIN kullan\u0131m\u0131.  </li> <li>\u00d6rnek: s\u0131k aranan bir s\u00fctunda indeks olu\u015fturma.  </li> </ul>"},{"location":"languages/tr/phase3/#dosya-manipulasyonu-opsiyonel","title":"Dosya Manip\u00fclasyonu (Opsiyonel)","text":"<ul> <li><code>Files</code>, <code>BufferedReader</code> ile okuma ve yazma.  </li> <li>\u00d6rnek: Streams kullanarak \u00fcr\u00fcn raporunu CSV\u2019ye d\u0131\u015fa aktarma.  </li> </ul>"},{"location":"languages/tr/phase3/#veritaban-testi-giris","title":"Veritaban\u0131 Testi (Giri\u015f)","text":"<ul> <li>H2 ve JUnit ile entegrasyon testleri.  </li> <li>\u00d6rnek: Hibernate ile CRUD i\u015flemlerini test etme.  </li> </ul>"},{"location":"languages/tr/phase3/#final-projesi","title":"Final Projesi","text":"<p>\u00dcr\u00fcn Y\u00f6netim Sistemi - Veritaban\u0131: Product ve Category tablolar\u0131 (1:N ili\u015fkisi). - Java: JPA ile s\u0131n\u0131flar (<code>Product</code>, <code>Category</code>), Hibernate ile CRUD. - Opsiyonel: \u00fcr\u00fcn de\u011fi\u015fim g\u00fcnl\u00fcklerini MongoDB\u2019de saklama. - Opsiyonel: dinamik \u00fcr\u00fcn \u00f6zelliklerini (\u00f6r. teknik \u00f6zellikler) MongoDB\u2019de saklama. - Streams: \u00fcr\u00fcnleri filtreleme/s\u0131ralama (\u00f6r. fiyat veya kategori baz\u0131nda). - Logging: veritaban\u0131 i\u015flemlerini izleme. - Git: \u00f6zellik ba\u015f\u0131na commit (\u00f6r. <code>feature/crud</code>, <code>feature/streams</code>). - A\u00e7\u0131klay\u0131c\u0131 README ile GitHub\u2019da yay\u0131nla.  </p>"},{"location":"languages/tr/phase3/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/tr/phase4/","title":"Faz 4 \u2013 \u00c7er\u00e7eveler ve Web Uygulamalar\u0131 (3\u20134 ay)","text":""},{"location":"languages/tr/phase4/#spring-boot-spring-core-ve-spring-data-jpa","title":"Spring Boot, Spring Core ve Spring Data JPA","text":"<ul> <li>Spring Core: Dependency injection (<code>@Bean</code>, <code>@Autowired</code>), IoC container.  </li> <li>Spring Boot: Otomatik konfig\u00fcrasyon, starter\u2019lar (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>), <code>application.yml</code>.  </li> <li>Spring Data JPA: Repositories (<code>CrudRepository</code>, <code>JpaRepository</code>), <code>@Query</code> ile sorgular, sayfalama.  </li> <li>\u00d6rnek: Bir g\u00f6rev uygulamas\u0131nda g\u00f6revleri y\u00f6netmek i\u00e7in REST endpoint\u2019leri olu\u015fturma (CRUD).  </li> </ul>"},{"location":"languages/tr/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>Kavramlar: Kimlik do\u011frulama, yetkilendirme, g\u00fcvenlik filtreleri.  </li> <li>JWT: Token olu\u015fturma ve do\u011frulama, <code>JwtAuthenticationFilter</code> kullan\u0131m\u0131.  </li> <li>OAuth2: Resource Server yap\u0131land\u0131rma, bir sa\u011flay\u0131c\u0131 ile entegrasyon (\u00f6r. Google).  </li> <li>\u00d6rnek: G\u00f6rev endpoint\u2019lerini JWT ve rollerle (<code>ADMIN</code>, <code>USER</code>) koruma.  </li> </ul>"},{"location":"languages/tr/phase4/#birim-ve-entegrasyon-testleri","title":"Birim ve Entegrasyon Testleri","text":"<ul> <li>Unit tests: JUnit 5, Mockito (<code>@Mock</code>, <code>@InjectMocks</code>), i\u015f mant\u0131\u011f\u0131n\u0131 test etme.  </li> <li>Integration tests: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, test i\u00e7in H2 veritaban\u0131.  </li> <li>Testcontainers: Docker konteynerlerinde PostgreSQL ile test.  </li> <li>\u00d6rnek: G\u00f6rev uygulamas\u0131n\u0131n servislerini ve endpoint\u2019lerini test etme.  </li> </ul>"},{"location":"languages/tr/phase4/#restful-apiler-ve-swagger-ile-dokumantasyon","title":"RESTful API\u2019ler ve Swagger ile Dok\u00fcmantasyon","text":"<ul> <li>REST: HTTP metodlar\u0131, durum kodlar\u0131, RESTful prensipler.  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>.  </li> <li>Swagger: springdoc-openapi yap\u0131land\u0131rma, <code>@Operation</code> ile anotasyon.  </li> <li>\u00d6rnek: G\u00f6rev uygulamas\u0131 endpoint\u2019lerini Swagger UI ile dok\u00fcmante etme.  </li> </ul>"},{"location":"languages/tr/phase4/#graphqle-giris","title":"GraphQL\u2019e Giri\u015f","text":"<ul> <li>Kavramlar: Sorgular, mutasyonlar, \u015fema.  </li> <li>Spring Boot ile GraphQL: spring-boot-starter-graphql ile kurulum.  </li> <li>\u00d6rnek: G\u00f6revleri duruma g\u00f6re listelemek i\u00e7in bir GraphQL sorgusu olu\u015fturma.  </li> </ul>"},{"location":"languages/tr/phase4/#temel-frontend-entegrasyonu","title":"Temel Frontend Entegrasyonu","text":"<ul> <li>Thymeleaf: Spring Boot ile HTML sayfalar\u0131n\u0131 olu\u015fturmak i\u00e7in \u015fablonlar.  </li> <li>\u00d6rnek: G\u00f6revleri g\u00f6r\u00fcnt\u00fclemek ve olu\u015fturmak i\u00e7in basit bir web aray\u00fcz\u00fc olu\u015fturma.  </li> </ul>"},{"location":"languages/tr/phase4/#yap-araclar-maven-ve-gradle","title":"Yap\u0131 Ara\u00e7lar\u0131: Maven ve Gradle","text":"<ul> <li>Maven: <code>pom.xml</code> yap\u0131s\u0131, ba\u011f\u0131ml\u0131l\u0131klar, eklentiler.  </li> <li>Gradle: <code>build.gradle</code> dosyas\u0131, g\u00f6revler, ba\u011f\u0131ml\u0131l\u0131k y\u00f6netimi.  </li> <li>\u00d6rnek: G\u00f6rev uygulamas\u0131n\u0131 Maven ve Gradle ile yap\u0131land\u0131rma.  </li> </ul>"},{"location":"languages/tr/phase4/#proje-dagtm","title":"Proje Da\u011f\u0131t\u0131m\u0131","text":"<ul> <li>Platformlar: Railway, Heroku, AWS (Elastic Beanstalk).  </li> <li>Ad\u0131mlar: JAR olarak paketleme, GitHub Actions ile CI/CD yap\u0131land\u0131rma.  </li> <li>\u00d6rnek: G\u00f6rev uygulamas\u0131n\u0131 PostgreSQL ile Railway\u2019e da\u011f\u0131tma.  </li> </ul>"},{"location":"languages/tr/phase4/#final-projesi","title":"Final Projesi","text":"<p>G\u00f6rev Y\u00f6netim Sistemi - Veritaban\u0131: <code>Task</code> (ba\u015fl\u0131k, a\u00e7\u0131klama, durum) ve <code>User</code> tablolar\u0131 (1:N ili\u015fkisi). - Java: Spring Boot ile REST API, Spring Data JPA ile CRUD. - G\u00fcvenlik: JWT kimlik do\u011frulama, roller (<code>ADMIN</code>, <code>USER</code>). - Testler: Unit tests (servisler) ve integration tests (Testcontainers ile endpoint\u2019ler). - Dok\u00fcmantasyon: Endpoint a\u00e7\u0131klamalar\u0131 ile Swagger UI. - Opsiyonel: G\u00f6revleri listelemek i\u00e7in GraphQL sorgusu ve etkile\u015fim i\u00e7in Thymeleaf aray\u00fcz\u00fc ekleme. - Git: \u00d6zellik ba\u015f\u0131na commit (\u00f6r. <code>feature/rest-api</code>, <code>feature/security</code>). - Yay\u0131n: GitHub\u2019da README ile (kurulum, endpoint\u2019ler, da\u011f\u0131t\u0131m).  </p>"},{"location":"languages/tr/phase4/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation</li> </ul>"},{"location":"languages/tr/phase5/","title":"Faz 5 \u2013 Mimari ve E\u015fzamanl\u0131l\u0131k (2\u20133 ay)","text":""},{"location":"languages/tr/phase5/#temiz-kod-ve-solid-prensipleri","title":"Temiz Kod ve SOLID Prensipleri","text":"<ul> <li>Clean Code: A\u00e7\u0131k isimlendirme, k\u0131sa fonksiyonlar, faydal\u0131 yorumlar, tutarl\u0131 formatlama.  </li> <li>SOLID:  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>\u00d6rnek: G\u00f6rev Y\u00f6neticisi\u2019nde bir servisi SOLID prensiplerine uygun olarak yeniden d\u00fczenleme.  </p>"},{"location":"languages/tr/phase5/#tasarm-kalplar","title":"Tasar\u0131m Kal\u0131plar\u0131","text":"<ul> <li>Kal\u0131plar: Factory (yaratma), Singleton (tek \u00f6rnek), Builder (nesne olu\u015fturma), Strategy (davran\u0131\u015f), Observer (olaylar).  </li> <li>Uygulama: Proje ba\u011flam\u0131na uygun kal\u0131plar\u0131 se\u00e7me.  </li> </ul> <p>\u00d6rnek: Farkl\u0131 g\u00f6rev \u00f6nceliklendirme algoritmalar\u0131 i\u00e7in Strategy kullanma.  </p>"},{"location":"languages/tr/phase5/#is-parcacklar-ve-eszamanllk","title":"\u0130\u015f Par\u00e7ac\u0131klar\u0131 ve E\u015fzamanl\u0131l\u0131k","text":"<ul> <li>Kavramlar: Thread, Runnable, ExecutorService, ForkJoinPool.  </li> <li>Teknikler: \u0130\u015f par\u00e7ac\u0131\u011f\u0131 havuzlar\u0131 olu\u015fturma ve y\u00f6netme, asenkron g\u00f6revler.  </li> </ul> <p>\u00d6rnek: G\u00f6rev raporlar\u0131n\u0131 ExecutorService ile paralel i\u015fleme.  </p>"},{"location":"languages/tr/phase5/#senkronizasyon-ve-eszamanllk-sorunlar","title":"Senkronizasyon ve E\u015fzamanl\u0131l\u0131k Sorunlar\u0131","text":"<ul> <li>Mekanizmalar: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>.  </li> <li>Sorunlar: Deadlock, race condition, starvation.  </li> </ul> <p>\u00d6rnek: Payla\u015f\u0131lan bir g\u00f6rev listesine g\u00fcvenli eri\u015fim sa\u011flama.  </p>"},{"location":"languages/tr/phase5/#mikroservislere-giris","title":"Mikroservislere Giri\u015f","text":"<ul> <li>Kavramlar: Mikroservis mimarisi, REST ileti\u015fimi, servis ke\u015ffi.  </li> <li>Ara\u00e7lar: Spring Cloud (\u00f6r. servis ke\u015ffi i\u00e7in Eureka).  </li> </ul> <p>\u00d6rnek: G\u00f6rev Y\u00f6neticisi\u2019ni mikroservisler (g\u00f6revler ve kullan\u0131c\u0131lar) olarak ay\u0131rma.  </p>"},{"location":"languages/tr/phase5/#mesaj-kuyrugu-temelleri-opsiyonel","title":"Mesaj Kuyru\u011fu Temelleri (Opsiyonel)","text":"<ul> <li>Kavramlar: Yay\u0131nc\u0131/abone, kuyruklar, konular.  </li> <li>RabbitMQ: Kurulum, mesaj g\u00f6nderme ve t\u00fcketme.  </li> </ul> <p>\u00d6rnek: G\u00f6rev g\u00fcncellemeleri i\u00e7in kullan\u0131c\u0131lar\u0131 RabbitMQ arac\u0131l\u0131\u011f\u0131yla bilgilendirme.  </p>"},{"location":"languages/tr/phase5/#performans-optimizasyonu","title":"Performans Optimizasyonu","text":"<ul> <li>Caching: Veritaban\u0131 eri\u015fimini azaltmak i\u00e7in Spring Cache ile Redis.  </li> <li>JVM Tuning: Temel kavramlar (heap, garbage collection).  </li> </ul> <p>\u00d6rnek: G\u00f6rev sisteminde s\u0131k yap\u0131lan sorgular i\u00e7in \u00f6nbellek uygulama.  </p>"},{"location":"languages/tr/phase5/#devopsclouda-giris-docker-ve-cicd","title":"DevOps/Cloud\u2019a Giri\u015f: Docker ve CI/CD","text":"<ul> <li>Docker: Konteynerler, g\u00f6r\u00fcnt\u00fcler, Dockerfile, Docker Compose.  </li> <li>CI/CD: GitHub Actions ile derleme ve da\u011f\u0131t\u0131m i\u00e7in pipeline yap\u0131land\u0131rma.  </li> </ul> <p>\u00d6rnek: G\u00f6rev uygulamas\u0131 i\u00e7in Dockerfile olu\u015fturma ve GitHub Actions ile da\u011f\u0131t\u0131m.  </p>"},{"location":"languages/tr/phase5/#gozlemlenebilirlik","title":"G\u00f6zlemlenebilirlik","text":"<ul> <li>Ara\u00e7lar: Prometheus (metrikler), Grafana (g\u00f6rselle\u015ftirme), ELK Stack (g\u00fcnl\u00fckler).  </li> <li>Kavramlar: Performans izleme, merkezi g\u00fcnl\u00fckler, uyar\u0131lar.  </li> </ul> <p>\u00d6rnek: G\u00f6revler i\u00e7in API yan\u0131t s\u00fcresini Prometheus ve Grafana ile izleme.  </p>"},{"location":"languages/tr/phase5/#guvenlik-owasp-top-ten","title":"G\u00fcvenlik: OWASP Top Ten","text":"<ul> <li>Kavramlar: Enjeksiyon, kimlik do\u011frulama hatalar\u0131, hassas veri if\u015fas\u0131.  </li> <li>Uygulamalar: Girdi do\u011frulama, temizleme, g\u00fcvenli konfig\u00fcrasyon.  </li> </ul> <p>\u00d6rnek: G\u00f6rev API\u2019sini SQL injection ve XSS sald\u0131r\u0131lar\u0131na kar\u015f\u0131 koruma.  </p>"},{"location":"languages/tr/phase5/#final-projesi","title":"Final Projesi","text":"<p>Geli\u015fmi\u015f G\u00f6rev Y\u00f6netim Sistemi - Backend: G\u00f6rev API\u2019sini (Faz 4) mikroservislerle (g\u00f6revler ve kullan\u0131c\u0131lar) geli\u015ftirme. - Mimari: Clean Code, SOLID ve tasar\u0131m kal\u0131plar\u0131yla (\u00f6r. Strategy) yeniden d\u00fczenleme. - E\u015fzamanl\u0131l\u0131k: Raporlar\u0131 ExecutorService ile paralel i\u015fleme. - Opsiyonel: Mikroservisler aras\u0131 ileti\u015fim i\u00e7in RabbitMQ ve s\u0131k sorgular i\u00e7in Redis ile \u00f6nbellek ekleme. - DevOps: Docker ile paketleme, GitHub Actions ile CI/CD yap\u0131land\u0131rma. - G\u00f6zlemlenebilirlik: Metrikler i\u00e7in Prometheus ve Grafana ekleme. - G\u00fcvenlik: OWASP Top Ten\u2019e kar\u015f\u0131 korumalar uygulama. - Git: \u00d6zellik ba\u015f\u0131na commit (\u00f6r. <code>feature/microservices</code>, <code>feature/concurrency</code>). - Yay\u0131n: GitHub\u2019da detayl\u0131 README ile (kurulum, mimari, da\u011f\u0131t\u0131m).  </p>"},{"location":"languages/tr/phase5/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>The Pragmatic Programmer (Kitap)  </li> <li>Effective Java (Kitap)  </li> <li>Java Concurrency in Practice (Kitap)  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation</li> </ul>"},{"location":"languages/tr/phase6/","title":"Faz 6 \u2013 Final Projeleri (Devam Ediyor)","text":""},{"location":"languages/tr/phase6/#proje-1-kimlik-dogrulama-ile-tam-crud","title":"Proje 1: Kimlik Do\u011frulama ile Tam CRUD","text":"<ul> <li>Ama\u00e7: G\u00fcvenli kimlik do\u011frulama ve test ile sa\u011flam bir RESTful API olu\u015fturma.  </li> <li>Teknolojiler: Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers.  </li> <li>\u00d6zellikler: Varl\u0131klar i\u00e7in CRUD (\u00f6r. g\u00f6revler, kullan\u0131c\u0131lar), rollerle kimlik do\u011frulama (ADMIN, USER), Swagger ile dok\u00fcmantasyon.  </li> <li>Opsiyonel: G\u00f6revleri g\u00f6r\u00fcnt\u00fclemek/y\u00f6netmek i\u00e7in Thymeleaf aray\u00fcz\u00fc ekleme.  </li> <li>\u00d6rnek: Projeleri y\u00f6netmek i\u00e7in API (varl\u0131klar: <code>Project</code>, <code>Task</code>, <code>User</code>) korumal\u0131 endpoint\u2019lerle.  </li> </ul>"},{"location":"languages/tr/phase6/#proje-2-dosya-yukleme","title":"Proje 2: Dosya Y\u00fckleme","text":"<ul> <li>Ama\u00e7: Proje 1\u2019deki API\u2019ye dosya y\u00fckleme i\u015flevselli\u011fi ekleme.  </li> <li>Teknolojiler: Spring Boot (<code>MultipartFile</code>), Amazon S3 veya yerel depolama, dosya do\u011frulama.  </li> <li>\u00d6zellikler: G\u00f6revlerle ili\u015fkilendirilmi\u015f resim/belge y\u00fckleme, tip/boyut do\u011frulama.  </li> <li>\u00d6rnek: API\u2019deki g\u00f6revler i\u00e7in ek y\u00fckleme izni (\u00f6r. PDF, PNG).  </li> </ul>"},{"location":"languages/tr/phase6/#proje-3-bulut-dagtm","title":"Proje 3: Bulut Da\u011f\u0131t\u0131m\u0131","text":"<ul> <li>Ama\u00e7: API\u2019yi CI/CD ile bir bulut platformuna da\u011f\u0131tma.  </li> <li>Teknolojiler: Railway, Heroku veya AWS (Elastic Beanstalk), GitHub Actions, Docker.  </li> <li>\u00d6zellikler: JAR/Docker olarak paketleme, \u00e7evre de\u011fi\u015fkenlerini yap\u0131land\u0131rma, da\u011f\u0131t\u0131m\u0131 otomatikle\u015ftirme.  </li> <li>Opsiyonel: S\u0131k sorgular\u0131 optimize etmek i\u00e7in Redis ile \u00f6nbellek uygulama.  </li> <li>\u00d6rnek: Proje API\u2019sini PostgreSQL ve CI/CD ile Railway\u2019e da\u011f\u0131tma.  </li> </ul>"},{"location":"languages/tr/phase6/#proje-4-mikroservisler","title":"Proje 4: Mikroservisler","text":"<ul> <li>Ama\u00e7: Proje 1\u2019deki API\u2019yi orkestre edilmi\u015f mikroservislere ay\u0131rma.  </li> <li>Teknolojiler: Spring Cloud (Eureka, Gateway), Docker Compose, ileti\u015fim i\u00e7in REST.  </li> <li>\u00d6zellikler: <code>Tasks</code> ve <code>Users</code> i\u00e7in mikroservisler, servis ke\u015ffi ile.  </li> <li>Opsiyonel: Mikroservisler aras\u0131 asenkron ileti\u015fim i\u00e7in RabbitMQ kullanma.  </li> <li>\u00d6rnek: G\u00f6rev ve kullan\u0131c\u0131 mant\u0131\u011f\u0131n\u0131 iki servise ay\u0131rma, Docker ile orkestrasyon.  </li> </ul>"},{"location":"languages/tr/phase6/#proje-5-harici-api-entegrasyonu","title":"Proje 5: Harici API Entegrasyonu","text":"<ul> <li>Ama\u00e7: \u0130\u015flevselli\u011fi art\u0131rmak i\u00e7in harici bir API t\u00fcketme.  </li> <li>Teknolojiler: Spring RestTemplate veya WebClient, API kimlik do\u011frulamas\u0131 (\u00f6r. OAuth2).  </li> <li>\u00d6zellikler: Genel bir API ile entegrasyon (\u00f6r. SendGrid ile e-posta bildirimleri g\u00f6nderme).  </li> <li>Opsiyonel: G\u00f6revleri/kullan\u0131c\u0131lar\u0131 almak ve meta verileri MongoDB\u2019de saklamak i\u00e7in GraphQL sorgusu ekleme.  </li> <li>\u00d6rnek: G\u00f6rev tamamlanmas\u0131 i\u00e7in e-posta bildirimleri ekleme.  </li> </ul>"},{"location":"languages/tr/phase6/#portfoy-en-iyi-uygulamalar","title":"Portf\u00f6y En \u0130yi Uygulamalar\u0131","text":"<ul> <li>Git: \u00d6zellik ba\u015f\u0131na commit (\u00f6r. <code>feature/crud</code>, <code>feature/upload</code>), a\u00e7\u0131k dallar.  </li> <li>Dok\u00fcmantasyon: A\u00e7\u0131klama, kurulum, endpoint\u2019ler, da\u011f\u0131t\u0131m ve ekran g\u00f6r\u00fcnt\u00fcleri i\u00e7eren README.  </li> <li>Yay\u0131n: GitHub\u2019da a\u00e7\u0131k kaynak lisans\u0131 ile bar\u0131nd\u0131rma (\u00f6r. MIT).  </li> </ul>"},{"location":"languages/tr/phase6/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/vi/phase1/","title":"Giai \u0111o\u1ea1n 1 \u2013 C\u01a1 b\u1ea3n v\u00e0 Java thi\u1ebft y\u1ebfu (2\u20133 th\u00e1ng)","text":""},{"location":"languages/vi/phase1/#logic-lap-trinh-va-thuat-toan","title":"Logic l\u1eadp tr\u00ecnh v\u00e0 thu\u1eadt to\u00e1n","text":"<ul> <li>Ph\u00e2n t\u00edch v\u1ea5n \u0111\u1ec1</li> <li>B\u00e0i t\u1eadp: t\u00ednh trung b\u00ecnh, ch\u1eb5n/l\u1ebb, s\u1eafp x\u1ebfp</li> </ul>"},{"location":"languages/vi/phase1/#thiet-lap-moi-truong","title":"Thi\u1ebft l\u1eadp m\u00f4i tr\u01b0\u1eddng","text":"<ul> <li>C\u00e0i \u0111\u1eb7t JDK</li> <li>IDE (IntelliJ ho\u1eb7c Eclipse)</li> <li>G\u1ee1 l\u1ed7i c\u01a1 b\u1ea3n</li> </ul>"},{"location":"languages/vi/phase1/#cu-phap-java-co-ban","title":"C\u00fa ph\u00e1p Java c\u01a1 b\u1ea3n","text":"<ul> <li>C\u1ea5u tr\u00fac ch\u01b0\u01a1ng tr\u00ecnh (class, main)</li> <li>Quy t\u1eafc \u0111\u1eb7t t\u00ean</li> <li>B\u00ecnh lu\u1eadn (Comments)</li> </ul>"},{"location":"languages/vi/phase1/#kieu-du-lieu-va-bien","title":"Ki\u1ec3u d\u1eef li\u1ec7u v\u00e0 bi\u1ebfn","text":"<ul> <li>Ki\u1ec3u nguy\u00ean th\u1ee7y v\u00e0 kh\u00f4ng nguy\u00ean th\u1ee7y</li> <li>Khai b\u00e1o, kh\u1edfi t\u1ea1o, h\u1eb1ng s\u1ed1</li> <li>\u00c9p ki\u1ec3u (Casting) v\u00e0 so s\u00e1nh (<code>==</code> vs <code>.equals()</code>)</li> </ul>"},{"location":"languages/vi/phase1/#nhap-va-xuat-du-lieu","title":"Nh\u1eadp v\u00e0 xu\u1ea5t d\u1eef li\u1ec7u","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/vi/phase1/#cau-truc-ieu-khien","title":"C\u1ea5u tr\u00fac \u0111i\u1ec1u khi\u1ec3n","text":"<ul> <li>if, else if, else, switch</li> <li>To\u00e1n t\u1eed logic v\u00e0 quan h\u1ec7</li> </ul>"},{"location":"languages/vi/phase1/#vong-lap","title":"V\u00f2ng l\u1eb7p","text":"<ul> <li>for, while, do-while</li> <li>break, continue, v\u00f2ng l\u1eb7p l\u1ed3ng nhau</li> </ul>"},{"location":"languages/vi/phase1/#phuong-thuc-va-pham-vi","title":"Ph\u01b0\u01a1ng th\u1ee9c v\u00e0 ph\u1ea1m vi","text":"<ul> <li>Khai b\u00e1o, tham s\u1ed1, tr\u1ea3 v\u1ec1</li> <li>N\u1ea1p ch\u1ed3ng (Overloading)</li> <li>Bi\u1ebfn c\u1ee5c b\u1ed9 v\u00e0 thu\u1ed9c t\u00ednh l\u1edbp</li> </ul>"},{"location":"languages/vi/phase1/#mang","title":"M\u1ea3ng","text":"<ul> <li>Khai b\u00e1o, kh\u1edfi t\u1ea1o v\u00e0 thao t\u00e1c</li> <li>T\u00ecm ki\u1ebfm tuy\u1ebfn t\u00ednh v\u00e0 s\u1eafp x\u1ebfp th\u1ee7 c\u00f4ng</li> <li>Arrays.toString() \u0111\u1ec3 g\u1ee1 l\u1ed7i</li> </ul>"},{"location":"languages/vi/phase1/#chuoi-va-stringbuilder","title":"Chu\u1ed7i v\u00e0 StringBuilder","text":"<ul> <li>C\u00e1c ph\u01b0\u01a1ng th\u1ee9c ph\u1ed5 bi\u1ebfn</li> <li>T\u00ednh b\u1ea5t bi\u1ebfn v\u00e0 hi\u1ec7u su\u1ea5t</li> </ul>"},{"location":"languages/vi/phase1/#xu-ly-ngoai-le","title":"X\u1eed l\u00fd ngo\u1ea1i l\u1ec7","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw v\u00e0 throws</li> <li>T\u1ea1o ngo\u1ea1i l\u1ec7 t\u00f9y ch\u1ec9nh (v\u00ed d\u1ee5: throw new MyException)</li> </ul>"},{"location":"languages/vi/phase1/#cong-cu-thiet-yeu","title":"C\u00f4ng c\u1ee5 thi\u1ebft y\u1ebfu","text":"<ul> <li>Terminal: cd, ls, mkdir</li> <li>Git: init, add, commit, push, pull, branch, merge</li> <li>GitHub: t\u1ea1o kho l\u01b0u tr\u1eef, pull requests, sao ch\u00e9p (cloning)</li> </ul>"},{"location":"languages/vi/phase1/#du-an-cuoi-ky","title":"D\u1ef1 \u00e1n cu\u1ed1i k\u1ef3","text":"<ul> <li>M\u00e1y t\u00ednh \u0111\u01a1n gi\u1ea3n v\u00e0 Qu\u1ea3n l\u00fd t\u00e1c v\u1ee5</li> <li>Y\u00eau c\u1ea7u:</li> <li>S\u1eed d\u1ee5ng Git</li> <li>\u0110\u0103ng l\u00ean GitHub</li> <li>README gi\u1ea3i th\u00edch r\u00f5 r\u00e0ng</li> </ul>"},{"location":"languages/vi/phase1/#tai-nguyen","title":"T\u00e0i nguy\u00ean","text":"<ul> <li>MOOC from the University of Helsinki</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/vi/phase2/","title":"Giai \u0111o\u1ea1n 2 \u2013 L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (2\u20133 th\u00e1ng)","text":""},{"location":"languages/vi/phase2/#lop-oi-tuong-thuoc-tinh-va-phuong-thuc","title":"L\u1edbp, \u0110\u1ed1i t\u01b0\u1ee3ng, Thu\u1ed9c t\u00ednh v\u00e0 Ph\u01b0\u01a1ng th\u1ee9c","text":"<ul> <li>C\u1ea5u tr\u00fac l\u1edbp</li> <li>Kh\u1edfi t\u1ea1o \u0111\u1ed1i t\u01b0\u1ee3ng</li> <li>S\u1eed d\u1ee5ng this</li> <li>Th\u1ef1c h\u00e0nh t\u1ed1t: \u0111\u1eb7t t\u00ean, t\u1ed5 ch\u1ee9c m\u00e3</li> </ul>"},{"location":"languages/vi/phase2/#ong-goi-ke-thua-a-hinh-va-truu-tuong","title":"\u0110\u00f3ng g\u00f3i, K\u1ebf th\u1eeba, \u0110a h\u00ecnh v\u00e0 Tr\u1eebu t\u01b0\u1ee3ng","text":"<ul> <li>\u0110\u00f3ng g\u00f3i: private, getters/setters, x\u00e1c th\u1ef1c d\u1eef li\u1ec7u</li> <li>K\u1ebf th\u1eeba: extends, ghi \u0111\u00e8 (@Override)</li> <li>\u0110a h\u00ecnh: Ki\u1ec3u con, n\u1ea1p ch\u1ed3ng ph\u01b0\u01a1ng th\u1ee9c</li> <li>Tr\u1eebu t\u01b0\u1ee3ng: t\u1ed5ng quan, chu\u1ea9n b\u1ecb cho interfaces v\u00e0 abstract classes</li> </ul>"},{"location":"languages/vi/phase2/#interfaces-va-abstract-classes","title":"Interfaces v\u00e0 Abstract Classes","text":"<ul> <li>Interfaces: implements, default methods</li> <li>Abstract classes: ph\u01b0\u01a1ng th\u1ee9c tr\u1eebu t\u01b0\u1ee3ng v\u00e0 c\u1ee5 th\u1ec3</li> <li>S\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa interface v\u00e0 abstract class</li> </ul>"},{"location":"languages/vi/phase2/#ham-tao-khoi-khoi-tao-va-khoi-tinh","title":"H\u00e0m t\u1ea1o, Kh\u1ed1i kh\u1edfi t\u1ea1o v\u00e0 Kh\u1ed1i t\u0129nh","text":"<ul> <li>H\u00e0m t\u1ea1o m\u1eb7c \u0111\u1ecbnh v\u00e0 c\u00f3 tham s\u1ed1, g\u1ecdi v\u1edbi this()</li> <li>Kh\u1ed1i kh\u1edfi t\u1ea1o ({}) v\u00e0 kh\u1ed1i t\u0129nh (static {})</li> </ul>"},{"location":"languages/vi/phase2/#kieu-liet-ke-enumerations","title":"Ki\u1ec3u li\u1ec7t k\u00ea (Enumerations)","text":"<ul> <li>T\u1ea1o v\u00e0 s\u1eed d\u1ee5ng enum</li> <li>Ph\u01b0\u01a1ng th\u1ee9c v\u00e0 thu\u1ed9c t\u00ednh trong enum</li> </ul>"},{"location":"languages/vi/phase2/#bo-suu-tap-co-ban","title":"B\u1ed9 s\u01b0u t\u1eadp c\u01a1 b\u1ea3n","text":"<ul> <li>ArrayList: th\u00eam, x\u00f3a, l\u1eb7p (for, forEach, Iterator)</li> <li>HashMap: kh\u00f3a-gi\u00e1 tr\u1ecb, c\u00e1c thao t\u00e1c ph\u1ed5 bi\u1ebfn</li> <li>HashSet: lo\u1ea1i b\u1ecf tr\u00f9ng l\u1eb7p</li> <li>Gi\u1edbi thi\u1ec7u Queue v\u00e0 Stack (v\u00ed d\u1ee5: LinkedList nh\u01b0 queue/stack)</li> <li>Gi\u1edbi thi\u1ec7u Java Collections Framework</li> </ul>"},{"location":"languages/vi/phase2/#thuat-toan-co-ban","title":"Thu\u1eadt to\u00e1n c\u01a1 b\u1ea3n","text":"<ul> <li>T\u00ecm ki\u1ebfm tuy\u1ebfn t\u00ednh v\u00e0 nh\u1ecb ph\u00e2n</li> <li>S\u1eafp x\u1ebfp: Bubble Sort, Collections.sort()</li> <li>\u0110\u1ec7 quy: kh\u00e1i ni\u1ec7m v\u00e0 v\u00ed d\u1ee5 \u0111\u01a1n gi\u1ea3n (v\u00ed d\u1ee5: giai th\u1eeba, Fibonacci)</li> <li>Gi\u1edbi thi\u1ec7u v\u1ec1 \u0111\u1ed9 ph\u1ee9c t\u1ea1p (O(n), O(log n))</li> </ul>"},{"location":"languages/vi/phase2/#generics","title":"Generics","text":"<ul> <li>C\u00fa ph\u00e1p (), b\u1ed9 s\u01b0u t\u1eadp generic, ph\u01b0\u01a1ng th\u1ee9c generic <li>Gi\u1edbi h\u1ea1n (extends, super)</li>"},{"location":"languages/vi/phase2/#stream-api-gioi-thieu","title":"Stream API (Gi\u1edbi thi\u1ec7u)","text":"<ul> <li>Thao t\u00e1c c\u01a1 b\u1ea3n: filter, map, collect</li> <li>V\u00ed d\u1ee5 v\u1edbi ArrayList</li> </ul>"},{"location":"languages/vi/phase2/#kiem-thu-on-vi-gioi-thieu","title":"Ki\u1ec3m th\u1eed \u0111\u01a1n v\u1ecb (Gi\u1edbi thi\u1ec7u)","text":"<ul> <li>S\u1eed d\u1ee5ng c\u01a1 b\u1ea3n JUnit</li> <li>Vi\u1ebft test cases cho l\u1edbp v\u00e0 ph\u01b0\u01a1ng th\u1ee9c</li> <li>Gi\u1edbi thi\u1ec7u TDD (Test-Driven Development)</li> </ul>"},{"location":"languages/vi/phase2/#du-an-cuoi-ky","title":"D\u1ef1 \u00e1n cu\u1ed1i k\u1ef3","text":"<ul> <li>H\u1ec7 th\u1ed1ng th\u01b0 vi\u1ec7n</li> <li>L\u1edbp: Book, User, Library</li> <li>K\u1ebf th\u1eeba: DigitalBook v\u00e0 PhysicalBook</li> <li>B\u1ed9 s\u01b0u t\u1eadp: ArrayList cho s\u00e1ch, HashMap cho m\u01b0\u1ee3n s\u00e1ch</li> <li>\u0110\u00f3ng g\u00f3i: x\u00e1c th\u1ef1c d\u1eef li\u1ec7u</li> <li>Git: commit cho m\u1ed7i t\u00ednh n\u0103ng (v\u00ed d\u1ee5: <code>feature/book-management</code>)</li> <li>\u0110\u0103ng l\u00ean GitHub v\u1edbi README gi\u1ea3i th\u00edch r\u00f5 r\u00e0ng</li> </ul>"},{"location":"languages/vi/phase2/#tai-nguyen-cap-nhat","title":"T\u00e0i nguy\u00ean c\u1eadp nh\u1eadt","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java (S\u00e1ch)</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/vi/phase3/","title":"Giai \u0111o\u1ea1n 3 \u2013 L\u01b0u tr\u1eef d\u1eef li\u1ec7u v\u00e0 Streams (2\u20133 th\u00e1ng)","text":""},{"location":"languages/vi/phase3/#sql-co-ban","title":"SQL c\u01a1 b\u1ea3n","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Keys: kh\u00f3a ch\u00ednh v\u00e0 kh\u00f3a ngo\u1ea1i.  </li> <li>Chu\u1ea9n h\u00f3a: 1NF, 2NF, 3NF.  </li> <li>V\u00ed d\u1ee5: t\u1ea1o b\u1ea3ng cho s\u1ea3n ph\u1ea9m v\u00e0 danh m\u1ee5c.  </li> </ul>"},{"location":"languages/vi/phase3/#jdbc-va-connection-pool","title":"JDBC v\u00e0 Connection Pool","text":"<ul> <li>Classes: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>S\u1eed d\u1ee5ng Connection Pool (HikariCP).  </li> <li>Th\u1ef1c h\u00e0nh t\u1ed1t: <code>try-with-resources</code>, x\u1eed l\u00fd <code>SQLException</code>.  </li> </ul>"},{"location":"languages/vi/phase3/#hibernate-jpa-trong-thuc-te","title":"Hibernate + JPA trong th\u1ef1c t\u1ebf","text":"<ul> <li>Annotations: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>C\u1ea5u h\u00ecnh: <code>persistence.xml</code> ho\u1eb7c <code>application.properties</code>.  </li> <li>CRUD operations v\u1edbi <code>EntityManager</code>.  </li> <li>Gi\u1edbi thi\u1ec7u v\u1ec1 di chuy\u1ec3n c\u01a1 s\u1edf d\u1eef li\u1ec7u v\u1edbi Flyway ho\u1eb7c Liquibase.</li> </ul>"},{"location":"languages/vi/phase3/#gioi-thieu-ve-co-so-du-lieu-nosql","title":"Gi\u1edbi thi\u1ec7u v\u1ec1 c\u01a1 s\u1edf d\u1eef li\u1ec7u NoSQL","text":"<ul> <li>Kh\u00e1i ni\u1ec7m: documents, collections, kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng ngang.  </li> <li>MongoDB: thi\u1ebft l\u1eadp, CRUD operations v\u1edbi MongoRepository.  </li> <li>Spring Data MongoDB: t\u00edch h\u1ee3p v\u1edbi Spring Boot.  </li> <li>V\u00ed d\u1ee5: l\u01b0u tr\u1eef nh\u1eadt k\u00fd ho\u1ea1t \u0111\u1ed9ng h\u1ec7 th\u1ed1ng cho s\u1ea3n ph\u1ea9m trong MongoDB.</li> </ul>"},{"location":"languages/vi/phase3/#streams-va-lambda-expressions","title":"Streams v\u00e0 Lambda Expressions","text":"<ul> <li>Operations: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>V\u00ed d\u1ee5: l\u1ecdc s\u1ea3n ph\u1ea9m theo gi\u00e1, s\u1eafp x\u1ebfp theo t\u00ean.  </li> </ul>"},{"location":"languages/vi/phase3/#optional-va-functional-interfaces","title":"Optional v\u00e0 Functional Interfaces","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>Functional interfaces: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>V\u00ed d\u1ee5: s\u1eed d\u1ee5ng <code>Predicate</code> trong Streams \u0111\u1ec3 l\u1ecdc d\u1eef li\u1ec7u.  </li> </ul>"},{"location":"languages/vi/phase3/#bo-suu-tap-nang-cao","title":"B\u1ed9 s\u01b0u t\u1eadp n\u00e2ng cao","text":"<ul> <li>LinkedList: th\u00eam/x\u00f3a hi\u1ec7u qu\u1ea3.  </li> <li>TreeMap: c\u1eb7p kh\u00f3a-gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp.  </li> <li>PriorityQueue: h\u00e0ng \u0111\u1ee3i \u01b0u ti\u00ean.  </li> <li>LinkedHashMap v\u00e0 Deque (gi\u1edbi thi\u1ec7u).  </li> </ul>"},{"location":"languages/vi/phase3/#logging-slf4jlogback","title":"Logging (SLF4J/Logback)","text":"<ul> <li>C\u1ea5u h\u00ecnh SLF4J v\u1edbi Logback.  </li> <li>Levels: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>V\u00ed d\u1ee5: ghi nh\u1eadt k\u00fd c\u00e1c truy v\u1ea5n Hibernate.  </li> </ul>"},{"location":"languages/vi/phase3/#khai-niem-giao-dich-acid","title":"Kh\u00e1i ni\u1ec7m giao d\u1ecbch (ACID)","text":"<ul> <li>T\u00ednh nguy\u00ean t\u1eed, nh\u1ea5t qu\u00e1n, c\u00f4 l\u1eadp, b\u1ec1n v\u1eefng.  </li> <li>Giao d\u1ecbch v\u1edbi JDBC (<code>commit</code>, <code>rollback</code>) v\u00e0 Hibernate (<code>@Transactional</code>).  </li> </ul>"},{"location":"languages/vi/phase3/#chi-muc-va-ke-hoach-thuc-thi","title":"Ch\u1ec9 m\u1ee5c v\u00e0 k\u1ebf ho\u1ea1ch th\u1ef1c thi","text":"<ul> <li>Indexes: ch\u00ednh, duy nh\u1ea5t, t\u1ed5ng h\u1ee3p.  </li> <li>S\u1eed d\u1ee5ng EXPLAIN \u0111\u1ec3 t\u1ed1i \u01b0u h\u00f3a truy v\u1ea5n.  </li> <li>V\u00ed d\u1ee5: t\u1ea1o ch\u1ec9 m\u1ee5c cho c\u1ed9t th\u01b0\u1eddng xuy\u00ean \u0111\u01b0\u1ee3c t\u00ecm ki\u1ebfm.  </li> </ul>"},{"location":"languages/vi/phase3/#thao-tac-voi-tep-tuy-chon","title":"Thao t\u00e1c v\u1edbi t\u1ec7p (T\u00f9y ch\u1ecdn)","text":"<ul> <li>\u0110\u1ecdc v\u00e0 ghi v\u1edbi <code>Files</code>, <code>BufferedReader</code>.  </li> <li>V\u00ed d\u1ee5: xu\u1ea5t b\u00e1o c\u00e1o s\u1ea3n ph\u1ea9m sang CSV b\u1eb1ng Streams.  </li> </ul>"},{"location":"languages/vi/phase3/#kiem-thu-co-so-du-lieu-gioi-thieu","title":"Ki\u1ec3m th\u1eed c\u01a1 s\u1edf d\u1eef li\u1ec7u (Gi\u1edbi thi\u1ec7u)","text":"<ul> <li>Ki\u1ec3m th\u1eed t\u00edch h\u1ee3p v\u1edbi H2 v\u00e0 JUnit.  </li> <li>V\u00ed d\u1ee5: ki\u1ec3m th\u1eed CRUD operations v\u1edbi Hibernate.  </li> </ul>"},{"location":"languages/vi/phase3/#du-an-cuoi-ky","title":"D\u1ef1 \u00e1n cu\u1ed1i k\u1ef3","text":"<p>H\u1ec7 th\u1ed1ng qu\u1ea3n l\u00fd s\u1ea3n ph\u1ea9m - C\u01a1 s\u1edf d\u1eef li\u1ec7u: b\u1ea3ng Product v\u00e0 Category (quan h\u1ec7 1:N). - Java: c\u00e1c l\u1edbp v\u1edbi JPA (<code>Product</code>, <code>Category</code>), CRUD v\u1edbi Hibernate. - T\u00f9y ch\u1ecdn: l\u01b0u tr\u1eef nh\u1eadt k\u00fd thay \u0111\u1ed5i s\u1ea3n ph\u1ea9m trong MongoDB. - T\u00f9y ch\u1ecdn: l\u01b0u tr\u1eef c\u00e1c thu\u1ed9c t\u00ednh \u0111\u1ed9ng c\u1ee7a s\u1ea3n ph\u1ea9m (v\u00ed d\u1ee5: th\u00f4ng s\u1ed1 k\u1ef9 thu\u1eadt) trong MongoDB. - Streams: l\u1ecdc/s\u1eafp x\u1ebfp s\u1ea3n ph\u1ea9m (v\u00ed d\u1ee5: theo gi\u00e1 ho\u1eb7c danh m\u1ee5c). - Logging: gi\u00e1m s\u00e1t c\u00e1c ho\u1ea1t \u0111\u1ed9ng c\u01a1 s\u1edf d\u1eef li\u1ec7u. - Git: commit cho m\u1ed7i t\u00ednh n\u0103ng (v\u00ed d\u1ee5: <code>feature/crud</code>, <code>feature/streams</code>). - \u0110\u0103ng l\u00ean GitHub v\u1edbi README gi\u1ea3i th\u00edch r\u00f5 r\u00e0ng.  </p>"},{"location":"languages/vi/phase3/#tai-nguyen","title":"T\u00e0i nguy\u00ean","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/vi/phase4/","title":"Giai \u0111o\u1ea1n 4 \u2013 Frameworks v\u00e0 \u1ee8ng d\u1ee5ng Web (3\u20134 th\u00e1ng)","text":""},{"location":"languages/vi/phase4/#spring-boot-spring-core-va-spring-data-jpa","title":"Spring Boot, Spring Core v\u00e0 Spring Data JPA","text":"<ul> <li>Spring Core: Dependency injection (<code>@Bean</code>, <code>@Autowired</code>), IoC container.  </li> <li>Spring Boot: T\u1ef1 \u0111\u1ed9ng c\u1ea5u h\u00ecnh, starters (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>), <code>application.yml</code>.  </li> <li>Spring Data JPA: Repositories (<code>CrudRepository</code>, <code>JpaRepository</code>), truy v\u1ea5n v\u1edbi <code>@Query</code>, ph\u00e2n trang.  </li> <li>V\u00ed d\u1ee5: T\u1ea1o REST endpoints \u0111\u1ec3 qu\u1ea3n l\u00fd t\u00e1c v\u1ee5 (CRUD) trong \u1ee9ng d\u1ee5ng t\u00e1c v\u1ee5.  </li> </ul>"},{"location":"languages/vi/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>Kh\u00e1i ni\u1ec7m: X\u00e1c th\u1ef1c, ph\u00e2n quy\u1ec1n, b\u1ed9 l\u1ecdc b\u1ea3o m\u1eadt.  </li> <li>JWT: T\u1ea1o v\u00e0 x\u00e1c th\u1ef1c token, s\u1eed d\u1ee5ng <code>JwtAuthenticationFilter</code>.  </li> <li>OAuth2: C\u1ea5u h\u00ecnh Resource Server, t\u00edch h\u1ee3p v\u1edbi nh\u00e0 cung c\u1ea5p (v\u00ed d\u1ee5: Google).  </li> <li>V\u00ed d\u1ee5: B\u1ea3o v\u1ec7 c\u00e1c endpoints t\u00e1c v\u1ee5 v\u1edbi JWT v\u00e0 vai tr\u00f2 (<code>ADMIN</code>, <code>USER</code>).  </li> </ul>"},{"location":"languages/vi/phase4/#kiem-thu-on-vi-va-tich-hop","title":"Ki\u1ec3m th\u1eed \u0111\u01a1n v\u1ecb v\u00e0 t\u00edch h\u1ee3p","text":"<ul> <li>Ki\u1ec3m th\u1eed \u0111\u01a1n v\u1ecb: JUnit 5, Mockito (<code>@Mock</code>, <code>@InjectMocks</code>), ki\u1ec3m th\u1eed logic nghi\u1ec7p v\u1ee5.  </li> <li>Ki\u1ec3m th\u1eed t\u00edch h\u1ee3p: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, c\u01a1 s\u1edf d\u1eef li\u1ec7u H2 \u0111\u1ec3 ki\u1ec3m th\u1eed.  </li> <li>Testcontainers: Ki\u1ec3m th\u1eed v\u1edbi PostgreSQL trong container Docker.  </li> <li>V\u00ed d\u1ee5: Ki\u1ec3m th\u1eed c\u00e1c d\u1ecbch v\u1ee5 v\u00e0 endpoints c\u1ee7a \u1ee9ng d\u1ee5ng t\u00e1c v\u1ee5.  </li> </ul>"},{"location":"languages/vi/phase4/#restful-apis-va-tai-lieu-voi-swagger","title":"RESTful APIs v\u00e0 t\u00e0i li\u1ec7u v\u1edbi Swagger","text":"<ul> <li>REST: C\u00e1c ph\u01b0\u01a1ng th\u1ee9c HTTP, m\u00e3 tr\u1ea1ng th\u00e1i, nguy\u00ean t\u1eafc RESTful.  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>.  </li> <li>Swagger: C\u1ea5u h\u00ecnh springdoc-openapi, ch\u00fa th\u00edch v\u1edbi <code>@Operation</code>.  </li> <li>V\u00ed d\u1ee5: T\u00e0i li\u1ec7u h\u00f3a c\u00e1c endpoints c\u1ee7a \u1ee9ng d\u1ee5ng t\u00e1c v\u1ee5 v\u1edbi Swagger UI.  </li> </ul>"},{"location":"languages/vi/phase4/#gioi-thieu-ve-graphql","title":"Gi\u1edbi thi\u1ec7u v\u1ec1 GraphQL","text":"<ul> <li>Kh\u00e1i ni\u1ec7m: Queries, mutations, schema.  </li> <li>Spring Boot v\u1edbi GraphQL: Thi\u1ebft l\u1eadp v\u1edbi spring-boot-starter-graphql.  </li> <li>V\u00ed d\u1ee5: T\u1ea1o m\u1ed9t GraphQL query \u0111\u1ec3 li\u1ec7t k\u00ea c\u00e1c t\u00e1c v\u1ee5 theo tr\u1ea1ng th\u00e1i.  </li> </ul>"},{"location":"languages/vi/phase4/#tich-hop-frontend-co-ban","title":"T\u00edch h\u1ee3p Frontend c\u01a1 b\u1ea3n","text":"<ul> <li>Thymeleaf: M\u1eabu \u0111\u1ec3 hi\u1ec3n th\u1ecb c\u00e1c trang HTML v\u1edbi Spring Boot.  </li> <li>V\u00ed d\u1ee5: T\u1ea1o giao di\u1ec7n web \u0111\u01a1n gi\u1ea3n \u0111\u1ec3 xem v\u00e0 t\u1ea1o t\u00e1c v\u1ee5.  </li> </ul>"},{"location":"languages/vi/phase4/#cong-cu-xay-dung-maven-va-gradle","title":"C\u00f4ng c\u1ee5 x\u00e2y d\u1ef1ng: Maven v\u00e0 Gradle","text":"<ul> <li>Maven: C\u1ea5u tr\u00fac c\u1ee7a <code>pom.xml</code>, qu\u1ea3n l\u00fd ph\u1ee5 thu\u1ed9c, plugin.  </li> <li>Gradle: T\u1ec7p <code>build.gradle</code>, c\u00e1c t\u00e1c v\u1ee5, qu\u1ea3n l\u00fd ph\u1ee5 thu\u1ed9c.  </li> <li>V\u00ed d\u1ee5: C\u1ea5u h\u00ecnh \u1ee9ng d\u1ee5ng t\u00e1c v\u1ee5 v\u1edbi Maven v\u00e0 Gradle.  </li> </ul>"},{"location":"languages/vi/phase4/#trien-khai-du-an","title":"Tri\u1ec3n khai d\u1ef1 \u00e1n","text":"<ul> <li>N\u1ec1n t\u1ea3ng: Railway, Heroku, AWS (Elastic Beanstalk).  </li> <li>C\u00e1c b\u01b0\u1edbc: \u0110\u00f3ng g\u00f3i th\u00e0nh JAR, c\u1ea5u h\u00ecnh CI/CD v\u1edbi GitHub Actions.  </li> <li>V\u00ed d\u1ee5: Tri\u1ec3n khai \u1ee9ng d\u1ee5ng t\u00e1c v\u1ee5 tr\u00ean Railway v\u1edbi PostgreSQL.  </li> </ul>"},{"location":"languages/vi/phase4/#du-an-cuoi-ky","title":"D\u1ef1 \u00e1n cu\u1ed1i k\u1ef3","text":"<p>H\u1ec7 th\u1ed1ng qu\u1ea3n l\u00fd t\u00e1c v\u1ee5 - C\u01a1 s\u1edf d\u1eef li\u1ec7u: B\u1ea3ng <code>Task</code> (ti\u00eau \u0111\u1ec1, m\u00f4 t\u1ea3, tr\u1ea1ng th\u00e1i) v\u00e0 <code>User</code> (quan h\u1ec7 1:N). - Java: REST API v\u1edbi Spring Boot, Spring Data JPA cho CRUD. - B\u1ea3o m\u1eadt: X\u00e1c th\u1ef1c JWT, vai tr\u00f2 (<code>ADMIN</code>, <code>USER</code>). - Ki\u1ec3m th\u1eed: Ki\u1ec3m th\u1eed \u0111\u01a1n v\u1ecb (d\u1ecbch v\u1ee5) v\u00e0 ki\u1ec3m th\u1eed t\u00edch h\u1ee3p (endpoints v\u1edbi Testcontainers). - T\u00e0i li\u1ec7u: Swagger UI v\u1edbi m\u00f4 t\u1ea3 c\u00e1c endpoints. - T\u00f9y ch\u1ecdn: Th\u00eam GraphQL query \u0111\u1ec3 li\u1ec7t k\u00ea t\u00e1c v\u1ee5 v\u00e0 giao di\u1ec7n Thymeleaf \u0111\u1ec3 t\u01b0\u01a1ng t\u00e1c. - Git: Commit cho m\u1ed7i t\u00ednh n\u0103ng (v\u00ed d\u1ee5: <code>feature/rest-api</code>, <code>feature/security</code>). - \u0110\u0103ng l\u00ean GitHub v\u1edbi README (c\u1ea5u h\u00ecnh, endpoints, tri\u1ec3n khai).  </p>"},{"location":"languages/vi/phase4/#tai-nguyen","title":"T\u00e0i nguy\u00ean","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation</li> </ul>"},{"location":"languages/vi/phase5/","title":"Giai \u0111o\u1ea1n 5 \u2013 Ki\u1ebfn tr\u00fac v\u00e0 \u0110\u1ed3ng th\u1eddi (2\u20133 th\u00e1ng)","text":""},{"location":"languages/vi/phase5/#clean-code-va-nguyen-tac-solid","title":"Clean Code v\u00e0 Nguy\u00ean t\u1eafc SOLID","text":"<ul> <li>Clean Code: \u0110\u1eb7t t\u00ean r\u00f5 r\u00e0ng, h\u00e0m ng\u1eafn g\u1ecdn, b\u00ecnh lu\u1eadn h\u1eefu \u00edch, \u0111\u1ecbnh d\u1ea1ng nh\u1ea5t qu\u00e1n.  </li> <li>SOLID:  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>V\u00ed d\u1ee5: T\u00e1i c\u1ea5u tr\u00fac m\u1ed9t d\u1ecbch v\u1ee5 trong Task Manager \u0111\u1ec3 tu\u00e2n theo nguy\u00ean t\u1eafc SOLID.  </p>"},{"location":"languages/vi/phase5/#mau-thiet-ke","title":"M\u1eabu thi\u1ebft k\u1ebf","text":"<ul> <li>M\u1eabu: Factory (t\u1ea1o), Singleton (m\u1ed9t th\u1ec3 hi\u1ec7n duy nh\u1ea5t), Builder (x\u00e2y d\u1ef1ng \u0111\u1ed1i t\u01b0\u1ee3ng), Strategy (h\u00e0nh vi), Observer (s\u1ef1 ki\u1ec7n).  </li> <li>\u1ee8ng d\u1ee5ng: Ch\u1ecdn c\u00e1c m\u1eabu ph\u00f9 h\u1ee3p v\u1edbi ng\u1eef c\u1ea3nh d\u1ef1 \u00e1n.  </li> </ul> <p>V\u00ed d\u1ee5: S\u1eed d\u1ee5ng Strategy cho c\u00e1c thu\u1eadt to\u00e1n \u01b0u ti\u00ean t\u00e1c v\u1ee5 kh\u00e1c nhau.  </p>"},{"location":"languages/vi/phase5/#luong-va-ong-thoi","title":"Lu\u1ed3ng v\u00e0 \u0110\u1ed3ng th\u1eddi","text":"<ul> <li>Kh\u00e1i ni\u1ec7m: Thread, Runnable, ExecutorService, ForkJoinPool.  </li> <li>K\u1ef9 thu\u1eadt: T\u1ea1o v\u00e0 qu\u1ea3n l\u00fd pool lu\u1ed3ng, t\u00e1c v\u1ee5 b\u1ea5t \u0111\u1ed3ng b\u1ed9.  </li> </ul> <p>V\u00ed d\u1ee5: X\u1eed l\u00fd b\u00e1o c\u00e1o t\u00e1c v\u1ee5 song song v\u1edbi ExecutorService.  </p>"},{"location":"languages/vi/phase5/#ong-bo-hoa-va-van-e-ong-thoi","title":"\u0110\u1ed3ng b\u1ed9 h\u00f3a v\u00e0 V\u1ea5n \u0111\u1ec1 \u0110\u1ed3ng th\u1eddi","text":"<ul> <li>C\u01a1 ch\u1ebf: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>.  </li> <li>V\u1ea5n \u0111\u1ec1: Deadlock, race condition, starvation.  </li> </ul> <p>V\u00ed d\u1ee5: Tri\u1ec3n khai truy c\u1eadp an to\u00e0n v\u00e0o danh s\u00e1ch t\u00e1c v\u1ee5 chia s\u1ebb.  </p>"},{"location":"languages/vi/phase5/#gioi-thieu-ve-microservices","title":"Gi\u1edbi thi\u1ec7u v\u1ec1 Microservices","text":"<ul> <li>Kh\u00e1i ni\u1ec7m: Ki\u1ebfn tr\u00fac microservices, giao ti\u1ebfp REST, kh\u00e1m ph\u00e1 d\u1ecbch v\u1ee5.  </li> <li>C\u00f4ng c\u1ee5: Spring Cloud (v\u00ed d\u1ee5: Eureka \u0111\u1ec3 kh\u00e1m ph\u00e1 d\u1ecbch v\u1ee5).  </li> </ul> <p>V\u00ed d\u1ee5: Chia Task Manager th\u00e0nh c\u00e1c microservices (t\u00e1c v\u1ee5 v\u00e0 ng\u01b0\u1eddi d\u00f9ng).  </p>"},{"location":"languages/vi/phase5/#co-ban-ve-hang-oi-tin-nhan-tuy-chon","title":"C\u01a1 b\u1ea3n v\u1ec1 H\u00e0ng \u0111\u1ee3i Tin nh\u1eafn (T\u00f9y ch\u1ecdn)","text":"<ul> <li>Kh\u00e1i ni\u1ec7m: Publisher/subscriber, queues, topics.  </li> <li>RabbitMQ: Thi\u1ebft l\u1eadp, g\u1eedi v\u00e0 nh\u1eadn tin nh\u1eafn.  </li> </ul> <p>V\u00ed d\u1ee5: Th\u00f4ng b\u00e1o ng\u01b0\u1eddi d\u00f9ng v\u1ec1 c\u1eadp nh\u1eadt t\u00e1c v\u1ee5 qua RabbitMQ.  </p>"},{"location":"languages/vi/phase5/#toi-uu-hoa-hieu-suat","title":"T\u1ed1i \u01b0u h\u00f3a Hi\u1ec7u su\u1ea5t","text":"<ul> <li>Caching: Spring Cache v\u1edbi Redis \u0111\u1ec3 gi\u1ea3m truy c\u1eadp c\u01a1 s\u1edf d\u1eef li\u1ec7u.  </li> <li>Tuning JVM: Kh\u00e1i ni\u1ec7m c\u01a1 b\u1ea3n (heap, garbage collection).  </li> </ul> <p>V\u00ed d\u1ee5: Tri\u1ec3n khai cache cho c\u00e1c truy v\u1ea5n th\u01b0\u1eddng xuy\u00ean trong h\u1ec7 th\u1ed1ng t\u00e1c v\u1ee5.  </p>"},{"location":"languages/vi/phase5/#gioi-thieu-ve-devopscloud-docker-va-cicd","title":"Gi\u1edbi thi\u1ec7u v\u1ec1 DevOps/Cloud: Docker v\u00e0 CI/CD","text":"<ul> <li>Docker: Containers, images, Dockerfile, Docker Compose.  </li> <li>CI/CD: C\u1ea5u h\u00ecnh pipeline v\u1edbi GitHub Actions \u0111\u1ec3 x\u00e2y d\u1ef1ng v\u00e0 tri\u1ec3n khai.  </li> </ul> <p>V\u00ed d\u1ee5: T\u1ea1o Dockerfile cho \u1ee9ng d\u1ee5ng t\u00e1c v\u1ee5 v\u00e0 tri\u1ec3n khai qua GitHub Actions.  </p>"},{"location":"languages/vi/phase5/#quan-sat-observability","title":"Quan s\u00e1t (Observability)","text":"<ul> <li>C\u00f4ng c\u1ee5: Prometheus (metrics), Grafana (h\u00ecnh \u1ea3nh h\u00f3a), ELK Stack (logs).  </li> <li>Kh\u00e1i ni\u1ec7m: Gi\u00e1m s\u00e1t hi\u1ec7u su\u1ea5t, logs t\u1eadp trung, c\u1ea3nh b\u00e1o.  </li> </ul> <p>V\u00ed d\u1ee5: Gi\u00e1m s\u00e1t th\u1eddi gian ph\u1ea3n h\u1ed3i API t\u00e1c v\u1ee5 v\u1edbi Prometheus v\u00e0 Grafana.  </p>"},{"location":"languages/vi/phase5/#bao-mat-owasp-top-ten","title":"B\u1ea3o m\u1eadt: OWASP Top Ten","text":"<ul> <li>Kh\u00e1i ni\u1ec7m: Injection, l\u1ed7i x\u00e1c th\u1ef1c, l\u1ed9 d\u1eef li\u1ec7u nh\u1ea1y c\u1ea3m.  </li> <li>Th\u1ef1c h\u00e0nh: X\u00e1c th\u1ef1c \u0111\u1ea7u v\u00e0o, l\u00e0m s\u1ea1ch d\u1eef li\u1ec7u, c\u1ea5u h\u00ecnh an to\u00e0n.  </li> </ul> <p>V\u00ed d\u1ee5: B\u1ea3o v\u1ec7 API t\u00e1c v\u1ee5 kh\u1ecfi SQL injection v\u00e0 XSS.  </p>"},{"location":"languages/vi/phase5/#du-an-cuoi-ky","title":"D\u1ef1 \u00e1n cu\u1ed1i k\u1ef3","text":"<p>H\u1ec7 th\u1ed1ng Qu\u1ea3n l\u00fd T\u00e1c v\u1ee5 N\u00e2ng cao - Backend: N\u00e2ng c\u1ea5p API t\u00e1c v\u1ee5 (Giai \u0111o\u1ea1n 4) v\u1edbi microservices (t\u00e1c v\u1ee5 v\u00e0 ng\u01b0\u1eddi d\u00f9ng). - Ki\u1ebfn tr\u00fac: T\u00e1i c\u1ea5u tr\u00fac v\u1edbi Clean Code, SOLID v\u00e0 c\u00e1c m\u1eabu thi\u1ebft k\u1ebf (v\u00ed d\u1ee5: Strategy). - \u0110\u1ed3ng th\u1eddi: X\u1eed l\u00fd b\u00e1o c\u00e1o song song v\u1edbi ExecutorService. - T\u00f9y ch\u1ecdn: Th\u00eam giao ti\u1ebfp gi\u1eefa c\u00e1c microservices qua RabbitMQ v\u00e0 caching v\u1edbi Redis cho c\u00e1c truy v\u1ea5n th\u01b0\u1eddng xuy\u00ean. - DevOps: \u0110\u00f3ng g\u00f3i trong Docker, c\u1ea5u h\u00ecnh CI/CD v\u1edbi GitHub Actions. - Quan s\u00e1t: Th\u00eam Prometheus v\u00e0 Grafana cho metrics. - B\u1ea3o m\u1eadt: Tri\u1ec3n khai c\u00e1c bi\u1ec7n ph\u00e1p b\u1ea3o v\u1ec7 kh\u1ecfi OWASP Top Ten. - Git: Commit cho m\u1ed7i t\u00ednh n\u0103ng (v\u00ed d\u1ee5: <code>feature/microservices</code>, <code>feature/concurrency</code>). - \u0110\u0103ng l\u00ean GitHub v\u1edbi README chi ti\u1ebft (c\u1ea5u h\u00ecnh, ki\u1ebfn tr\u00fac, tri\u1ec3n khai).  </p>"},{"location":"languages/vi/phase5/#tai-nguyen","title":"T\u00e0i nguy\u00ean","text":"<ul> <li>The Pragmatic Programmer (S\u00e1ch)  </li> <li>Effective Java (S\u00e1ch)  </li> <li>Java Concurrency in Practice (S\u00e1ch)  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation</li> </ul>"},{"location":"languages/vi/phase6/","title":"Giai \u0111o\u1ea1n 6 \u2013 D\u1ef1 \u00e1n cu\u1ed1i k\u1ef3 (Li\u00ean t\u1ee5c)","text":""},{"location":"languages/vi/phase6/#du-an-1-crud-hoan-chinh-voi-xac-thuc","title":"D\u1ef1 \u00e1n 1: CRUD ho\u00e0n ch\u1ec9nh v\u1edbi X\u00e1c th\u1ef1c","text":"<ul> <li>M\u1ee5c ti\u00eau: X\u00e2y d\u1ef1ng m\u1ed9t RESTful API m\u1ea1nh m\u1ebd v\u1edbi x\u00e1c th\u1ef1c an to\u00e0n v\u00e0 ki\u1ec3m th\u1eed.  </li> <li>C\u00f4ng ngh\u1ec7: Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers.  </li> <li>T\u00ednh n\u0103ng: CRUD cho c\u00e1c th\u1ef1c th\u1ec3 (v\u00ed d\u1ee5: t\u00e1c v\u1ee5, ng\u01b0\u1eddi d\u00f9ng), x\u00e1c th\u1ef1c v\u1edbi vai tr\u00f2 (ADMIN, USER), t\u00e0i li\u1ec7u v\u1edbi Swagger.  </li> <li>T\u00f9y ch\u1ecdn: Th\u00eam giao di\u1ec7n Thymeleaf \u0111\u1ec3 xem/qu\u1ea3n l\u00fd t\u00e1c v\u1ee5.  </li> <li>V\u00ed d\u1ee5: API \u0111\u1ec3 qu\u1ea3n l\u00fd d\u1ef1 \u00e1n (th\u1ef1c th\u1ec3: <code>Project</code>, <code>Task</code>, <code>User</code>) v\u1edbi c\u00e1c endpoint \u0111\u01b0\u1ee3c b\u1ea3o v\u1ec7.  </li> </ul>"},{"location":"languages/vi/phase6/#du-an-2-tai-len-tep","title":"D\u1ef1 \u00e1n 2: T\u1ea3i l\u00ean t\u1ec7p","text":"<ul> <li>M\u1ee5c ti\u00eau: Th\u00eam ch\u1ee9c n\u0103ng t\u1ea3i l\u00ean t\u1ec7p v\u00e0o API t\u1eeb D\u1ef1 \u00e1n 1.  </li> <li>C\u00f4ng ngh\u1ec7: Spring Boot (<code>MultipartFile</code>), Amazon S3 ho\u1eb7c l\u01b0u tr\u1eef c\u1ee5c b\u1ed9, x\u00e1c th\u1ef1c t\u1ec7p.  </li> <li>T\u00ednh n\u0103ng: T\u1ea3i l\u00ean h\u00ecnh \u1ea3nh/t\u00e0i li\u1ec7u li\u00ean quan \u0111\u1ebfn t\u00e1c v\u1ee5, x\u00e1c th\u1ef1c lo\u1ea1i/k\u00edch th\u01b0\u1edbc.  </li> <li>V\u00ed d\u1ee5: Cho ph\u00e9p t\u1ea3i l\u00ean t\u1ec7p \u0111\u00ednh k\u00e8m (v\u00ed d\u1ee5: PDF, PNG) cho t\u00e1c v\u1ee5 trong API.  </li> </ul>"},{"location":"languages/vi/phase6/#du-an-3-trien-khai-tren-am-may","title":"D\u1ef1 \u00e1n 3: Tri\u1ec3n khai tr\u00ean \u0111\u00e1m m\u00e2y","text":"<ul> <li>M\u1ee5c ti\u00eau: Tri\u1ec3n khai API l\u00ean n\u1ec1n t\u1ea3ng \u0111\u00e1m m\u00e2y v\u1edbi CI/CD.  </li> <li>C\u00f4ng ngh\u1ec7: Railway, Heroku, ho\u1eb7c AWS (Elastic Beanstalk), GitHub Actions, Docker.  </li> <li>T\u00ednh n\u0103ng: \u0110\u00f3ng g\u00f3i th\u00e0nh JAR/Docker, c\u1ea5u h\u00ecnh bi\u1ebfn m\u00f4i tr\u01b0\u1eddng, t\u1ef1 \u0111\u1ed9ng h\u00f3a tri\u1ec3n khai.  </li> <li>T\u00f9y ch\u1ecdn: Tri\u1ec3n khai caching v\u1edbi Redis \u0111\u1ec3 t\u1ed1i \u01b0u h\u00f3a c\u00e1c truy v\u1ea5n th\u01b0\u1eddng xuy\u00ean.  </li> <li>V\u00ed d\u1ee5: Tri\u1ec3n khai API d\u1ef1 \u00e1n tr\u00ean Railway v\u1edbi PostgreSQL v\u00e0 CI/CD.  </li> </ul>"},{"location":"languages/vi/phase6/#du-an-4-microservices","title":"D\u1ef1 \u00e1n 4: Microservices","text":"<ul> <li>M\u1ee5c ti\u00eau: Chia API t\u1eeb D\u1ef1 \u00e1n 1 th\u00e0nh c\u00e1c microservices \u0111\u01b0\u1ee3c \u0111i\u1ec1u ph\u1ed1i.  </li> <li>C\u00f4ng ngh\u1ec7: Spring Cloud (Eureka, Gateway), Docker Compose, REST \u0111\u1ec3 giao ti\u1ebfp.  </li> <li>T\u00ednh n\u0103ng: Microservices cho <code>Tasks</code> v\u00e0 <code>Users</code>, v\u1edbi kh\u00e1m ph\u00e1 d\u1ecbch v\u1ee5.  </li> <li>T\u00f9y ch\u1ecdn: S\u1eed d\u1ee5ng RabbitMQ \u0111\u1ec3 giao ti\u1ebfp b\u1ea5t \u0111\u1ed3ng b\u1ed9 gi\u1eefa c\u00e1c microservices.  </li> <li>V\u00ed d\u1ee5: T\u00e1ch logic t\u00e1c v\u1ee5 v\u00e0 ng\u01b0\u1eddi d\u00f9ng th\u00e0nh hai d\u1ecbch v\u1ee5, \u0111\u01b0\u1ee3c \u0111i\u1ec1u ph\u1ed1i v\u1edbi Docker.  </li> </ul>"},{"location":"languages/vi/phase6/#du-an-5-tich-hop-api-ben-ngoai","title":"D\u1ef1 \u00e1n 5: T\u00edch h\u1ee3p API b\u00ean ngo\u00e0i","text":"<ul> <li>M\u1ee5c ti\u00eau: S\u1eed d\u1ee5ng API b\u00ean ngo\u00e0i \u0111\u1ec3 n\u00e2ng cao ch\u1ee9c n\u0103ng.  </li> <li>C\u00f4ng ngh\u1ec7: Spring RestTemplate ho\u1eb7c WebClient, x\u00e1c th\u1ef1c API (v\u00ed d\u1ee5: OAuth2).  </li> <li>T\u00ednh n\u0103ng: T\u00edch h\u1ee3p v\u1edbi API c\u00f4ng khai (v\u00ed d\u1ee5: g\u1eedi th\u00f4ng b\u00e1o qua email v\u1edbi SendGrid).  </li> <li>T\u00f9y ch\u1ecdn: Th\u00eam GraphQL query \u0111\u1ec3 truy xu\u1ea5t t\u00e1c v\u1ee5/ng\u01b0\u1eddi d\u00f9ng v\u00e0 l\u01b0u tr\u1eef metadata trong MongoDB.  </li> <li>V\u00ed d\u1ee5: Th\u00eam th\u00f4ng b\u00e1o email khi ho\u00e0n th\u00e0nh t\u00e1c v\u1ee5.  </li> </ul>"},{"location":"languages/vi/phase6/#thuc-hanh-tot-cho-portfolio","title":"Th\u1ef1c h\u00e0nh t\u1ed1t cho Portfolio","text":"<ul> <li>Git: Commit cho m\u1ed7i t\u00ednh n\u0103ng (v\u00ed d\u1ee5: <code>feature/crud</code>, <code>feature/upload</code>), c\u00e1c nh\u00e1nh r\u00f5 r\u00e0ng.  </li> <li>T\u00e0i li\u1ec7u: README v\u1edbi m\u00f4 t\u1ea3, thi\u1ebft l\u1eadp, endpoints, tri\u1ec3n khai v\u00e0 \u1ea3nh ch\u1ee5p m\u00e0n h\u00ecnh.  </li> <li>\u0110\u0103ng t\u1ea3i: L\u01b0u tr\u1eef tr\u00ean GitHub v\u1edbi gi\u1ea5y ph\u00e9p m\u00e3 ngu\u1ed3n m\u1edf (v\u00ed d\u1ee5: MIT).  </li> </ul>"},{"location":"languages/vi/phase6/#tai-nguyen","title":"T\u00e0i nguy\u00ean","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"},{"location":"languages/zh/phase1/","title":"\u7b2c\u4e00\u9636\u6bb5 - Java\u57fa\u7840\u4e0e\u6838\u5fc3\u6280\u80fd\uff082-3\u4e2a\u6708\uff09","text":""},{"location":"languages/zh/phase1/#_1","title":"\u7f16\u7a0b\u903b\u8f91\u4e0e\u7b97\u6cd5","text":"<ul> <li>\u95ee\u9898\u5206\u89e3</li> <li>\u7ec3\u4e60\uff1a\u5e73\u5747\u503c\u3001\u5947\u5076\u6570\u3001\u6392\u5e8f</li> </ul>"},{"location":"languages/zh/phase1/#_2","title":"\u73af\u5883\u914d\u7f6e","text":"<ul> <li>\u5b89\u88c5JDK</li> <li>IDE\uff08IntelliJ\u6216Eclipse\uff09</li> <li>\u57fa\u672cdebugging</li> </ul>"},{"location":"languages/zh/phase1/#java","title":"Java\u57fa\u672c\u8bed\u6cd5","text":"<ul> <li>\u7a0b\u5e8f\u7ed3\u6784\uff08class, main\uff09</li> <li>\u547d\u540d\u89c4\u8303</li> <li>\u6ce8\u91ca</li> </ul>"},{"location":"languages/zh/phase1/#_3","title":"\u6570\u636e\u7c7b\u578b\u4e0e\u53d8\u91cf","text":"<ul> <li>\u57fa\u672c\u7c7b\u578b\u548c\u975e\u57fa\u672c\u7c7b\u578b</li> <li>\u58f0\u660e\u3001\u521d\u59cb\u5316\u3001\u5e38\u91cf</li> <li>Casting\u4e0e\u6bd4\u8f83\uff08<code>==</code> vs <code>.equals()</code>\uff09</li> </ul>"},{"location":"languages/zh/phase1/#_4","title":"\u8f93\u5165\u4e0e\u8f93\u51fa","text":"<ul> <li>Scanner</li> <li>System.out.println / printf</li> </ul>"},{"location":"languages/zh/phase1/#_5","title":"\u63a7\u5236\u7ed3\u6784","text":"<ul> <li>if, else if, else, switch</li> <li>\u903b\u8f91\u8fd0\u7b97\u7b26\u4e0e\u5173\u7cfb\u8fd0\u7b97\u7b26</li> </ul>"},{"location":"languages/zh/phase1/#_6","title":"\u5faa\u73af","text":"<ul> <li>for, while, do-while</li> <li>break, continue, \u5d4c\u5957\u5faa\u73af</li> </ul>"},{"location":"languages/zh/phase1/#_7","title":"\u65b9\u6cd5\u4e0e\u4f5c\u7528\u57df","text":"<ul> <li>\u58f0\u660e\u3001\u53c2\u6570\u3001return</li> <li>Overloading</li> <li>\u5c40\u90e8\u53d8\u91cf\u4e0e\u7c7b\u5c5e\u6027</li> </ul>"},{"location":"languages/zh/phase1/#_8","title":"\u6570\u7ec4","text":"<ul> <li>\u58f0\u660e\u3001\u521d\u59cb\u5316\u4e0e\u64cd\u4f5c</li> <li>\u7ebf\u6027\u641c\u7d22\u4e0e\u624b\u52a8\u6392\u5e8f</li> <li>Arrays.toString() \u7528\u4e8edebugging</li> </ul>"},{"location":"languages/zh/phase1/#stringsstringbuilder","title":"Strings\u4e0eStringBuilder","text":"<ul> <li>\u5e38\u7528\u65b9\u6cd5</li> <li>Immutability\u4e0e\u6027\u80fd</li> </ul>"},{"location":"languages/zh/phase1/#_9","title":"\u5f02\u5e38\u5904\u7406","text":"<ul> <li>try/catch/finally</li> <li>Checked vs Unchecked</li> <li>throw\u4e0ethrows</li> <li>\u521b\u5efa\u81ea\u5b9a\u4e49\u5f02\u5e38\uff08\u4f8b\u5982\uff0cthrow new MyException\uff09</li> </ul>"},{"location":"languages/zh/phase1/#_10","title":"\u57fa\u672c\u5de5\u5177","text":"<ul> <li>Terminal\uff1acd, ls, mkdir</li> <li>Git\uff1ainit, add, commit, push, pull, branch, merge</li> <li>GitHub\uff1a\u521b\u5efa\u4ed3\u5e93\u3001pull requests\u3001\u514b\u9686</li> </ul>"},{"location":"languages/zh/phase1/#_11","title":"\u6700\u7ec8\u9879\u76ee","text":"<ul> <li>\u7b80\u5355\u8ba1\u7b97\u5668\u4e0e\u4efb\u52a1\u7ba1\u7406\u5668</li> <li>\u8981\u6c42\uff1a</li> <li>\u4f7f\u7528Git</li> <li>\u5728GitHub\u4e0a\u53d1\u5e03</li> <li>\u8bf4\u660e\u6027README</li> </ul>"},{"location":"languages/zh/phase1/#_12","title":"\u8d44\u6e90","text":"<ul> <li>\u8d6b\u5c14\u8f9b\u57fa\u5927\u5b66MOOC</li> <li>Beecrowd</li> <li>HackerRank</li> <li>Oracle Java Tutorials</li> <li>Git - The Simple Guide</li> <li>Exercism - Java Track</li> </ul>"},{"location":"languages/zh/phase2/","title":"\u7b2c\u4e8c\u9636\u6bb5 \u2013 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff082-3\u4e2a\u6708\uff09","text":""},{"location":"languages/zh/phase2/#_1","title":"\u7c7b\u3001\u5bf9\u8c61\u3001\u5c5e\u6027\u548c\u65b9\u6cd5","text":"<ul> <li>\u7c7b\u7ed3\u6784</li> <li>\u5bf9\u8c61\u5b9e\u4f8b\u5316</li> <li>\u4f7f\u7528 this</li> <li>\u6700\u4f73\u5b9e\u8df5\uff1a\u547d\u540d\u3001\u4ee3\u7801\u7ec4\u7ec7</li> </ul>"},{"location":"languages/zh/phase2/#_2","title":"\u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001\u548c\u62bd\u8c61","text":"<ul> <li>Encapsulation\uff1aprivate, getters/setters, \u9a8c\u8bc1</li> <li>Inheritance\uff1aextends, overriding (@Override)</li> <li>Polymorphism\uff1a\u5b50\u7c7b\u578b, method overloading</li> <li>Abstraction\uff1a\u6982\u8ff0\uff0c\u51c6\u5907\u4f7f\u7528\u63a5\u53e3\u548c\u62bd\u8c61\u7c7b</li> </ul>"},{"location":"languages/zh/phase2/#_3","title":"\u63a5\u53e3\u548c\u62bd\u8c61\u7c7b","text":"<ul> <li>Interfaces\uff1aimplements, default methods</li> <li>Abstract classes\uff1a\u62bd\u8c61\u65b9\u6cd5\u548c\u5177\u4f53\u65b9\u6cd5</li> <li>\u63a5\u53e3\u4e0e\u62bd\u8c61\u7c7b\u7684\u533a\u522b</li> </ul>"},{"location":"languages/zh/phase2/#_4","title":"\u6784\u9020\u51fd\u6570\u3001\u521d\u59cb\u5316\u5668\u548c\u9759\u6001\u5757","text":"<ul> <li>\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u548c\u53c2\u6570\u5316\u6784\u9020\u51fd\u6570\uff0c\u4f7f\u7528 this() \u8c03\u7528</li> <li>\u521d\u59cb\u5316\u5757 ({}) \u548c\u9759\u6001\u5757 (static {})</li> </ul>"},{"location":"languages/zh/phase2/#_5","title":"\u679a\u4e3e","text":"<ul> <li>\u521b\u5efa\u548c\u4f7f\u7528 enum</li> <li>\u679a\u4e3e\u4e2d\u7684\u65b9\u6cd5\u548c\u5c5e\u6027</li> </ul>"},{"location":"languages/zh/phase2/#_6","title":"\u57fa\u672c\u96c6\u5408","text":"<ul> <li>ArrayList\uff1a\u6dfb\u52a0\u3001\u5220\u9664\u3001\u8fed\u4ee3\uff08for, forEach, Iterator\uff09</li> <li>HashMap\uff1a\u952e\u503c\u5bf9\uff0c\u5e38\u89c1\u64cd\u4f5c</li> <li>HashSet\uff1a\u6d88\u9664\u91cd\u590d</li> <li>\u961f\u5217\u548c\u5806\u6808\u4ecb\u7ecd\uff08\u4f8b\u5982\uff0cLinkedList \u4f5c\u4e3a queue/stack\uff09</li> <li>Java Collections Framework \u4ecb\u7ecd</li> </ul>"},{"location":"languages/zh/phase2/#_7","title":"\u57fa\u672c\u7b97\u6cd5","text":"<ul> <li>\u7ebf\u6027\u641c\u7d22\u548c\u4e8c\u5206\u641c\u7d22</li> <li>Sorting\uff1aBubble Sort, Collections.sort()</li> <li>Recursion\uff1a\u6982\u5ff5\u548c\u7b80\u5355\u793a\u4f8b\uff08\u4f8b\u5982\uff0c\u9636\u4e58\u3001\u6590\u6ce2\u90a3\u5951\uff09</li> <li>\u590d\u6742\u5ea6\u4ecb\u7ecd\uff08O(n), O(log n)\uff09</li> </ul>"},{"location":"languages/zh/phase2/#_8","title":"\u6cdb\u578b","text":"<ul> <li>\u8bed\u6cd5 ()\uff0c\u6cdb\u578b\u96c6\u5408\uff0c\u6cdb\u578b\u65b9\u6cd5 <li>\u8fb9\u754c\uff08extends, super\uff09</li>"},{"location":"languages/zh/phase2/#stream-api","title":"Stream API\uff08\u4ecb\u7ecd\uff09","text":"<ul> <li>\u57fa\u672c\u64cd\u4f5c\uff1afilter, map, collect</li> <li>\u4f7f\u7528 ArrayList \u7684\u793a\u4f8b</li> </ul>"},{"location":"languages/zh/phase2/#_9","title":"\u5355\u5143\u6d4b\u8bd5\uff08\u4ecb\u7ecd\uff09","text":"<ul> <li>JUnit \u7684\u57fa\u672c\u4f7f\u7528</li> <li>\u4e3a\u7c7b\u548c\u65b9\u6cd5\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b</li> <li>TDD\uff08Test-Driven Development\uff09\u4ecb\u7ecd</li> </ul>"},{"location":"languages/zh/phase2/#_10","title":"\u6700\u7ec8\u9879\u76ee","text":"<ul> <li>\u56fe\u4e66\u9986\u7cfb\u7edf</li> <li>\u7c7b\uff1aBook, User, Library</li> <li>\u7ee7\u627f\uff1aDigitalBook \u548c PhysicalBook</li> <li>\u96c6\u5408\uff1aArrayList \u7528\u4e8e\u4e66\u7c4d\uff0cHashMap \u7528\u4e8e\u501f\u9605</li> <li>\u5c01\u88c5\uff1a\u6570\u636e\u9a8c\u8bc1</li> <li>Git\uff1a\u6309\u529f\u80fd\u63d0\u4ea4\uff08\u4f8b\u5982\uff0c<code>feature/book-management</code>\uff09</li> <li>\u5728 GitHub \u4e0a\u53d1\u5e03\uff0c\u9644\u5e26\u8bf4\u660e\u6027 README</li> </ul>"},{"location":"languages/zh/phase2/#_11","title":"\u66f4\u65b0\u8d44\u6e90","text":"<ul> <li>Oracle Java Tutorials (OOP)</li> <li>Baeldung Java OOP</li> <li>LeetCode</li> <li>HackerRank</li> <li>Head First Java\uff08\u4e66\u7c4d\uff09</li> <li>JUnit Tutorial Baeldung</li> <li>Khan Academy - Algorithms</li> </ul>"},{"location":"languages/zh/phase3/","title":"\u7b2c\u4e09\u9636\u6bb5 \u2013 \u6570\u636e\u6301\u4e45\u5316\u4e0eStreams\uff082-3\u4e2a\u6708\uff09","text":""},{"location":"languages/zh/phase3/#sql","title":"\u57fa\u672cSQL","text":"<ul> <li>DDL: <code>CREATE</code>, <code>ALTER</code>.  </li> <li>DML: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.  </li> <li>Joins: <code>INNER</code>, <code>LEFT</code>, <code>RIGHT</code>.  </li> <li>Keys: \u4e3b\u952e\u548c\u5916\u952e.  </li> <li>Normalization: 1NF, 2NF, 3NF.  </li> <li>\u793a\u4f8b: \u4e3a\u4ea7\u54c1\u548c\u7c7b\u522b\u521b\u5efa\u8868.  </li> </ul>"},{"location":"languages/zh/phase3/#jdbcconnection-pool","title":"JDBC\u4e0eConnection Pool","text":"<ul> <li>Classes: <code>Connection</code>, <code>Statement</code>, <code>PreparedStatement</code>, <code>ResultSet</code>.  </li> <li>\u4f7f\u7528Connection Pool (HikariCP).  </li> <li>\u6700\u4f73\u5b9e\u8df5: <code>try-with-resources</code>, \u5904\u7406<code>SQLException</code>.  </li> </ul>"},{"location":"languages/zh/phase3/#hibernate-jpa","title":"Hibernate + JPA\u5b9e\u8df5","text":"<ul> <li>Annotations: <code>@Entity</code>, <code>@Id</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>.  </li> <li>Configuration: <code>persistence.xml</code> \u6216 <code>application.properties</code>.  </li> <li>\u4f7f\u7528<code>EntityManager</code>\u8fdb\u884cCRUD\u64cd\u4f5c.  </li> <li>\u6570\u636e\u5e93\u8fc1\u79fb\u4ecb\u7ecd\uff0c\u4f7f\u7528Flyway\u6216Liquibase.</li> </ul>"},{"location":"languages/zh/phase3/#nosql","title":"NoSQL\u6570\u636e\u5e93\u4ecb\u7ecd","text":"<ul> <li>\u6982\u5ff5: \u6587\u6863\u3001\u96c6\u5408\u3001\u6c34\u5e73\u6269\u5c55.  </li> <li>MongoDB: \u8bbe\u7f6e\uff0cCRUD\u64cd\u4f5c\u4f7f\u7528MongoRepository.  </li> <li>Spring Data MongoDB: \u4e0eSpring Boot\u96c6\u6210.  </li> <li>\u793a\u4f8b: \u5728MongoDB\u4e2d\u5b58\u50a8\u4ea7\u54c1\u7cfb\u7edf\u6d3b\u52a8\u65e5\u5fd7.</li> </ul>"},{"location":"languages/zh/phase3/#streamslambda-expressions","title":"Streams\u4e0eLambda Expressions","text":"<ul> <li>\u64cd\u4f5c: <code>filter</code>, <code>map</code>, <code>sorted</code>, <code>collect</code>, <code>forEach</code>, <code>reduce</code>.  </li> <li>\u793a\u4f8b: \u6309\u4ef7\u683c\u8fc7\u6ee4\u4ea7\u54c1\uff0c\u6309\u540d\u79f0\u6392\u5e8f.  </li> </ul>"},{"location":"languages/zh/phase3/#optionalfunctional-interfaces","title":"Optional\u4e0eFunctional Interfaces","text":"<ul> <li><code>Optional</code>: <code>orElse</code>, <code>ifPresent</code>, <code>orElseThrow</code>.  </li> <li>Functional interfaces: <code>Function</code>, <code>Predicate</code>, <code>Consumer</code>.  </li> <li>\u793a\u4f8b: \u5728Streams\u4e2d\u4f7f\u7528<code>Predicate</code>\u8fc7\u6ee4\u6570\u636e.  </li> </ul>"},{"location":"languages/zh/phase3/#_1","title":"\u9ad8\u7ea7\u96c6\u5408","text":"<ul> <li>LinkedList: \u9ad8\u6548\u63d2\u5165/\u5220\u9664.  </li> <li>TreeMap: \u6709\u5e8f\u952e\u503c\u5bf9.  </li> <li>PriorityQueue: \u4f18\u5148\u7ea7\u961f\u5217.  </li> <li>LinkedHashMap \u548c Deque (\u4ecb\u7ecd).  </li> </ul>"},{"location":"languages/zh/phase3/#logging-slf4jlogback","title":"Logging (SLF4J/Logback)","text":"<ul> <li>\u914d\u7f6eSLF4J\u4e0eLogback.  </li> <li>\u7ea7\u522b: <code>INFO</code>, <code>DEBUG</code>, <code>ERROR</code>.  </li> <li>\u793a\u4f8b: \u8bb0\u5f55Hibernate queries.  </li> </ul>"},{"location":"languages/zh/phase3/#acid","title":"\u4e8b\u52a1\u6982\u5ff5 (ACID)","text":"<ul> <li>\u539f\u5b50\u6027\u3001\u4e00\u81f4\u6027\u3001\u9694\u79bb\u6027\u3001\u6301\u4e45\u6027.  </li> <li>JDBC\u4e8b\u52a1 (<code>commit</code>, <code>rollback</code>) \u548c Hibernate (<code>@Transactional</code>).  </li> </ul>"},{"location":"languages/zh/phase3/#_2","title":"\u7d22\u5f15\u4e0e\u6267\u884c\u8ba1\u5212","text":"<ul> <li>Indexes: \u4e3b\u952e\u3001\u552f\u4e00\u3001\u590d\u5408\u7d22\u5f15.  </li> <li>\u4f7f\u7528EXPLAIN\u4f18\u5316queries.  </li> <li>\u793a\u4f8b: \u5728\u7ecf\u5e38\u641c\u7d22\u7684\u5217\u4e0a\u521b\u5efa\u7d22\u5f15.  </li> </ul>"},{"location":"languages/zh/phase3/#_3","title":"\u6587\u4ef6\u64cd\u4f5c (\u53ef\u9009)","text":"<ul> <li>\u4f7f\u7528<code>Files</code>, <code>BufferedReader</code>\u8fdb\u884c\u8bfb\u5199.  </li> <li>\u793a\u4f8b: \u4f7f\u7528Streams\u5c06\u4ea7\u54c1\u62a5\u544a\u5bfc\u51fa\u4e3aCSV.  </li> </ul>"},{"location":"languages/zh/phase3/#_4","title":"\u6570\u636e\u5e93\u6d4b\u8bd5 (\u4ecb\u7ecd)","text":"<ul> <li>\u4f7f\u7528H2\u548cJUnit\u8fdb\u884c\u96c6\u6210\u6d4b\u8bd5.  </li> <li>\u793a\u4f8b: \u6d4b\u8bd5Hibernate\u7684CRUD\u64cd\u4f5c.  </li> </ul>"},{"location":"languages/zh/phase3/#_5","title":"\u6700\u7ec8\u9879\u76ee","text":"<p>\u4ea7\u54c1\u7ba1\u7406\u7cfb\u7edf - \u6570\u636e\u5e93: Product \u548c Category \u8868 (1:N\u5173\u7cfb). - Java: \u4f7f\u7528JPA\u7684\u7c7b (<code>Product</code>, <code>Category</code>), \u4f7f\u7528Hibernate\u8fdb\u884cCRUD. - \u53ef\u9009: \u5728MongoDB\u4e2d\u5b58\u50a8\u4ea7\u54c1\u53d8\u66f4\u65e5\u5fd7. - \u53ef\u9009: \u5728MongoDB\u4e2d\u5b58\u50a8\u4ea7\u54c1\u7684\u52a8\u6001\u5c5e\u6027\uff08\u4f8b\u5982\uff0c\u6280\u672f\u89c4\u683c\uff09. - Streams: \u8fc7\u6ee4/\u6392\u5e8f\u4ea7\u54c1\uff08\u4f8b\u5982\uff0c\u6309\u4ef7\u683c\u6216\u7c7b\u522b\uff09. - Logging: \u76d1\u63a7\u6570\u636e\u5e93\u64cd\u4f5c. - Git: \u6309\u529f\u80fd\u63d0\u4ea4\uff08\u4f8b\u5982\uff0c<code>feature/crud</code>, <code>feature/streams</code>\uff09. - \u5728GitHub\u4e0a\u53d1\u5e03\uff0c\u9644\u5e26\u8bf4\u660e\u6027README.  </p>"},{"location":"languages/zh/phase3/#_6","title":"\u8d44\u6e90","text":"<ul> <li>SQLBolt</li> <li>PostgreSQL Official Docs </li> <li>Baeldung </li> <li>Use The Index, Luke!</li> <li>Hibernate Official Docs </li> <li>Baeldung \u2013 Logging with SLF4J</li> <li>Flyway</li> <li>MongoDB University</li> </ul>"},{"location":"languages/zh/phase4/","title":"\u7b2c\u56db\u9636\u6bb5 \u2013 \u6846\u67b6\u4e0eWeb\u5e94\u7528\uff083-4\u4e2a\u6708\uff09","text":""},{"location":"languages/zh/phase4/#spring-bootspring-core-spring-data-jpa","title":"Spring Boot\u3001Spring Core \u548c Spring Data JPA","text":"<ul> <li>Spring Core: \u4f9d\u8d56\u6ce8\u5165 (<code>@Bean</code>, <code>@Autowired</code>)\uff0cIoC\u5bb9\u5668\u3002  </li> <li>Spring Boot: \u81ea\u52a8\u914d\u7f6e\uff0cstarters (<code>spring-boot-starter-web</code>, <code>spring-boot-starter-data-jpa</code>)\uff0c<code>application.yml</code>\u3002  </li> <li>Spring Data JPA: \u4ed3\u50a8 (<code>CrudRepository</code>, <code>JpaRepository</code>)\uff0c\u4f7f\u7528 <code>@Query</code> \u8fdb\u884c\u67e5\u8be2\uff0c\u5206\u9875\u3002  </li> <li>\u793a\u4f8b: \u5728\u4efb\u52a1\u5e94\u7528\u4e2d\u521b\u5efa REST endpoints \u7528\u4e8e\u7ba1\u7406\u4efb\u52a1 (CRUD)\u3002  </li> </ul>"},{"location":"languages/zh/phase4/#spring-security-jwt-oauth2","title":"Spring Security (JWT, OAuth2)","text":"<ul> <li>\u6982\u5ff5: \u8ba4\u8bc1\u3001\u6388\u6743\u3001\u5b89\u5168\u8fc7\u6ee4\u5668\u3002  </li> <li>JWT: \u521b\u5efa\u548c\u9a8c\u8bc1 tokens\uff0c\u4f7f\u7528 <code>JwtAuthenticationFilter</code>\u3002  </li> <li>OAuth2: \u914d\u7f6e Resource Server\uff0c\u4e0e\u63d0\u4f9b\u5546\u96c6\u6210\uff08\u4f8b\u5982 Google\uff09\u3002  </li> <li>\u793a\u4f8b: \u4f7f\u7528 JWT \u548c roles (<code>ADMIN</code>, <code>USER</code>) \u4fdd\u62a4\u4efb\u52a1 endpoints\u3002  </li> </ul>"},{"location":"languages/zh/phase4/#_1","title":"\u5355\u5143\u6d4b\u8bd5\u4e0e\u96c6\u6210\u6d4b\u8bd5","text":"<ul> <li>\u5355\u5143\u6d4b\u8bd5: JUnit 5, Mockito (<code>@Mock</code>, <code>@InjectMocks</code>)\uff0c\u6d4b\u8bd5\u4e1a\u52a1\u903b\u8f91\u3002  </li> <li>\u96c6\u6210\u6d4b\u8bd5: <code>@SpringBootTest</code>, <code>@WebMvcTest</code>\uff0c\u4f7f\u7528 H2 \u6570\u636e\u5e93\u8fdb\u884c\u6d4b\u8bd5\u3002  </li> <li>Testcontainers: \u5728 Docker \u5bb9\u5668\u4e2d\u4f7f\u7528 PostgreSQL \u8fdb\u884c\u6d4b\u8bd5\u3002  </li> <li>\u793a\u4f8b: \u6d4b\u8bd5\u4efb\u52a1\u5e94\u7528\u7684\u670d\u52a1\u548c endpoints\u3002  </li> </ul>"},{"location":"languages/zh/phase4/#restful-apis-swagger","title":"RESTful APIs \u4e0e Swagger \u6587\u6863","text":"<ul> <li>REST: HTTP \u65b9\u6cd5\u3001\u72b6\u6001\u7801\u3001RESTful \u539f\u5219\u3002  </li> <li>Spring REST: <code>@RestController</code>, <code>@RequestMapping</code>, <code>@PathVariable</code>\u3002  </li> <li>Swagger: \u914d\u7f6e springdoc-openapi\uff0c\u4f7f\u7528 <code>@Operation</code> \u6ce8\u89e3\u3002  </li> <li>\u793a\u4f8b: \u4f7f\u7528 Swagger UI \u6587\u6863\u5316\u4efb\u52a1\u5e94\u7528 endpoints\u3002  </li> </ul>"},{"location":"languages/zh/phase4/#graphql","title":"GraphQL \u4ecb\u7ecd","text":"<ul> <li>\u6982\u5ff5: Queries, mutations, schema\u3002  </li> <li>Spring Boot \u4e0e GraphQL: \u4f7f\u7528 spring-boot-starter-graphql \u8fdb\u884c\u8bbe\u7f6e\u3002  </li> <li>\u793a\u4f8b: \u521b\u5efa\u4e00\u4e2a GraphQL query \u4ee5\u6309\u72b6\u6001\u5217\u51fa\u4efb\u52a1\u3002  </li> </ul>"},{"location":"languages/zh/phase4/#_2","title":"\u57fa\u7840\u524d\u7aef\u96c6\u6210","text":"<ul> <li>Thymeleaf: \u4f7f\u7528 Spring Boot \u6e32\u67d3 HTML \u9875\u9762\u6a21\u677f\u3002  </li> <li>\u793a\u4f8b: \u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 Web \u754c\u9762\u4ee5\u67e5\u770b\u548c\u521b\u5efa\u4efb\u52a1\u3002  </li> </ul>"},{"location":"languages/zh/phase4/#maven-gradle","title":"\u6784\u5efa\u5de5\u5177\uff1aMaven \u548c Gradle","text":"<ul> <li>Maven: <code>pom.xml</code> \u7ed3\u6784\uff0c\u4f9d\u8d56\uff0c\u63d2\u4ef6\u3002  </li> <li>Gradle: <code>build.gradle</code> \u6587\u4ef6\uff0c\u4efb\u52a1\uff0c\u4f9d\u8d56\u7ba1\u7406\u3002  </li> <li>\u793a\u4f8b: \u4f7f\u7528 Maven \u548c Gradle \u914d\u7f6e\u4efb\u52a1\u5e94\u7528\u3002  </li> </ul>"},{"location":"languages/zh/phase4/#_3","title":"\u9879\u76ee\u90e8\u7f72","text":"<ul> <li>\u5e73\u53f0: Railway, Heroku, AWS (Elastic Beanstalk)\u3002  </li> <li>\u6b65\u9aa4: \u6253\u5305\u4e3a JAR\uff0c\u914d\u7f6e CI/CD \u4f7f\u7528 GitHub Actions\u3002  </li> <li>\u793a\u4f8b: \u5728 Railway \u4e0a\u90e8\u7f72\u4efb\u52a1\u5e94\u7528\uff0c\u7ed3\u5408 PostgreSQL\u3002  </li> </ul>"},{"location":"languages/zh/phase4/#_4","title":"\u6700\u7ec8\u9879\u76ee","text":"<p>\u4efb\u52a1\u7ba1\u7406\u7cfb\u7edf - \u6570\u636e\u5e93: <code>Task</code>\uff08\u6807\u9898\u3001\u63cf\u8ff0\u3001\u72b6\u6001\uff09\u548c <code>User</code> \u8868\uff081:N \u5173\u7cfb\uff09\u3002 - Java: \u4f7f\u7528 Spring Boot \u548c Spring Data JPA \u5b9e\u73b0 REST API \u8fdb\u884c CRUD\u3002 - \u5b89\u5168: JWT \u8ba4\u8bc1\uff0croles (<code>ADMIN</code>, <code>USER</code>)\u3002 - \u6d4b\u8bd5: \u5355\u5143\u6d4b\u8bd5\uff08\u670d\u52a1\uff09\u548c\u96c6\u6210\u6d4b\u8bd5\uff08\u4f7f\u7528 Testcontainers \u6d4b\u8bd5 endpoints\uff09\u3002 - \u6587\u6863: \u4f7f\u7528 Swagger UI \u63d0\u4f9b endpoints \u63cf\u8ff0\u3002 - \u53ef\u9009: \u6dfb\u52a0 GraphQL query \u4ee5\u5217\u51fa\u4efb\u52a1\uff0c\u4ee5\u53ca Thymeleaf \u754c\u9762\u7528\u4e8e\u4ea4\u4e92\u3002 - Git: \u6309\u529f\u80fd\u63d0\u4ea4\uff08\u4f8b\u5982\uff0c<code>feature/rest-api</code>, <code>feature/security</code>\uff09\u3002 - \u53d1\u5e03: \u5728 GitHub \u4e0a\u53d1\u5e03\uff0c\u9644\u5e26 README\uff08\u8bbe\u7f6e\u3001endpoints\u3001\u90e8\u7f72\uff09\u3002  </p>"},{"location":"languages/zh/phase4/#_5","title":"\u8d44\u6e90","text":"<ul> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Security Guide </li> <li>Testcontainers Official Docs </li> <li>Springdoc OpenAPI (Swagger) </li> <li>AWS Free Tier Tutorials </li> <li>GraphQL Official </li> <li>Spring Boot with Thymeleaf </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/zh/phase5/","title":"\u7b2c\u4e94\u9636\u6bb5 \u2013 \u67b6\u6784\u4e0e\u5e76\u53d1\uff082-3\u4e2a\u6708\uff09","text":""},{"location":"languages/zh/phase5/#clean-code-solid","title":"Clean Code \u4e0e SOLID \u539f\u5219","text":"<ul> <li>Clean Code: \u6e05\u6670\u7684\u547d\u540d\uff0c\u77ed\u5c0f\u7684\u51fd\u6570\uff0c\u6709\u7528\u7684\u6ce8\u91ca\uff0c\u4e00\u81f4\u7684\u683c\u5f0f\u3002  </li> <li>SOLID:  </li> <li>SRP (Single Responsibility Principle)  </li> <li>OCP (Open/Closed Principle)  </li> <li>LSP (Liskov Substitution Principle)  </li> <li>ISP (Interface Segregation Principle)  </li> <li>DIP (Dependency Inversion Principle)  </li> </ul> <p>\u793a\u4f8b: \u91cd\u6784\u4efb\u52a1\u7ba1\u7406\u5668\u4e2d\u7684\u670d\u52a1\u4ee5\u9075\u5faa SOLID \u539f\u5219\u3002  </p>"},{"location":"languages/zh/phase5/#_1","title":"\u8bbe\u8ba1\u6a21\u5f0f","text":"<ul> <li>\u6a21\u5f0f: Factory\uff08\u521b\u5efa\uff09\uff0cSingleton\uff08\u5355\u4e00\u5b9e\u4f8b\uff09\uff0cBuilder\uff08\u5bf9\u8c61\u6784\u5efa\uff09\uff0cStrategy\uff08\u884c\u4e3a\uff09\uff0cObserver\uff08\u4e8b\u4ef6\uff09\u3002  </li> <li>\u5e94\u7528: \u9009\u62e9\u9002\u5408\u9879\u76ee\u4e0a\u4e0b\u6587\u7684\u6a21\u5f0f\u3002  </li> </ul> <p>\u793a\u4f8b: \u4f7f\u7528 Strategy \u5b9e\u73b0\u4e0d\u540c\u7684\u4efb\u52a1\u4f18\u5148\u7ea7\u7b97\u6cd5\u3002  </p>"},{"location":"languages/zh/phase5/#_2","title":"\u7ebf\u7a0b\u4e0e\u5e76\u53d1","text":"<ul> <li>\u6982\u5ff5: Thread, Runnable, ExecutorService, ForkJoinPool\u3002  </li> <li>\u6280\u672f: \u521b\u5efa\u548c\u7ba1\u7406\u7ebf\u7a0b\u6c60\uff0c\u5f02\u6b65\u4efb\u52a1\u3002  </li> </ul> <p>\u793a\u4f8b: \u4f7f\u7528 ExecutorService \u5e76\u884c\u5904\u7406\u4efb\u52a1\u62a5\u544a\u3002  </p>"},{"location":"languages/zh/phase5/#_3","title":"\u540c\u6b65\u4e0e\u5e76\u53d1\u95ee\u9898","text":"<ul> <li>\u673a\u5236: <code>synchronized</code>, <code>Lock</code>, <code>ReentrantLock</code>, <code>ConcurrentHashMap</code>\u3002  </li> <li>\u95ee\u9898: Deadlock, race condition, starvation\u3002  </li> </ul> <p>\u793a\u4f8b: \u5b9e\u73b0\u5bf9\u5171\u4eab\u4efb\u52a1\u5217\u8868\u7684\u5b89\u5168\u8bbf\u95ee\u3002  </p>"},{"location":"languages/zh/phase5/#_4","title":"\u5fae\u670d\u52a1\u4ecb\u7ecd","text":"<ul> <li>\u6982\u5ff5: \u5fae\u670d\u52a1\u67b6\u6784\uff0cREST \u901a\u4fe1\uff0c\u670d\u52a1\u53d1\u73b0\u3002  </li> <li>\u5de5\u5177: Spring Cloud\uff08\u4f8b\u5982\uff0cEureka \u7528\u4e8e\u670d\u52a1\u53d1\u73b0\uff09\u3002  </li> </ul> <p>\u793a\u4f8b: \u5c06\u4efb\u52a1\u7ba1\u7406\u5668\u62c6\u5206\u4e3a\u5fae\u670d\u52a1\uff08\u4efb\u52a1\u548c\u7528\u6237\uff09\u3002  </p>"},{"location":"languages/zh/phase5/#_5","title":"\u6d88\u606f\u961f\u5217\u57fa\u7840\uff08\u53ef\u9009\uff09","text":"<ul> <li>\u6982\u5ff5: Publisher/subscriber\uff0c\u961f\u5217\uff0c\u4e3b\u9898\u3002  </li> <li>RabbitMQ: \u8bbe\u7f6e\uff0c\u53d1\u9001\u548c\u6d88\u8d39\u6d88\u606f\u3002  </li> </ul> <p>\u793a\u4f8b: \u901a\u8fc7 RabbitMQ \u901a\u77e5\u7528\u6237\u4efb\u52a1\u66f4\u65b0\u3002  </p>"},{"location":"languages/zh/phase5/#_6","title":"\u6027\u80fd\u4f18\u5316","text":"<ul> <li>Caching: \u4f7f\u7528 Redis \u7684 Spring Cache \u51cf\u5c11\u6570\u636e\u5e93\u8bbf\u95ee\u3002  </li> <li>JVM Tuning: \u57fa\u672c\u6982\u5ff5\uff08heap, garbage collection\uff09\u3002  </li> </ul> <p>\u793a\u4f8b: \u4e3a\u4efb\u52a1\u7cfb\u7edf\u4e2d\u7684\u9891\u7e41\u67e5\u8be2\u5b9e\u73b0\u7f13\u5b58\u3002  </p>"},{"location":"languages/zh/phase5/#devopscloud-docker-cicd","title":"DevOps/Cloud \u4ecb\u7ecd\uff1aDocker \u4e0e CI/CD","text":"<ul> <li>Docker: \u5bb9\u5668\uff0c\u955c\u50cf\uff0cDockerfile\uff0cDocker Compose\u3002  </li> <li>CI/CD: \u4f7f\u7528 GitHub Actions \u914d\u7f6e\u6784\u5efa\u548c\u90e8\u7f72\u7ba1\u9053\u3002  </li> </ul> <p>\u793a\u4f8b: \u4e3a\u4efb\u52a1\u5e94\u7528\u521b\u5efa Dockerfile \u5e76\u901a\u8fc7 GitHub Actions \u90e8\u7f72\u3002  </p>"},{"location":"languages/zh/phase5/#_7","title":"\u53ef\u89c2\u6d4b\u6027","text":"<ul> <li>\u5de5\u5177: Prometheus\uff08\u6307\u6807\uff09\uff0cGrafana\uff08\u53ef\u89c6\u5316\uff09\uff0cELK Stack\uff08\u65e5\u5fd7\uff09\u3002  </li> <li>\u6982\u5ff5: \u6027\u80fd\u76d1\u63a7\uff0c\u96c6\u4e2d\u5f0f\u65e5\u5fd7\uff0c\u8b66\u62a5\u3002  </li> </ul> <p>\u793a\u4f8b: \u4f7f\u7528 Prometheus \u548c Grafana \u76d1\u63a7\u4efb\u52a1 API \u7684\u54cd\u5e94\u65f6\u95f4\u3002  </p>"},{"location":"languages/zh/phase5/#owasp-top-ten","title":"\u5b89\u5168\uff1aOWASP Top Ten","text":"<ul> <li>\u6982\u5ff5: \u6ce8\u5165\uff0c\u8ba4\u8bc1\u5931\u8d25\uff0c\u654f\u611f\u6570\u636e\u66b4\u9732\u3002  </li> <li>\u5b9e\u8df5: \u8f93\u5165\u9a8c\u8bc1\uff0c\u6570\u636e\u6e05\u7406\uff0c\u5b89\u5168\u914d\u7f6e\u3002  </li> </ul> <p>\u793a\u4f8b: \u4fdd\u62a4\u4efb\u52a1 API \u514d\u53d7 SQL \u6ce8\u5165\u548c XSS \u653b\u51fb\u3002  </p>"},{"location":"languages/zh/phase5/#_8","title":"\u6700\u7ec8\u9879\u76ee","text":"<p>\u9ad8\u7ea7\u4efb\u52a1\u7ba1\u7406\u7cfb\u7edf - \u540e\u7aef: \u589e\u5f3a\u7b2c\u56db\u9636\u6bb5\u7684\u4efb\u52a1 API\uff0c\u4f7f\u7528\u5fae\u670d\u52a1\uff08\u4efb\u52a1\u548c\u7528\u6237\uff09\u3002 - \u67b6\u6784: \u4f7f\u7528 Clean Code\u3001SOLID \u548c design patterns\uff08\u4f8b\u5982 Strategy\uff09\u91cd\u6784\u3002 - \u5e76\u53d1: \u4f7f\u7528 ExecutorService \u5e76\u884c\u5904\u7406\u62a5\u544a\u3002 - \u53ef\u9009: \u901a\u8fc7 RabbitMQ \u5b9e\u73b0\u5fae\u670d\u52a1\u95f4\u901a\u4fe1\uff0c\u5e76\u4f7f\u7528 Redis \u4e3a\u9891\u7e41\u67e5\u8be2\u5b9e\u73b0\u7f13\u5b58\u3002 - DevOps: \u4f7f\u7528 Docker \u6253\u5305\uff0c\u914d\u7f6e GitHub Actions \u7684 CI/CD\u3002 - \u53ef\u89c2\u6d4b\u6027: \u6dfb\u52a0 Prometheus \u548c Grafana \u7528\u4e8e\u6307\u6807\u76d1\u63a7\u3002 - \u5b89\u5168: \u5b9e\u73b0\u9488\u5bf9 OWASP Top Ten \u7684\u4fdd\u62a4\u63aa\u65bd\u3002 - Git: \u6309\u529f\u80fd\u63d0\u4ea4\uff08\u4f8b\u5982\uff0c<code>feature/microservices</code>, <code>feature/concurrency</code>\uff09\u3002 - \u53d1\u5e03: \u5728 GitHub \u4e0a\u53d1\u5e03\uff0c\u9644\u5e26\u8be6\u7ec6\u7684 README\uff08\u8bbe\u7f6e\u3001\u67b6\u6784\u3001\u90e8\u7f72\uff09\u3002  </p>"},{"location":"languages/zh/phase5/#_9","title":"\u8d44\u6e90","text":"<ul> <li>The Pragmatic Programmer\uff08\u4e66\u7c4d\uff09  </li> <li>Effective Java\uff08\u4e66\u7c4d\uff09  </li> <li>Java Concurrency in Practice\uff08\u4e66\u7c4d\uff09  </li> <li>Spring Cloud Documentation </li> <li>RabbitMQ Tutorials </li> <li>Redis University </li> <li>Docker Official Docs </li> <li>Prometheus Documentation </li> <li>Grafana Documentation </li> <li>ELK Stack Guide </li> <li>OWASP Top Ten </li> <li>GitHub Actions Documentation </li> </ul>"},{"location":"languages/zh/phase6/","title":"\u7b2c\u516d\u9636\u6bb5 \u2013 \u6700\u7ec8\u9879\u76ee\uff08\u6301\u7eed\u8fdb\u884c\uff09","text":""},{"location":"languages/zh/phase6/#1-crud","title":"\u9879\u76ee 1: \u5e26\u8ba4\u8bc1\u7684\u5b8c\u6574 CRUD","text":"<ul> <li>\u76ee\u6807: \u6784\u5efa\u4e00\u4e2a\u7a33\u5065\u7684 RESTful API\uff0c\u5177\u5907\u5b89\u5168\u8ba4\u8bc1\u548c\u6d4b\u8bd5\u3002  </li> <li>\u6280\u672f: Spring Boot, Spring Data JPA (PostgreSQL), Spring Security (JWT), JUnit 5, Testcontainers\u3002  </li> <li>\u529f\u80fd: \u5bf9\u5b9e\u4f53\uff08\u4f8b\u5982\u4efb\u52a1\u3001\u7528\u6237\uff09\u8fdb\u884c CRUD \u64cd\u4f5c\uff0c\u5e26 roles (ADMIN, USER) \u7684\u8ba4\u8bc1\uff0c\u4f7f\u7528 Swagger \u8fdb\u884c\u6587\u6863\u5316\u3002  </li> <li>\u53ef\u9009: \u6dfb\u52a0 Thymeleaf \u754c\u9762\u4ee5\u67e5\u770b/\u7ba1\u7406\u4efb\u52a1\u3002  </li> <li>\u793a\u4f8b: \u7528\u4e8e\u7ba1\u7406\u9879\u76ee\u7684 API\uff08\u5b9e\u4f53\uff1a<code>Project</code>, <code>Task</code>, <code>User</code>\uff09\uff0c\u5e26\u53d7\u4fdd\u62a4\u7684 endpoints\u3002  </li> </ul>"},{"location":"languages/zh/phase6/#2","title":"\u9879\u76ee 2: \u6587\u4ef6\u4e0a\u4f20","text":"<ul> <li>\u76ee\u6807: \u4e3a\u9879\u76ee 1 \u7684 API \u6dfb\u52a0\u6587\u4ef6\u4e0a\u4f20\u529f\u80fd\u3002  </li> <li>\u6280\u672f: Spring Boot (<code>MultipartFile</code>), Amazon S3 \u6216\u672c\u5730\u5b58\u50a8\uff0c\u6587\u4ef6\u9a8c\u8bc1\u3002  </li> <li>\u529f\u80fd: \u4e0a\u4f20\u4e0e\u4efb\u52a1\u76f8\u5173\u7684\u56fe\u7247/\u6587\u6863\uff0c\u9a8c\u8bc1\u7c7b\u578b/\u5927\u5c0f\u3002  </li> <li>\u793a\u4f8b: \u5141\u8bb8\u5728 API \u4e2d\u4e3a\u4efb\u52a1\u4e0a\u4f20\u9644\u4ef6\uff08\u4f8b\u5982 PDF, PNG\uff09\u3002  </li> </ul>"},{"location":"languages/zh/phase6/#3","title":"\u9879\u76ee 3: \u4e91\u90e8\u7f72","text":"<ul> <li>\u76ee\u6807: \u5c06 API \u90e8\u7f72\u5230\u4e91\u5e73\u53f0\u5e76\u5b9e\u73b0 CI/CD\u3002  </li> <li>\u6280\u672f: Railway, Heroku \u6216 AWS (Elastic Beanstalk), GitHub Actions, Docker\u3002  </li> <li>\u529f\u80fd: \u6253\u5305\u4e3a JAR/Docker\uff0c\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u81ea\u52a8\u5316\u90e8\u7f72\u3002  </li> <li>\u53ef\u9009: \u4f7f\u7528 Redis \u5b9e\u73b0\u7f13\u5b58\u4ee5\u4f18\u5316\u9891\u7e41\u67e5\u8be2\u3002  </li> <li>\u793a\u4f8b: \u5728 Railway \u4e0a\u90e8\u7f72\u9879\u76ee API\uff0c\u7ed3\u5408 PostgreSQL \u548c CI/CD\u3002  </li> </ul>"},{"location":"languages/zh/phase6/#4","title":"\u9879\u76ee 4: \u5fae\u670d\u52a1","text":"<ul> <li>\u76ee\u6807: \u5c06\u9879\u76ee 1 \u7684 API \u62c6\u5206\u4e3a\u7f16\u6392\u7684\u5fae\u670d\u52a1\u3002  </li> <li>\u6280\u672f: Spring Cloud (Eureka, Gateway), Docker Compose, REST \u901a\u4fe1\u3002  </li> <li>\u529f\u80fd: \u4e3a <code>Tasks</code> \u548c <code>Users</code> \u521b\u5efa\u5fae\u670d\u52a1\uff0c\u5e26\u670d\u52a1\u53d1\u73b0\u3002  </li> <li>\u53ef\u9009: \u4f7f\u7528 RabbitMQ \u5b9e\u73b0\u5fae\u670d\u52a1\u95f4\u7684\u5f02\u6b65\u901a\u4fe1\u3002  </li> <li>\u793a\u4f8b: \u5c06\u4efb\u52a1\u548c\u7528\u6237\u903b\u8f91\u5206\u4e3a\u4e24\u4e2a\u670d\u52a1\uff0c\u4f7f\u7528 Docker \u8fdb\u884c\u7f16\u6392\u3002  </li> </ul>"},{"location":"languages/zh/phase6/#5-api","title":"\u9879\u76ee 5: \u5916\u90e8 API \u96c6\u6210","text":"<ul> <li>\u76ee\u6807: \u6d88\u8d39\u5916\u90e8 API \u4ee5\u589e\u5f3a\u529f\u80fd\u3002  </li> <li>\u6280\u672f: Spring RestTemplate \u6216 WebClient, API \u8ba4\u8bc1\uff08\u4f8b\u5982 OAuth2\uff09\u3002  </li> <li>\u529f\u80fd: \u96c6\u6210\u516c\u5171 API\uff08\u4f8b\u5982\uff0c\u901a\u8fc7 SendGrid \u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u901a\u77e5\uff09\u3002  </li> <li>\u53ef\u9009: \u6dfb\u52a0 GraphQL query \u4ee5\u68c0\u7d22\u4efb\u52a1/\u7528\u6237\uff0c\u5e76\u5c06\u5143\u6570\u636e\u5b58\u50a8\u5728 MongoDB \u4e2d\u3002  </li> <li>\u793a\u4f8b: \u6dfb\u52a0\u4efb\u52a1\u5b8c\u6210\u65f6\u7684\u7535\u5b50\u90ae\u4ef6\u901a\u77e5\u3002  </li> </ul>"},{"location":"languages/zh/phase6/#_2","title":"\u4f5c\u54c1\u96c6\u6700\u4f73\u5b9e\u8df5","text":"<ul> <li>Git: \u6309\u529f\u80fd\u63d0\u4ea4\uff08\u4f8b\u5982\uff0c<code>feature/crud</code>, <code>feature/upload</code>\uff09\uff0c\u6e05\u6670\u7684\u5206\u652f\u3002  </li> <li>\u6587\u6863: README \u5305\u542b\u63cf\u8ff0\u3001\u8bbe\u7f6e\u3001endpoints\u3001\u90e8\u7f72\u548c\u622a\u56fe\u3002  </li> <li>\u53d1\u5e03: \u5728 GitHub \u4e0a\u6258\u7ba1\uff0c\u5e26 open-source \u8bb8\u53ef\u8bc1\uff08\u4f8b\u5982 MIT\uff09\u3002  </li> </ul>"},{"location":"languages/zh/phase6/#_3","title":"\u8d44\u6e90","text":"<ul> <li>GitHub Guides </li> <li>Spring Boot Official Docs </li> <li>Baeldung \u2013 Spring Boot Tutorials </li> <li>Spring Cloud Documentation </li> <li>Docker Official Docs </li> <li>Railway Documentation </li> <li>Heroku Dev Center </li> <li>AWS Elastic Beanstalk </li> <li>SendGrid API Docs </li> <li>Awesome Open Source </li> <li>Practical MongoDB Aggregations</li> </ul>"}]}